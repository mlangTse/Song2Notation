{"ast":null,"code":"import { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nimport { Tables } from './tables.js';\nimport { defined, log, RuntimeError } from './util.js';\nfunction L() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (TextDynamics.DEBUG) log('Vex.Flow.TextDynamics', args);\n}\nclass TextDynamics extends Note {\n  static get CATEGORY() {\n    return \"TextDynamics\";\n  }\n  static get GLYPHS() {\n    return {\n      f: {\n        code: 'dynamicForte',\n        width: 12\n      },\n      p: {\n        code: 'dynamicPiano',\n        width: 14\n      },\n      m: {\n        code: 'dynamicMezzo',\n        width: 17\n      },\n      s: {\n        code: 'dynamicSforzando',\n        width: 10\n      },\n      z: {\n        code: 'dynamicZ',\n        width: 12\n      },\n      r: {\n        code: 'dynamicRinforzando',\n        width: 12\n      }\n    };\n  }\n  constructor(noteStruct) {\n    super(noteStruct);\n    this.sequence = (noteStruct.text || '').toLowerCase();\n    this.line = noteStruct.line || 0;\n    this.glyphs = [];\n    this.render_options = Object.assign(Object.assign({}, this.render_options), {\n      glyph_font_size: Tables.NOTATION_FONT_SCALE\n    });\n    L('New Dynamics Text: ', this.sequence);\n  }\n  setLine(line) {\n    this.line = line;\n    return this;\n  }\n  preFormat() {\n    let total_width = 0;\n    this.glyphs = [];\n    this.sequence.split('').forEach(letter => {\n      const glyph_data = TextDynamics.GLYPHS[letter];\n      if (!glyph_data) throw new RuntimeError('Invalid dynamics character: ' + letter);\n      const size = defined(this.render_options.glyph_font_size);\n      const glyph = new Glyph(glyph_data.code, size, {\n        category: 'textNote'\n      });\n      this.glyphs.push(glyph);\n      total_width += glyph_data.width;\n    });\n    this.setWidth(total_width);\n    this.preFormatted = true;\n    return this;\n  }\n  draw() {\n    this.setRendered();\n    const x = this.getAbsoluteX();\n    const y = this.checkStave().getYForLine(this.line + -3);\n    L('Rendering Dynamics: ', this.sequence);\n    let letter_x = x;\n    this.glyphs.forEach((glyph, index) => {\n      const current_letter = this.sequence[index];\n      glyph.render(this.checkContext(), letter_x, y);\n      letter_x += TextDynamics.GLYPHS[current_letter].width;\n    });\n  }\n}\nTextDynamics.DEBUG = false;\nexport { TextDynamics };","map":{"version":3,"names":["Glyph","Note","Tables","defined","log","RuntimeError","L","_len","arguments","length","args","Array","_key","TextDynamics","DEBUG","CATEGORY","GLYPHS","f","code","width","p","m","s","z","r","constructor","noteStruct","sequence","text","toLowerCase","line","glyphs","render_options","Object","assign","glyph_font_size","NOTATION_FONT_SCALE","setLine","preFormat","total_width","split","forEach","letter","glyph_data","size","glyph","category","push","setWidth","preFormatted","draw","setRendered","x","getAbsoluteX","y","checkStave","getYForLine","letter_x","index","current_letter","render","checkContext"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/textdynamics.js"],"sourcesContent":["import { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nimport { Tables } from './tables.js';\nimport { defined, log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (TextDynamics.DEBUG)\n        log('Vex.Flow.TextDynamics', args);\n}\nclass TextDynamics extends Note {\n    static get CATEGORY() {\n        return \"TextDynamics\";\n    }\n    static get GLYPHS() {\n        return {\n            f: {\n                code: 'dynamicForte',\n                width: 12,\n            },\n            p: {\n                code: 'dynamicPiano',\n                width: 14,\n            },\n            m: {\n                code: 'dynamicMezzo',\n                width: 17,\n            },\n            s: {\n                code: 'dynamicSforzando',\n                width: 10,\n            },\n            z: {\n                code: 'dynamicZ',\n                width: 12,\n            },\n            r: {\n                code: 'dynamicRinforzando',\n                width: 12,\n            },\n        };\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.sequence = (noteStruct.text || '').toLowerCase();\n        this.line = noteStruct.line || 0;\n        this.glyphs = [];\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_size: Tables.NOTATION_FONT_SCALE });\n        L('New Dynamics Text: ', this.sequence);\n    }\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    preFormat() {\n        let total_width = 0;\n        this.glyphs = [];\n        this.sequence.split('').forEach((letter) => {\n            const glyph_data = TextDynamics.GLYPHS[letter];\n            if (!glyph_data)\n                throw new RuntimeError('Invalid dynamics character: ' + letter);\n            const size = defined(this.render_options.glyph_font_size);\n            const glyph = new Glyph(glyph_data.code, size, { category: 'textNote' });\n            this.glyphs.push(glyph);\n            total_width += glyph_data.width;\n        });\n        this.setWidth(total_width);\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        this.setRendered();\n        const x = this.getAbsoluteX();\n        const y = this.checkStave().getYForLine(this.line + -3);\n        L('Rendering Dynamics: ', this.sequence);\n        let letter_x = x;\n        this.glyphs.forEach((glyph, index) => {\n            const current_letter = this.sequence[index];\n            glyph.render(this.checkContext(), letter_x, y);\n            letter_x += TextDynamics.GLYPHS[current_letter].width;\n        });\n    }\n}\nTextDynamics.DEBUG = false;\nexport { TextDynamics };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}