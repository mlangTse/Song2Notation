{"ast":null,"code":"import { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { TextFormatter } from './textformatter.js';\nclass StaveTempo extends StaveModifier {\n  static get CATEGORY() {\n    return \"StaveTempo\";\n  }\n  constructor(tempo, x, shift_y) {\n    super();\n    this.render_options = {\n      glyph_font_scale: 30\n    };\n    this.tempo = tempo;\n    this.position = StaveModifierPosition.ABOVE;\n    this.x = x;\n    this.shift_x = 10;\n    this.shift_y = shift_y;\n    this.resetFont();\n  }\n  setTempo(tempo) {\n    this.tempo = tempo;\n    return this;\n  }\n  setShiftX(x) {\n    this.shift_x = x;\n    return this;\n  }\n  setShiftY(y) {\n    this.shift_y = y;\n    return this;\n  }\n  draw(stave, shift_x) {\n    const ctx = stave.checkContext();\n    this.setRendered();\n    const options = this.render_options;\n    const scale = options.glyph_font_scale / Tables.NOTATION_FONT_SCALE;\n    const name = this.tempo.name;\n    const duration = this.tempo.duration;\n    const dots = this.tempo.dots || 0;\n    const bpm = this.tempo.bpm;\n    let x = this.x + this.shift_x + shift_x;\n    const y = stave.getYForTopText(1) + this.shift_y;\n    ctx.save();\n    const textFormatter = TextFormatter.create(this.textFont);\n    if (name) {\n      ctx.setFont(this.textFont);\n      ctx.fillText(name, x, y);\n      x += textFormatter.getWidthForTextInPx(name);\n    }\n    if (duration && bpm) {\n      const noteTextFont = Object.assign(Object.assign({}, this.textFont), {\n        weight: 'normal',\n        style: 'normal'\n      });\n      ctx.setFont(noteTextFont);\n      const noteTextFormatter = TextFormatter.create(noteTextFont);\n      if (name) {\n        x += noteTextFormatter.getWidthForTextInPx('|');\n        ctx.fillText('(', x, y);\n        x += noteTextFormatter.getWidthForTextInPx('(');\n      }\n      const glyphProps = Tables.getGlyphProps(duration);\n      x += 3 * scale;\n      Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, glyphProps.code_head);\n      x += Glyph.getWidth(glyphProps.code_head, options.glyph_font_scale);\n      if (glyphProps.stem) {\n        let stem_height = 30;\n        if (glyphProps.beam_count) stem_height += 3 * (glyphProps.beam_count - 1);\n        stem_height *= scale;\n        const y_top = y - stem_height;\n        ctx.fillRect(x - scale, y_top, scale, stem_height);\n        if (glyphProps.code && glyphProps.code_flag_upstem) {\n          const flagMetrics = Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, glyphProps.code_flag_upstem, {\n            category: 'flag.staveTempo'\n          });\n          x += flagMetrics.width * Tables.NOTATION_FONT_SCALE / flagMetrics.font.getData().resolution;\n        }\n      }\n      for (let i = 0; i < dots; i++) {\n        x += 6 * scale;\n        ctx.beginPath();\n        ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n        ctx.fill();\n      }\n      ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n    }\n    ctx.restore();\n    return this;\n  }\n}\nStaveTempo.TEXT_FONT = {\n  family: Font.SERIF,\n  size: 14,\n  weight: FontWeight.BOLD,\n  style: FontStyle.NORMAL\n};\nexport { StaveTempo };","map":{"version":3,"names":["Font","FontStyle","FontWeight","Glyph","StaveModifier","StaveModifierPosition","Tables","TextFormatter","StaveTempo","CATEGORY","constructor","tempo","x","shift_y","render_options","glyph_font_scale","position","ABOVE","shift_x","resetFont","setTempo","setShiftX","setShiftY","y","draw","stave","ctx","checkContext","setRendered","options","scale","NOTATION_FONT_SCALE","name","duration","dots","bpm","getYForTopText","save","textFormatter","create","textFont","setFont","fillText","getWidthForTextInPx","noteTextFont","Object","assign","weight","style","noteTextFormatter","glyphProps","getGlyphProps","renderGlyph","code_head","getWidth","stem","stem_height","beam_count","y_top","fillRect","code","code_flag_upstem","flagMetrics","category","width","font","getData","resolution","i","beginPath","arc","Math","PI","fill","restore","TEXT_FONT","family","SERIF","size","BOLD","NORMAL"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/stavetempo.js"],"sourcesContent":["import { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { TextFormatter } from './textformatter.js';\nclass StaveTempo extends StaveModifier {\n    static get CATEGORY() {\n        return \"StaveTempo\";\n    }\n    constructor(tempo, x, shift_y) {\n        super();\n        this.render_options = { glyph_font_scale: 30 };\n        this.tempo = tempo;\n        this.position = StaveModifierPosition.ABOVE;\n        this.x = x;\n        this.shift_x = 10;\n        this.shift_y = shift_y;\n        this.resetFont();\n    }\n    setTempo(tempo) {\n        this.tempo = tempo;\n        return this;\n    }\n    setShiftX(x) {\n        this.shift_x = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.shift_y = y;\n        return this;\n    }\n    draw(stave, shift_x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        const options = this.render_options;\n        const scale = options.glyph_font_scale / Tables.NOTATION_FONT_SCALE;\n        const name = this.tempo.name;\n        const duration = this.tempo.duration;\n        const dots = this.tempo.dots || 0;\n        const bpm = this.tempo.bpm;\n        let x = this.x + this.shift_x + shift_x;\n        const y = stave.getYForTopText(1) + this.shift_y;\n        ctx.save();\n        const textFormatter = TextFormatter.create(this.textFont);\n        if (name) {\n            ctx.setFont(this.textFont);\n            ctx.fillText(name, x, y);\n            x += textFormatter.getWidthForTextInPx(name);\n        }\n        if (duration && bpm) {\n            const noteTextFont = Object.assign(Object.assign({}, this.textFont), { weight: 'normal', style: 'normal' });\n            ctx.setFont(noteTextFont);\n            const noteTextFormatter = TextFormatter.create(noteTextFont);\n            if (name) {\n                x += noteTextFormatter.getWidthForTextInPx('|');\n                ctx.fillText('(', x, y);\n                x += noteTextFormatter.getWidthForTextInPx('(');\n            }\n            const glyphProps = Tables.getGlyphProps(duration);\n            x += 3 * scale;\n            Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, glyphProps.code_head);\n            x += Glyph.getWidth(glyphProps.code_head, options.glyph_font_scale);\n            if (glyphProps.stem) {\n                let stem_height = 30;\n                if (glyphProps.beam_count)\n                    stem_height += 3 * (glyphProps.beam_count - 1);\n                stem_height *= scale;\n                const y_top = y - stem_height;\n                ctx.fillRect(x - scale, y_top, scale, stem_height);\n                if (glyphProps.code && glyphProps.code_flag_upstem) {\n                    const flagMetrics = Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, glyphProps.code_flag_upstem, {\n                        category: 'flag.staveTempo',\n                    });\n                    x += (flagMetrics.width * Tables.NOTATION_FONT_SCALE) / flagMetrics.font.getData().resolution;\n                }\n            }\n            for (let i = 0; i < dots; i++) {\n                x += 6 * scale;\n                ctx.beginPath();\n                ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n                ctx.fill();\n            }\n            ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n        }\n        ctx.restore();\n        return this;\n    }\n}\nStaveTempo.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 14,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\nexport { StaveTempo };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}