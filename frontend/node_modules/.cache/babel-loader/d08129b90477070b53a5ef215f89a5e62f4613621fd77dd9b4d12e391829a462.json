{"ast":null,"code":"import { Glyph } from './glyph.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { defined, log } from './util.js';\nfunction L() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (Clef.DEBUG) log('Vex.Flow.Clef', args);\n}\nclass Clef extends StaveModifier {\n  static get CATEGORY() {\n    return \"Clef\";\n  }\n  static get types() {\n    return {\n      treble: {\n        code: 'gClef',\n        line: 3\n      },\n      bass: {\n        code: 'fClef',\n        line: 1\n      },\n      alto: {\n        code: 'cClef',\n        line: 2\n      },\n      tenor: {\n        code: 'cClef',\n        line: 1\n      },\n      percussion: {\n        code: 'unpitchedPercussionClef1',\n        line: 2\n      },\n      soprano: {\n        code: 'cClef',\n        line: 4\n      },\n      'mezzo-soprano': {\n        code: 'cClef',\n        line: 3\n      },\n      'baritone-c': {\n        code: 'cClef',\n        line: 0\n      },\n      'baritone-f': {\n        code: 'fClef',\n        line: 2\n      },\n      subbass: {\n        code: 'fClef',\n        line: 0\n      },\n      french: {\n        code: 'gClef',\n        line: 4\n      },\n      tab: {\n        code: '6stringTabClef',\n        line: 2.5\n      }\n    };\n  }\n  static get annotationSmufl() {\n    return {\n      '8va': 'timeSig8',\n      '8vb': 'timeSig8'\n    };\n  }\n  constructor(type, size, annotation) {\n    super();\n    this.clef = Clef.types['treble'];\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.setType(type, size, annotation);\n    this.setWidth(Glyph.getWidth(this.clef.code, Clef.getPoint(this.size), `clef_${this.size}`));\n    L('Creating clef:', type);\n  }\n  setType(type, size, annotation) {\n    this.type = type;\n    this.clef = Clef.types[type];\n    if (size === undefined) {\n      this.size = 'default';\n    } else {\n      this.size = size;\n    }\n    const musicFont = Tables.currentMusicFont();\n    if (annotation !== undefined) {\n      const code = Clef.annotationSmufl[annotation];\n      const point = Clef.getPoint(this.size) / 5 * 3;\n      const line = musicFont.lookupMetric(`clef_${this.size}.annotations.${annotation}.${this.type}.line`);\n      const x_shift = musicFont.lookupMetric(`clef_${this.size}.annotations.${annotation}.${this.type}.shiftX`);\n      this.annotation = {\n        code,\n        point,\n        line,\n        x_shift\n      };\n      this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n      this.attachment.metrics.x_max = 0;\n      this.attachment.setXShift(this.annotation.x_shift);\n    } else {\n      this.annotation = undefined;\n    }\n    return this;\n  }\n  getWidth() {\n    if (this.type === 'tab') {\n      defined(this.stave, 'ClefError', \"Can't get width without stave.\");\n    }\n    return this.width;\n  }\n  static getPoint(size) {\n    return size == 'default' ? Tables.NOTATION_FONT_SCALE : Tables.NOTATION_FONT_SCALE / 3 * 2;\n  }\n  setStave(stave) {\n    this.stave = stave;\n    return this;\n  }\n  draw() {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n    this.applyStyle(ctx);\n    ctx.openGroup('clef', this.getAttribute('id'));\n    Glyph.renderGlyph(ctx, this.x, stave.getYForLine(this.clef.line), Clef.getPoint(this.size), this.clef.code, {\n      category: `clef_${this.size}`\n    });\n    if (this.annotation !== undefined && this.attachment !== undefined) {\n      this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);\n      this.attachment.setStave(stave);\n      this.attachment.setContext(ctx);\n      this.attachment.renderToStave(this.x);\n    }\n    ctx.closeGroup();\n    this.restoreStyle(ctx);\n  }\n}\nClef.DEBUG = false;\nexport { Clef };","map":{"version":3,"names":["Glyph","StaveModifier","StaveModifierPosition","Tables","defined","log","L","_len","arguments","length","args","Array","_key","Clef","DEBUG","CATEGORY","types","treble","code","line","bass","alto","tenor","percussion","soprano","subbass","french","tab","annotationSmufl","constructor","type","size","annotation","clef","setPosition","BEGIN","setType","setWidth","getWidth","getPoint","undefined","musicFont","currentMusicFont","point","lookupMetric","x_shift","attachment","metrics","x_max","setXShift","stave","width","NOTATION_FONT_SCALE","setStave","draw","checkStave","ctx","checkContext","setRendered","applyStyle","openGroup","getAttribute","renderGlyph","x","getYForLine","category","placeGlyphOnLine","setContext","renderToStave","closeGroup","restoreStyle"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/clef.js"],"sourcesContent":["import { Glyph } from './glyph.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { defined, log } from './util.js';\nfunction L(...args) {\n    if (Clef.DEBUG)\n        log('Vex.Flow.Clef', args);\n}\nclass Clef extends StaveModifier {\n    static get CATEGORY() {\n        return \"Clef\";\n    }\n    static get types() {\n        return {\n            treble: {\n                code: 'gClef',\n                line: 3,\n            },\n            bass: {\n                code: 'fClef',\n                line: 1,\n            },\n            alto: {\n                code: 'cClef',\n                line: 2,\n            },\n            tenor: {\n                code: 'cClef',\n                line: 1,\n            },\n            percussion: {\n                code: 'unpitchedPercussionClef1',\n                line: 2,\n            },\n            soprano: {\n                code: 'cClef',\n                line: 4,\n            },\n            'mezzo-soprano': {\n                code: 'cClef',\n                line: 3,\n            },\n            'baritone-c': {\n                code: 'cClef',\n                line: 0,\n            },\n            'baritone-f': {\n                code: 'fClef',\n                line: 2,\n            },\n            subbass: {\n                code: 'fClef',\n                line: 0,\n            },\n            french: {\n                code: 'gClef',\n                line: 4,\n            },\n            tab: {\n                code: '6stringTabClef',\n                line: 2.5,\n            },\n        };\n    }\n    static get annotationSmufl() {\n        return {\n            '8va': 'timeSig8',\n            '8vb': 'timeSig8',\n        };\n    }\n    constructor(type, size, annotation) {\n        super();\n        this.clef = Clef.types['treble'];\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type, size, annotation);\n        this.setWidth(Glyph.getWidth(this.clef.code, Clef.getPoint(this.size), `clef_${this.size}`));\n        L('Creating clef:', type);\n    }\n    setType(type, size, annotation) {\n        this.type = type;\n        this.clef = Clef.types[type];\n        if (size === undefined) {\n            this.size = 'default';\n        }\n        else {\n            this.size = size;\n        }\n        const musicFont = Tables.currentMusicFont();\n        if (annotation !== undefined) {\n            const code = Clef.annotationSmufl[annotation];\n            const point = (Clef.getPoint(this.size) / 5) * 3;\n            const line = musicFont.lookupMetric(`clef_${this.size}.annotations.${annotation}.${this.type}.line`);\n            const x_shift = musicFont.lookupMetric(`clef_${this.size}.annotations.${annotation}.${this.type}.shiftX`);\n            this.annotation = { code, point, line, x_shift };\n            this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n            this.attachment.metrics.x_max = 0;\n            this.attachment.setXShift(this.annotation.x_shift);\n        }\n        else {\n            this.annotation = undefined;\n        }\n        return this;\n    }\n    getWidth() {\n        if (this.type === 'tab') {\n            defined(this.stave, 'ClefError', \"Can't get width without stave.\");\n        }\n        return this.width;\n    }\n    static getPoint(size) {\n        return size == 'default' ? Tables.NOTATION_FONT_SCALE : (Tables.NOTATION_FONT_SCALE / 3) * 2;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('clef', this.getAttribute('id'));\n        Glyph.renderGlyph(ctx, this.x, stave.getYForLine(this.clef.line), Clef.getPoint(this.size), this.clef.code, {\n            category: `clef_${this.size}`,\n        });\n        if (this.annotation !== undefined && this.attachment !== undefined) {\n            this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);\n            this.attachment.setStave(stave);\n            this.attachment.setContext(ctx);\n            this.attachment.renderToStave(this.x);\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\nClef.DEBUG = false;\nexport { Clef };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}