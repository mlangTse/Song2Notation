{"ast":null,"code":"import { BoundingBox } from './boundingbox.js';\nimport { Clef } from './clef.js';\nimport { Element } from './element.js';\nimport { Font, FontStyle, FontWeight } from './font.js';\nimport { KeySignature } from './keysignature.js';\nimport { Barline, BarlineType } from './stavebarline.js';\nimport { StaveModifierPosition } from './stavemodifier.js';\nimport { Repetition } from './staverepetition.js';\nimport { StaveSection } from './stavesection.js';\nimport { StaveTempo } from './stavetempo.js';\nimport { StaveText } from './stavetext.js';\nimport { Volta } from './stavevolta.js';\nimport { Tables } from './tables.js';\nimport { TimeSignature } from './timesignature.js';\nimport { isBarline } from './typeguard.js';\nimport { RuntimeError } from './util.js';\nconst SORT_ORDER_BEG_MODIFIERS = {\n  [Barline.CATEGORY]: 0,\n  [Clef.CATEGORY]: 1,\n  [KeySignature.CATEGORY]: 2,\n  [TimeSignature.CATEGORY]: 3\n};\nconst SORT_ORDER_END_MODIFIERS = {\n  [TimeSignature.CATEGORY]: 0,\n  [KeySignature.CATEGORY]: 1,\n  [Barline.CATEGORY]: 2,\n  [Clef.CATEGORY]: 3\n};\nclass Stave extends Element {\n  static get CATEGORY() {\n    return \"Stave\";\n  }\n  static get defaultPadding() {\n    const musicFont = Tables.currentMusicFont();\n    return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n  }\n  static get rightPadding() {\n    const musicFont = Tables.currentMusicFont();\n    return musicFont.lookupMetric('stave.endPaddingMax');\n  }\n  constructor(x, y, width, options) {\n    super();\n    this.height = 0;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.formatted = false;\n    this.start_x = x + 5;\n    this.end_x = x + width;\n    this.modifiers = [];\n    this.measure = 0;\n    this.clef = 'treble';\n    this.endClef = undefined;\n    this.resetFont();\n    this.options = Object.assign({\n      vertical_bar_width: 10,\n      num_lines: 5,\n      fill_style: '#999999',\n      left_bar: true,\n      right_bar: true,\n      spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE,\n      space_above_staff_ln: 4,\n      space_below_staff_ln: 4,\n      top_text_position: 1,\n      bottom_text_position: 4,\n      line_config: []\n    }, options);\n    this.bounds = {\n      x: this.x,\n      y: this.y,\n      w: this.width,\n      h: 0\n    };\n    this.defaultLedgerLineStyle = {\n      strokeStyle: '#444',\n      lineWidth: 1.4\n    };\n    this.resetLines();\n    this.addModifier(new Barline(this.options.left_bar ? BarlineType.SINGLE : BarlineType.NONE));\n    this.addEndModifier(new Barline(this.options.right_bar ? BarlineType.SINGLE : BarlineType.NONE));\n  }\n  setDefaultLedgerLineStyle(style) {\n    this.defaultLedgerLineStyle = style;\n  }\n  getDefaultLedgerLineStyle() {\n    return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\n  }\n  space(spacing) {\n    return this.options.spacing_between_lines_px * spacing;\n  }\n  resetLines() {\n    this.options.line_config = [];\n    for (let i = 0; i < this.options.num_lines; i++) {\n      this.options.line_config.push({\n        visible: true\n      });\n    }\n    this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n    this.options.bottom_text_position = this.options.num_lines;\n  }\n  setNoteStartX(x) {\n    if (!this.formatted) this.format();\n    this.start_x = x;\n    return this;\n  }\n  getNoteStartX() {\n    if (!this.formatted) this.format();\n    return this.start_x;\n  }\n  getNoteEndX() {\n    if (!this.formatted) this.format();\n    return this.end_x;\n  }\n  getTieStartX() {\n    return this.start_x;\n  }\n  getTieEndX() {\n    return this.end_x;\n  }\n  getX() {\n    return this.x;\n  }\n  getNumLines() {\n    return this.options.num_lines;\n  }\n  setNumLines(n) {\n    this.options.num_lines = n;\n    this.resetLines();\n    return this;\n  }\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n  getY() {\n    return this.y;\n  }\n  getTopLineTopY() {\n    return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n  }\n  getBottomLineBottomY() {\n    return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n  }\n  setX(x) {\n    const shift = x - this.x;\n    this.formatted = false;\n    this.x = x;\n    this.start_x += shift;\n    this.end_x += shift;\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const mod = this.modifiers[i];\n      mod.setX(mod.getX() + shift);\n    }\n    return this;\n  }\n  setWidth(width) {\n    this.formatted = false;\n    this.width = width;\n    this.end_x = this.x + width;\n    return this;\n  }\n  getWidth() {\n    return this.width;\n  }\n  getStyle() {\n    return Object.assign({\n      fillStyle: this.options.fill_style,\n      strokeStyle: this.options.fill_style,\n      lineWidth: Tables.STAVE_LINE_THICKNESS\n    }, super.getStyle());\n  }\n  setMeasure(measure) {\n    this.measure = measure;\n    return this;\n  }\n  getMeasure() {\n    return this.measure;\n  }\n  getModifierXShift() {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (typeof index !== 'number') {\n      throw new RuntimeError('InvalidIndex', 'Must be of number type');\n    }\n    if (!this.formatted) this.format();\n    if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n      return 0;\n    }\n    if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n      return 0;\n    }\n    let start_x = this.start_x - this.x;\n    const begBarline = this.modifiers[0];\n    if (begBarline.getType() === BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n      start_x -= begBarline.getWidth();\n    }\n    return start_x;\n  }\n  setRepetitionType(type) {\n    let yShift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.modifiers.push(new Repetition(type, this.x, yShift));\n    return this;\n  }\n  setVoltaType(type, number_t, y) {\n    this.modifiers.push(new Volta(type, number_t, this.x, y));\n    return this;\n  }\n  setSection(section, y) {\n    let xOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let fontSize = arguments.length > 3 ? arguments[3] : undefined;\n    let drawRect = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    const staveSection = new StaveSection(section, this.x + xOffset, y, drawRect);\n    if (fontSize) staveSection.setFontSize(fontSize);\n    this.modifiers.push(staveSection);\n    return this;\n  }\n  setTempo(tempo, y) {\n    this.modifiers.push(new StaveTempo(tempo, this.x, y));\n    return this;\n  }\n  setText(text, position) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.modifiers.push(new StaveText(text, position, options));\n    return this;\n  }\n  getHeight() {\n    return this.height;\n  }\n  getSpacingBetweenLines() {\n    return this.options.spacing_between_lines_px;\n  }\n  getBoundingBox() {\n    return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n  }\n  getBottomY() {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n    return score_bottom;\n  }\n  getBottomLineY() {\n    return this.getYForLine(this.options.num_lines);\n  }\n  getYForLine(line) {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    const y = this.y + line * spacing + headroom * spacing;\n    return y;\n  }\n  getLineForY(y) {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return (y - this.y) / spacing - headroom;\n  }\n  getYForTopText() {\n    let line = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this.getYForLine(-line - this.options.top_text_position);\n  }\n  getYForBottomText() {\n    let line = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this.getYForLine(this.options.bottom_text_position + line);\n  }\n  getYForNote(line) {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return this.y + headroom * spacing + 5 * spacing - line * spacing;\n  }\n  getYForGlyphs() {\n    return this.getYForLine(3);\n  }\n  addModifier(modifier, position) {\n    if (position !== undefined) {\n      modifier.setPosition(position);\n    }\n    modifier.setStave(this);\n    this.formatted = false;\n    this.modifiers.push(modifier);\n    return this;\n  }\n  addEndModifier(modifier) {\n    this.addModifier(modifier, StaveModifierPosition.END);\n    return this;\n  }\n  setBegBarType(type) {\n    const {\n      SINGLE,\n      REPEAT_BEGIN,\n      NONE\n    } = BarlineType;\n    if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n      this.modifiers[0].setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n  setEndBarType(type) {\n    if (type !== BarlineType.REPEAT_BEGIN) {\n      this.modifiers[1].setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n  setClefLines(clefSpec) {\n    this.clef = clefSpec;\n    return this;\n  }\n  setClef(clefSpec, size, annotation, position) {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n    if (position === StaveModifierPosition.END) {\n      this.endClef = clefSpec;\n    } else {\n      this.clef = clefSpec;\n    }\n    const clefs = this.getModifiers(position, Clef.CATEGORY);\n    if (clefs.length === 0) {\n      this.addClef(clefSpec, size, annotation, position);\n    } else {\n      clefs[0].setType(clefSpec, size, annotation);\n    }\n    return this;\n  }\n  getClef() {\n    return this.clef;\n  }\n  setEndClef(clefSpec, size, annotation) {\n    this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n    return this;\n  }\n  getEndClef() {\n    return this.endClef;\n  }\n  setKeySignature(keySpec, cancelKeySpec, position) {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n    const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n    if (keySignatures.length === 0) {\n      this.addKeySignature(keySpec, cancelKeySpec, position);\n    } else {\n      keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n    }\n    return this;\n  }\n  setEndKeySignature(keySpec, cancelKeySpec) {\n    this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n    return this;\n  }\n  setTimeSignature(timeSpec, customPadding, position) {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n    const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n    if (timeSignatures.length === 0) {\n      this.addTimeSignature(timeSpec, customPadding, position);\n    } else {\n      timeSignatures[0].setTimeSig(timeSpec);\n    }\n    return this;\n  }\n  setEndTimeSignature(timeSpec, customPadding) {\n    this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n    return this;\n  }\n  addKeySignature(keySpec, cancelKeySpec, position) {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n    this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n    return this;\n  }\n  addClef(clef, size, annotation, position) {\n    if (position === undefined || position === StaveModifierPosition.BEGIN) {\n      this.clef = clef;\n    } else if (position === StaveModifierPosition.END) {\n      this.endClef = clef;\n    }\n    this.addModifier(new Clef(clef, size, annotation), position);\n    return this;\n  }\n  addEndClef(clef, size, annotation) {\n    this.addClef(clef, size, annotation, StaveModifierPosition.END);\n    return this;\n  }\n  addTimeSignature(timeSpec, customPadding, position) {\n    this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n    return this;\n  }\n  addEndTimeSignature(timeSpec, customPadding) {\n    this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n    return this;\n  }\n  addTrebleGlyph() {\n    this.addClef('treble');\n    return this;\n  }\n  getModifiers(position, category) {\n    const noPosition = position === undefined;\n    const noCategory = category === undefined;\n    if (noPosition && noCategory) {\n      return this.modifiers;\n    } else if (noPosition) {\n      return this.modifiers.filter(m => category === m.getCategory());\n    } else if (noCategory) {\n      return this.modifiers.filter(m => position === m.getPosition());\n    } else {\n      return this.modifiers.filter(m => position === m.getPosition() && category === m.getCategory());\n    }\n  }\n  sortByCategory(items, order) {\n    for (let i = items.length - 1; i >= 0; i--) {\n      for (let j = 0; j < i; j++) {\n        if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n          const temp = items[j];\n          items[j] = items[j + 1];\n          items[j + 1] = temp;\n        }\n      }\n    }\n  }\n  format() {\n    const begBarline = this.modifiers[0];\n    const endBarline = this.modifiers[1];\n    const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n    const endModifiers = this.getModifiers(StaveModifierPosition.END);\n    this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n    this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n    if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n      begModifiers.push(begModifiers.splice(0, 1)[0]);\n      begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n    }\n    if (endModifiers.indexOf(endBarline) > 0) {\n      endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n    }\n    let width;\n    let padding;\n    let modifier;\n    let offset = 0;\n    let x = this.x;\n    for (let i = 0; i < begModifiers.length; i++) {\n      modifier = begModifiers[i];\n      padding = modifier.getPadding(i + offset);\n      width = modifier.getWidth();\n      x += padding;\n      modifier.setX(x);\n      x += width;\n      if (padding + width === 0) offset--;\n    }\n    this.start_x = x;\n    x = this.x + this.width;\n    const widths = {\n      left: 0,\n      right: 0,\n      paddingRight: 0,\n      paddingLeft: 0\n    };\n    let lastBarlineIdx = 0;\n    for (let i = 0; i < endModifiers.length; i++) {\n      modifier = endModifiers[i];\n      lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n      widths.right = 0;\n      widths.left = 0;\n      widths.paddingRight = 0;\n      widths.paddingLeft = 0;\n      const layoutMetrics = modifier.getLayoutMetrics();\n      if (layoutMetrics) {\n        if (i !== 0) {\n          widths.right = layoutMetrics.xMax || 0;\n          widths.paddingRight = layoutMetrics.paddingRight || 0;\n        }\n        widths.left = -layoutMetrics.xMin || 0;\n        widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n        if (i === endModifiers.length - 1) {\n          widths.paddingLeft = 0;\n        }\n      } else {\n        widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n        if (i !== 0) {\n          widths.right = modifier.getWidth();\n        }\n        if (i === 0) {\n          widths.left = modifier.getWidth();\n        }\n      }\n      x -= widths.paddingRight;\n      x -= widths.right;\n      modifier.setX(x);\n      x -= widths.left;\n      x -= widths.paddingLeft;\n    }\n    this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n    this.formatted = true;\n  }\n  draw() {\n    const ctx = this.checkContext();\n    this.setRendered();\n    this.applyStyle();\n    ctx.openGroup('stave', this.getAttribute('id'));\n    if (!this.formatted) this.format();\n    const num_lines = this.options.num_lines;\n    const width = this.width;\n    const x = this.x;\n    let y;\n    for (let line = 0; line < num_lines; line++) {\n      y = this.getYForLine(line);\n      if (this.options.line_config[line].visible) {\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + width, y);\n        ctx.stroke();\n      }\n    }\n    ctx.closeGroup();\n    this.restoreStyle();\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      if (typeof modifier.draw === 'function') {\n        modifier.applyStyle(ctx);\n        modifier.draw(this, this.getModifierXShift(i));\n        modifier.restoreStyle(ctx);\n      }\n    }\n    if (this.measure > 0) {\n      ctx.save();\n      ctx.setFont(this.textFont);\n      const textWidth = ctx.measureText('' + this.measure).width;\n      y = this.getYForTopText(0) + 3;\n      ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\n      ctx.restore();\n    }\n    return this;\n  }\n  getVerticalBarWidth() {\n    return this.options.vertical_bar_width;\n  }\n  getConfigForLines() {\n    return this.options.line_config;\n  }\n  setConfigForLine(line_number, line_config) {\n    if (line_number >= this.options.num_lines || line_number < 0) {\n      throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n    }\n    if (line_config.visible === undefined) {\n      throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n    }\n    if (typeof line_config.visible !== 'boolean') {\n      throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n    }\n    this.options.line_config[line_number] = line_config;\n    return this;\n  }\n  setConfigForLines(lines_configuration) {\n    if (lines_configuration.length !== this.options.num_lines) {\n      throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n    }\n    for (const line_config in lines_configuration) {\n      if (lines_configuration[line_config].visible == undefined) {\n        lines_configuration[line_config] = this.options.line_config[line_config];\n      }\n      this.options.line_config[line_config] = Object.assign(Object.assign({}, this.options.line_config[line_config]), lines_configuration[line_config]);\n    }\n    this.options.line_config = lines_configuration;\n    return this;\n  }\n  static formatBegModifiers(staves) {\n    const adjustCategoryStartX = category => {\n      let minStartX = 0;\n      staves.forEach(stave => {\n        const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n        if (modifiers.length > 0 && modifiers[0].getX() > minStartX) minStartX = modifiers[0].getX();\n      });\n      let adjustX = 0;\n      staves.forEach(stave => {\n        adjustX = 0;\n        const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n        modifiers.forEach(modifier => {\n          if (minStartX - modifier.getX() > adjustX) adjustX = minStartX - modifier.getX();\n        });\n        const allModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n        let bAdjust = false;\n        allModifiers.forEach(modifier => {\n          if (modifier.getCategory() === category) bAdjust = true;\n          if (bAdjust && adjustX > 0) modifier.setX(modifier.getX() + adjustX);\n        });\n        stave.setNoteStartX(stave.getNoteStartX() + adjustX);\n      });\n    };\n    staves.forEach(stave => {\n      if (!stave.formatted) stave.format();\n    });\n    adjustCategoryStartX(\"Clef\");\n    adjustCategoryStartX(\"KeySignature\");\n    adjustCategoryStartX(\"TimeSignature\");\n    let maxX = 0;\n    staves.forEach(stave => {\n      if (stave.getNoteStartX() > maxX) maxX = stave.getNoteStartX();\n    });\n    staves.forEach(stave => {\n      stave.setNoteStartX(maxX);\n    });\n    maxX = 0;\n    staves.forEach(stave => {\n      const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, \"Barline\");\n      modifiers.forEach(modifier => {\n        if (modifier.getType() == BarlineType.REPEAT_BEGIN) if (modifier.getX() > maxX) maxX = modifier.getX();\n      });\n    });\n    staves.forEach(stave => {\n      const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, \"Barline\");\n      modifiers.forEach(modifier => {\n        if (modifier.getType() == BarlineType.REPEAT_BEGIN) modifier.setX(maxX);\n      });\n    });\n  }\n}\nStave.TEXT_FONT = {\n  family: Font.SANS_SERIF,\n  size: 8,\n  weight: FontWeight.NORMAL,\n  style: FontStyle.NORMAL\n};\nexport { Stave };","map":{"version":3,"names":["BoundingBox","Clef","Element","Font","FontStyle","FontWeight","KeySignature","Barline","BarlineType","StaveModifierPosition","Repetition","StaveSection","StaveTempo","StaveText","Volta","Tables","TimeSignature","isBarline","RuntimeError","SORT_ORDER_BEG_MODIFIERS","CATEGORY","SORT_ORDER_END_MODIFIERS","Stave","defaultPadding","musicFont","currentMusicFont","lookupMetric","rightPadding","constructor","x","y","width","options","height","formatted","start_x","end_x","modifiers","measure","clef","endClef","undefined","resetFont","Object","assign","vertical_bar_width","num_lines","fill_style","left_bar","right_bar","spacing_between_lines_px","STAVE_LINE_DISTANCE","space_above_staff_ln","space_below_staff_ln","top_text_position","bottom_text_position","line_config","bounds","w","h","defaultLedgerLineStyle","strokeStyle","lineWidth","resetLines","addModifier","SINGLE","NONE","addEndModifier","setDefaultLedgerLineStyle","style","getDefaultLedgerLineStyle","getStyle","space","spacing","i","push","visible","setNoteStartX","format","getNoteStartX","getNoteEndX","getTieStartX","getTieEndX","getX","getNumLines","setNumLines","n","setY","getY","getTopLineTopY","getYForLine","STAVE_LINE_THICKNESS","getBottomLineBottomY","setX","shift","length","mod","setWidth","getWidth","fillStyle","setMeasure","getMeasure","getModifierXShift","index","arguments","getModifiers","BEGIN","getPosition","RIGHT","begBarline","getType","REPEAT_BEGIN","setRepetitionType","type","yShift","setVoltaType","number_t","setSection","section","xOffset","fontSize","drawRect","staveSection","setFontSize","setTempo","tempo","setText","text","position","getHeight","getSpacingBetweenLines","getBoundingBox","getBottomY","score_bottom","getBottomLineY","line","headroom","getLineForY","getYForTopText","getYForBottomText","getYForNote","getYForGlyphs","modifier","setPosition","setStave","END","setBegBarType","setType","setEndBarType","setClefLines","clefSpec","setClef","size","annotation","clefs","addClef","getClef","setEndClef","getEndClef","setKeySignature","keySpec","cancelKeySpec","keySignatures","addKeySignature","setKeySig","setEndKeySignature","setTimeSignature","timeSpec","customPadding","timeSignatures","addTimeSignature","setTimeSig","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","category","noPosition","noCategory","filter","m","getCategory","sortByCategory","items","order","j","temp","endBarline","begModifiers","endModifiers","splice","indexOf","padding","offset","getPadding","widths","left","right","paddingRight","paddingLeft","lastBarlineIdx","layoutMetrics","getLayoutMetrics","xMax","xMin","draw","ctx","checkContext","setRendered","applyStyle","openGroup","getAttribute","beginPath","moveTo","lineTo","stroke","closeGroup","restoreStyle","save","setFont","textFont","textWidth","measureText","fillText","restore","getVerticalBarWidth","getConfigForLines","setConfigForLine","line_number","setConfigForLines","lines_configuration","formatBegModifiers","staves","adjustCategoryStartX","minStartX","forEach","stave","adjustX","allModifiers","bAdjust","maxX","TEXT_FONT","family","SANS_SERIF","weight","NORMAL"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/stave.js"],"sourcesContent":["import { BoundingBox } from './boundingbox.js';\nimport { Clef } from './clef.js';\nimport { Element } from './element.js';\nimport { Font, FontStyle, FontWeight } from './font.js';\nimport { KeySignature } from './keysignature.js';\nimport { Barline, BarlineType } from './stavebarline.js';\nimport { StaveModifierPosition } from './stavemodifier.js';\nimport { Repetition } from './staverepetition.js';\nimport { StaveSection } from './stavesection.js';\nimport { StaveTempo } from './stavetempo.js';\nimport { StaveText } from './stavetext.js';\nimport { Volta } from './stavevolta.js';\nimport { Tables } from './tables.js';\nimport { TimeSignature } from './timesignature.js';\nimport { isBarline } from './typeguard.js';\nimport { RuntimeError } from './util.js';\nconst SORT_ORDER_BEG_MODIFIERS = {\n    [Barline.CATEGORY]: 0,\n    [Clef.CATEGORY]: 1,\n    [KeySignature.CATEGORY]: 2,\n    [TimeSignature.CATEGORY]: 3,\n};\nconst SORT_ORDER_END_MODIFIERS = {\n    [TimeSignature.CATEGORY]: 0,\n    [KeySignature.CATEGORY]: 1,\n    [Barline.CATEGORY]: 2,\n    [Clef.CATEGORY]: 3,\n};\nclass Stave extends Element {\n    static get CATEGORY() {\n        return \"Stave\";\n    }\n    static get defaultPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n    }\n    static get rightPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('stave.endPaddingMax');\n    }\n    constructor(x, y, width, options) {\n        super();\n        this.height = 0;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.formatted = false;\n        this.start_x = x + 5;\n        this.end_x = x + width;\n        this.modifiers = [];\n        this.measure = 0;\n        this.clef = 'treble';\n        this.endClef = undefined;\n        this.resetFont();\n        this.options = Object.assign({ vertical_bar_width: 10, num_lines: 5, fill_style: '#999999', left_bar: true, right_bar: true, spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, space_above_staff_ln: 4, space_below_staff_ln: 4, top_text_position: 1, bottom_text_position: 4, line_config: [] }, options);\n        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n        this.resetLines();\n        this.addModifier(new Barline(this.options.left_bar ? BarlineType.SINGLE : BarlineType.NONE));\n        this.addEndModifier(new Barline(this.options.right_bar ? BarlineType.SINGLE : BarlineType.NONE));\n    }\n    setDefaultLedgerLineStyle(style) {\n        this.defaultLedgerLineStyle = style;\n    }\n    getDefaultLedgerLineStyle() {\n        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\n    }\n    space(spacing) {\n        return this.options.spacing_between_lines_px * spacing;\n    }\n    resetLines() {\n        this.options.line_config = [];\n        for (let i = 0; i < this.options.num_lines; i++) {\n            this.options.line_config.push({ visible: true });\n        }\n        this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n        this.options.bottom_text_position = this.options.num_lines;\n    }\n    setNoteStartX(x) {\n        if (!this.formatted)\n            this.format();\n        this.start_x = x;\n        return this;\n    }\n    getNoteStartX() {\n        if (!this.formatted)\n            this.format();\n        return this.start_x;\n    }\n    getNoteEndX() {\n        if (!this.formatted)\n            this.format();\n        return this.end_x;\n    }\n    getTieStartX() {\n        return this.start_x;\n    }\n    getTieEndX() {\n        return this.end_x;\n    }\n    getX() {\n        return this.x;\n    }\n    getNumLines() {\n        return this.options.num_lines;\n    }\n    setNumLines(n) {\n        this.options.num_lines = n;\n        this.resetLines();\n        return this;\n    }\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    getY() {\n        return this.y;\n    }\n    getTopLineTopY() {\n        return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    getBottomLineBottomY() {\n        return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    setX(x) {\n        const shift = x - this.x;\n        this.formatted = false;\n        this.x = x;\n        this.start_x += shift;\n        this.end_x += shift;\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const mod = this.modifiers[i];\n            mod.setX(mod.getX() + shift);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.formatted = false;\n        this.width = width;\n        this.end_x = this.x + width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    getStyle() {\n        return Object.assign({ fillStyle: this.options.fill_style, strokeStyle: this.options.fill_style, lineWidth: Tables.STAVE_LINE_THICKNESS }, super.getStyle());\n    }\n    setMeasure(measure) {\n        this.measure = measure;\n        return this;\n    }\n    getMeasure() {\n        return this.measure;\n    }\n    getModifierXShift(index = 0) {\n        if (typeof index !== 'number') {\n            throw new RuntimeError('InvalidIndex', 'Must be of number type');\n        }\n        if (!this.formatted)\n            this.format();\n        if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n            return 0;\n        }\n        if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n            return 0;\n        }\n        let start_x = this.start_x - this.x;\n        const begBarline = this.modifiers[0];\n        if (begBarline.getType() === BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n            start_x -= begBarline.getWidth();\n        }\n        return start_x;\n    }\n    setRepetitionType(type, yShift = 0) {\n        this.modifiers.push(new Repetition(type, this.x, yShift));\n        return this;\n    }\n    setVoltaType(type, number_t, y) {\n        this.modifiers.push(new Volta(type, number_t, this.x, y));\n        return this;\n    }\n    setSection(section, y, xOffset = 0, fontSize, drawRect = true) {\n        const staveSection = new StaveSection(section, this.x + xOffset, y, drawRect);\n        if (fontSize)\n            staveSection.setFontSize(fontSize);\n        this.modifiers.push(staveSection);\n        return this;\n    }\n    setTempo(tempo, y) {\n        this.modifiers.push(new StaveTempo(tempo, this.x, y));\n        return this;\n    }\n    setText(text, position, options = {}) {\n        this.modifiers.push(new StaveText(text, position, options));\n        return this;\n    }\n    getHeight() {\n        return this.height;\n    }\n    getSpacingBetweenLines() {\n        return this.options.spacing_between_lines_px;\n    }\n    getBoundingBox() {\n        return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n    }\n    getBottomY() {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n        return score_bottom;\n    }\n    getBottomLineY() {\n        return this.getYForLine(this.options.num_lines);\n    }\n    getYForLine(line) {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        const y = this.y + line * spacing + headroom * spacing;\n        return y;\n    }\n    getLineForY(y) {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        return (y - this.y) / spacing - headroom;\n    }\n    getYForTopText(line = 0) {\n        return this.getYForLine(-line - this.options.top_text_position);\n    }\n    getYForBottomText(line = 0) {\n        return this.getYForLine(this.options.bottom_text_position + line);\n    }\n    getYForNote(line) {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        return this.y + headroom * spacing + 5 * spacing - line * spacing;\n    }\n    getYForGlyphs() {\n        return this.getYForLine(3);\n    }\n    addModifier(modifier, position) {\n        if (position !== undefined) {\n            modifier.setPosition(position);\n        }\n        modifier.setStave(this);\n        this.formatted = false;\n        this.modifiers.push(modifier);\n        return this;\n    }\n    addEndModifier(modifier) {\n        this.addModifier(modifier, StaveModifierPosition.END);\n        return this;\n    }\n    setBegBarType(type) {\n        const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n            this.modifiers[0].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setEndBarType(type) {\n        if (type !== BarlineType.REPEAT_BEGIN) {\n            this.modifiers[1].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setClefLines(clefSpec) {\n        this.clef = clefSpec;\n        return this;\n    }\n    setClef(clefSpec, size, annotation, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        if (position === StaveModifierPosition.END) {\n            this.endClef = clefSpec;\n        }\n        else {\n            this.clef = clefSpec;\n        }\n        const clefs = this.getModifiers(position, Clef.CATEGORY);\n        if (clefs.length === 0) {\n            this.addClef(clefSpec, size, annotation, position);\n        }\n        else {\n            clefs[0].setType(clefSpec, size, annotation);\n        }\n        return this;\n    }\n    getClef() {\n        return this.clef;\n    }\n    setEndClef(clefSpec, size, annotation) {\n        this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    getEndClef() {\n        return this.endClef;\n    }\n    setKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n        if (keySignatures.length === 0) {\n            this.addKeySignature(keySpec, cancelKeySpec, position);\n        }\n        else {\n            keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n        }\n        return this;\n    }\n    setEndKeySignature(keySpec, cancelKeySpec) {\n        this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n        return this;\n    }\n    setTimeSignature(timeSpec, customPadding, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n        if (timeSignatures.length === 0) {\n            this.addTimeSignature(timeSpec, customPadding, position);\n        }\n        else {\n            timeSignatures[0].setTimeSig(timeSpec);\n        }\n        return this;\n    }\n    setEndTimeSignature(timeSpec, customPadding) {\n        this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    addKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n        return this;\n    }\n    addClef(clef, size, annotation, position) {\n        if (position === undefined || position === StaveModifierPosition.BEGIN) {\n            this.clef = clef;\n        }\n        else if (position === StaveModifierPosition.END) {\n            this.endClef = clef;\n        }\n        this.addModifier(new Clef(clef, size, annotation), position);\n        return this;\n    }\n    addEndClef(clef, size, annotation) {\n        this.addClef(clef, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    addTimeSignature(timeSpec, customPadding, position) {\n        this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n        return this;\n    }\n    addEndTimeSignature(timeSpec, customPadding) {\n        this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    addTrebleGlyph() {\n        this.addClef('treble');\n        return this;\n    }\n    getModifiers(position, category) {\n        const noPosition = position === undefined;\n        const noCategory = category === undefined;\n        if (noPosition && noCategory) {\n            return this.modifiers;\n        }\n        else if (noPosition) {\n            return this.modifiers.filter((m) => category === m.getCategory());\n        }\n        else if (noCategory) {\n            return this.modifiers.filter((m) => position === m.getPosition());\n        }\n        else {\n            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());\n        }\n    }\n    sortByCategory(items, order) {\n        for (let i = items.length - 1; i >= 0; i--) {\n            for (let j = 0; j < i; j++) {\n                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n                    const temp = items[j];\n                    items[j] = items[j + 1];\n                    items[j + 1] = temp;\n                }\n            }\n        }\n    }\n    format() {\n        const begBarline = this.modifiers[0];\n        const endBarline = this.modifiers[1];\n        const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n        const endModifiers = this.getModifiers(StaveModifierPosition.END);\n        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n        if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n            begModifiers.push(begModifiers.splice(0, 1)[0]);\n            begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n        }\n        if (endModifiers.indexOf(endBarline) > 0) {\n            endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n        }\n        let width;\n        let padding;\n        let modifier;\n        let offset = 0;\n        let x = this.x;\n        for (let i = 0; i < begModifiers.length; i++) {\n            modifier = begModifiers[i];\n            padding = modifier.getPadding(i + offset);\n            width = modifier.getWidth();\n            x += padding;\n            modifier.setX(x);\n            x += width;\n            if (padding + width === 0)\n                offset--;\n        }\n        this.start_x = x;\n        x = this.x + this.width;\n        const widths = {\n            left: 0,\n            right: 0,\n            paddingRight: 0,\n            paddingLeft: 0,\n        };\n        let lastBarlineIdx = 0;\n        for (let i = 0; i < endModifiers.length; i++) {\n            modifier = endModifiers[i];\n            lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n            widths.right = 0;\n            widths.left = 0;\n            widths.paddingRight = 0;\n            widths.paddingLeft = 0;\n            const layoutMetrics = modifier.getLayoutMetrics();\n            if (layoutMetrics) {\n                if (i !== 0) {\n                    widths.right = layoutMetrics.xMax || 0;\n                    widths.paddingRight = layoutMetrics.paddingRight || 0;\n                }\n                widths.left = -layoutMetrics.xMin || 0;\n                widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n                if (i === endModifiers.length - 1) {\n                    widths.paddingLeft = 0;\n                }\n            }\n            else {\n                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n                if (i !== 0) {\n                    widths.right = modifier.getWidth();\n                }\n                if (i === 0) {\n                    widths.left = modifier.getWidth();\n                }\n            }\n            x -= widths.paddingRight;\n            x -= widths.right;\n            modifier.setX(x);\n            x -= widths.left;\n            x -= widths.paddingLeft;\n        }\n        this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n        this.formatted = true;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.applyStyle();\n        ctx.openGroup('stave', this.getAttribute('id'));\n        if (!this.formatted)\n            this.format();\n        const num_lines = this.options.num_lines;\n        const width = this.width;\n        const x = this.x;\n        let y;\n        for (let line = 0; line < num_lines; line++) {\n            y = this.getYForLine(line);\n            if (this.options.line_config[line].visible) {\n                ctx.beginPath();\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + width, y);\n                ctx.stroke();\n            }\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            if (typeof modifier.draw === 'function') {\n                modifier.applyStyle(ctx);\n                modifier.draw(this, this.getModifierXShift(i));\n                modifier.restoreStyle(ctx);\n            }\n        }\n        if (this.measure > 0) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            const textWidth = ctx.measureText('' + this.measure).width;\n            y = this.getYForTopText(0) + 3;\n            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\n            ctx.restore();\n        }\n        return this;\n    }\n    getVerticalBarWidth() {\n        return this.options.vertical_bar_width;\n    }\n    getConfigForLines() {\n        return this.options.line_config;\n    }\n    setConfigForLine(line_number, line_config) {\n        if (line_number >= this.options.num_lines || line_number < 0) {\n            throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n        }\n        if (line_config.visible === undefined) {\n            throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n        }\n        if (typeof line_config.visible !== 'boolean') {\n            throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n        }\n        this.options.line_config[line_number] = line_config;\n        return this;\n    }\n    setConfigForLines(lines_configuration) {\n        if (lines_configuration.length !== this.options.num_lines) {\n            throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n        }\n        for (const line_config in lines_configuration) {\n            if (lines_configuration[line_config].visible == undefined) {\n                lines_configuration[line_config] = this.options.line_config[line_config];\n            }\n            this.options.line_config[line_config] = Object.assign(Object.assign({}, this.options.line_config[line_config]), lines_configuration[line_config]);\n        }\n        this.options.line_config = lines_configuration;\n        return this;\n    }\n    static formatBegModifiers(staves) {\n        const adjustCategoryStartX = (category) => {\n            let minStartX = 0;\n            staves.forEach((stave) => {\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                if (modifiers.length > 0 && modifiers[0].getX() > minStartX)\n                    minStartX = modifiers[0].getX();\n            });\n            let adjustX = 0;\n            staves.forEach((stave) => {\n                adjustX = 0;\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                modifiers.forEach((modifier) => {\n                    if (minStartX - modifier.getX() > adjustX)\n                        adjustX = minStartX - modifier.getX();\n                });\n                const allModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n                let bAdjust = false;\n                allModifiers.forEach((modifier) => {\n                    if (modifier.getCategory() === category)\n                        bAdjust = true;\n                    if (bAdjust && adjustX > 0)\n                        modifier.setX(modifier.getX() + adjustX);\n                });\n                stave.setNoteStartX(stave.getNoteStartX() + adjustX);\n            });\n        };\n        staves.forEach((stave) => {\n            if (!stave.formatted)\n                stave.format();\n        });\n        adjustCategoryStartX(\"Clef\");\n        adjustCategoryStartX(\"KeySignature\");\n        adjustCategoryStartX(\"TimeSignature\");\n        let maxX = 0;\n        staves.forEach((stave) => {\n            if (stave.getNoteStartX() > maxX)\n                maxX = stave.getNoteStartX();\n        });\n        staves.forEach((stave) => {\n            stave.setNoteStartX(maxX);\n        });\n        maxX = 0;\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, \"Barline\");\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() == BarlineType.REPEAT_BEGIN)\n                    if (modifier.getX() > maxX)\n                        maxX = modifier.getX();\n            });\n        });\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, \"Barline\");\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() == BarlineType.REPEAT_BEGIN)\n                    modifier.setX(maxX);\n            });\n        });\n    }\n}\nStave.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 8,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\nexport { Stave };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}