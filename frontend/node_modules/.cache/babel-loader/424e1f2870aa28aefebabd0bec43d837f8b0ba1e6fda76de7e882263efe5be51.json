{"ast":null,"code":"import { Articulation } from './articulation.js';\nimport { Dot } from './dot.js';\nimport { FretHandFinger } from './frethandfinger.js';\nimport { Music } from './music.js';\nimport { Parser } from './parser.js';\nimport { Stem } from './stem.js';\nimport { defined, log, RuntimeError } from './util.js';\nfunction L() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (EasyScore.DEBUG) log('Vex.Flow.EasyScore', args);\n}\nexport class EasyScoreGrammar {\n  constructor(builder) {\n    this.builder = builder;\n  }\n  begin() {\n    return this.LINE;\n  }\n  LINE() {\n    return {\n      expect: [this.PIECE, this.PIECES, this.EOL]\n    };\n  }\n  PIECE() {\n    return {\n      expect: [this.CHORDORNOTE, this.PARAMS],\n      run: () => this.builder.commitPiece()\n    };\n  }\n  PIECES() {\n    return {\n      expect: [this.COMMA, this.PIECE],\n      zeroOrMore: true\n    };\n  }\n  PARAMS() {\n    return {\n      expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS]\n    };\n  }\n  CHORDORNOTE() {\n    return {\n      expect: [this.CHORD, this.SINGLENOTE],\n      or: true\n    };\n  }\n  CHORD() {\n    return {\n      expect: [this.LPAREN, this.NOTES, this.RPAREN],\n      run: state => this.builder.addChord(state.matches[1])\n    };\n  }\n  NOTES() {\n    return {\n      expect: [this.NOTE],\n      oneOrMore: true\n    };\n  }\n  NOTE() {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE]\n    };\n  }\n  SINGLENOTE() {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n      run: state => {\n        const s = state;\n        this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\n      }\n    };\n  }\n  ACCIDENTAL() {\n    return {\n      expect: [this.MICROTONES, this.ACCIDENTALS],\n      maybe: true,\n      or: true\n    };\n  }\n  DOTS() {\n    return {\n      expect: [this.DOT],\n      zeroOrMore: true,\n      run: state => this.builder.setNoteDots(state.matches)\n    };\n  }\n  TYPE() {\n    return {\n      expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n      maybe: true,\n      run: state => this.builder.setNoteType(state.matches[2])\n    };\n  }\n  DURATION() {\n    return {\n      expect: [this.SLASH, this.DURATIONS],\n      maybe: true,\n      run: state => this.builder.setNoteDuration(state.matches[1])\n    };\n  }\n  OPTS() {\n    return {\n      expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n      maybe: true\n    };\n  }\n  KEYVALS() {\n    return {\n      expect: [this.COMMA, this.KEYVAL],\n      zeroOrMore: true\n    };\n  }\n  KEYVAL() {\n    const unquote = str => str.slice(1, -1);\n    return {\n      expect: [this.KEY, this.EQUALS, this.VAL],\n      run: state => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2]))\n    };\n  }\n  VAL() {\n    return {\n      expect: [this.SVAL, this.DVAL],\n      or: true\n    };\n  }\n  KEY() {\n    return {\n      token: '[a-zA-Z][a-zA-Z0-9]*'\n    };\n  }\n  DVAL() {\n    return {\n      token: '[\"][^\"]*[\"]'\n    };\n  }\n  SVAL() {\n    return {\n      token: \"['][^']*[']\"\n    };\n  }\n  NOTENAME() {\n    return {\n      token: '[a-gA-G]'\n    };\n  }\n  OCTAVE() {\n    return {\n      token: '[0-9]+'\n    };\n  }\n  ACCIDENTALS() {\n    return {\n      token: 'bb|b|##|#|n'\n    };\n  }\n  MICROTONES() {\n    return {\n      token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o'\n    };\n  }\n  DURATIONS() {\n    return {\n      token: '[0-9whq]+'\n    };\n  }\n  TYPES() {\n    return {\n      token: '[rRsSmMhHgG]'\n    };\n  }\n  LPAREN() {\n    return {\n      token: '[(]'\n    };\n  }\n  RPAREN() {\n    return {\n      token: '[)]'\n    };\n  }\n  COMMA() {\n    return {\n      token: '[,]'\n    };\n  }\n  DOT() {\n    return {\n      token: '[.]'\n    };\n  }\n  SLASH() {\n    return {\n      token: '[/]'\n    };\n  }\n  MAYBESLASH() {\n    return {\n      token: '[/]?'\n    };\n  }\n  EQUALS() {\n    return {\n      token: '[=]'\n    };\n  }\n  LBRACKET() {\n    return {\n      token: '\\\\['\n    };\n  }\n  RBRACKET() {\n    return {\n      token: '\\\\]'\n    };\n  }\n  EOL() {\n    return {\n      token: '$'\n    };\n  }\n}\nexport class Piece {\n  constructor(duration) {\n    this.chord = [];\n    this.dots = 0;\n    this.options = {};\n    this.duration = duration;\n  }\n}\nexport class Builder {\n  constructor(factory) {\n    this.commitHooks = [];\n    this.factory = factory;\n    this.reset();\n  }\n  reset(options) {\n    this.options = Object.assign({\n      stem: 'auto',\n      clef: 'treble'\n    }, options);\n    this.elements = {\n      notes: [],\n      accidentals: []\n    };\n    this.rollingDuration = '8';\n    this.resetPiece();\n  }\n  getFactory() {\n    return this.factory;\n  }\n  getElements() {\n    return this.elements;\n  }\n  addCommitHook(commitHook) {\n    this.commitHooks.push(commitHook);\n  }\n  resetPiece() {\n    L('resetPiece');\n    this.piece = new Piece(this.rollingDuration);\n  }\n  setNoteDots(dots) {\n    L('setNoteDots:', dots);\n    if (dots) this.piece.dots = dots.length;\n  }\n  setNoteDuration(duration) {\n    L('setNoteDuration:', duration);\n    this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n  }\n  setNoteType(type) {\n    L('setNoteType:', type);\n    if (type) this.piece.type = type;\n  }\n  addNoteOption(key, value) {\n    L('addNoteOption: key:', key, 'value:', value);\n    this.piece.options[key] = value;\n  }\n  addNote(key, accid, octave) {\n    L('addNote:', key, accid, octave);\n    this.piece.chord.push({\n      key: key,\n      accid,\n      octave\n    });\n  }\n  addSingleNote(key, accid, octave) {\n    L('addSingleNote:', key, accid, octave);\n    this.addNote(key, accid, octave);\n  }\n  addChord(notes) {\n    L('startChord');\n    if (typeof notes[0] !== 'object') {\n      this.addSingleNote(notes[0]);\n    } else {\n      notes.forEach(n => {\n        if (n) this.addNote(...n);\n      });\n    }\n    L('endChord');\n  }\n  commitPiece() {\n    L('commitPiece');\n    const {\n      factory\n    } = this;\n    if (!factory) return;\n    const options = Object.assign(Object.assign({}, this.options), this.piece.options);\n    const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n    const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n    const {\n      chord,\n      duration,\n      dots,\n      type\n    } = this.piece;\n    const standardAccidentals = Music.accidentals;\n    const keys = chord.map(notePiece => {\n      var _a;\n      return notePiece.key + (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') + '/' + notePiece.octave;\n    });\n    const auto_stem = stem === 'auto';\n    const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) == 'g' ? factory.GhostNote({\n      duration,\n      dots\n    }) : factory.StaveNote({\n      keys,\n      duration,\n      dots,\n      type,\n      clef,\n      auto_stem\n    });\n    if (!auto_stem) note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n    const accidentals = [];\n    chord.forEach((notePiece, index) => {\n      const accid = notePiece.accid;\n      if (typeof accid === 'string') {\n        const accidental = factory.Accidental({\n          type: accid\n        });\n        note.addModifier(accidental, index);\n        accidentals.push(accidental);\n      } else {\n        accidentals.push(undefined);\n      }\n    });\n    for (let i = 0; i < dots; i++) Dot.buildAndAttach([note], {\n      all: true\n    });\n    this.commitHooks.forEach(commitHook => commitHook(options, note, this));\n    this.elements.notes.push(note);\n    this.elements.accidentals.push(accidentals);\n    this.resetPiece();\n  }\n}\nfunction setId(options, note) {\n  if (options.id === undefined) return;\n  note.setAttribute('id', options.id);\n}\nconst commaSeparatedRegex = /\\s*,\\s*/;\nfunction setClass(options, note) {\n  if (options.class === undefined) return;\n  options.class.split(commaSeparatedRegex).forEach(className => note.addClass(className));\n}\nclass EasyScore {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.defaults = {\n      clef: 'treble',\n      time: '4/4',\n      stem: 'auto'\n    };\n    this.setOptions(options);\n  }\n  set(defaults) {\n    this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\n    return this;\n  }\n  setOptions(options) {\n    var _a, _b;\n    const factory = options.factory;\n    const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\n    this.options = Object.assign(Object.assign({\n      commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook],\n      throwOnError: false\n    }, options), {\n      factory,\n      builder\n    });\n    this.factory = factory;\n    this.builder = builder;\n    this.grammar = new EasyScoreGrammar(this.builder);\n    this.parser = new Parser(this.grammar);\n    (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach(commitHook => this.addCommitHook(commitHook));\n    return this;\n  }\n  setContext(context) {\n    this.factory.setContext(context);\n    return this;\n  }\n  parse(line) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.builder.reset(options);\n    const result = this.parser.parse(line);\n    if (!result.success && this.options.throwOnError) {\n      L(result);\n      throw new RuntimeError('Error parsing line: ' + line);\n    }\n    return result;\n  }\n  beam(notes, options) {\n    this.factory.Beam({\n      notes,\n      options\n    });\n    return notes;\n  }\n  tuplet(notes, options) {\n    this.factory.Tuplet({\n      notes,\n      options\n    });\n    return notes;\n  }\n  notes(line) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options = Object.assign({\n      clef: this.defaults.clef,\n      stem: this.defaults.stem\n    }, options);\n    this.parse(line, options);\n    return this.builder.getElements().notes;\n  }\n  voice(notes) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options = Object.assign({\n      time: this.defaults.time\n    }, options);\n    return this.factory.Voice(options).addTickables(notes);\n  }\n  addCommitHook(commitHook) {\n    this.builder.addCommitHook(commitHook);\n  }\n}\nEasyScore.DEBUG = false;\nexport { EasyScore };","map":{"version":3,"names":["Articulation","Dot","FretHandFinger","Music","Parser","Stem","defined","log","RuntimeError","L","_len","arguments","length","args","Array","_key","EasyScore","DEBUG","EasyScoreGrammar","constructor","builder","begin","LINE","expect","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","run","commitPiece","COMMA","zeroOrMore","DURATION","TYPE","DOTS","OPTS","CHORD","SINGLENOTE","or","LPAREN","NOTES","RPAREN","state","addChord","matches","NOTE","oneOrMore","NOTENAME","ACCIDENTAL","OCTAVE","s","addSingleNote","MICROTONES","ACCIDENTALS","maybe","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","unquote","str","slice","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","token","Piece","duration","chord","dots","options","Builder","factory","commitHooks","reset","Object","assign","stem","clef","elements","notes","accidentals","rollingDuration","resetPiece","getFactory","getElements","addCommitHook","commitHook","push","piece","type","key","value","addNote","accid","octave","forEach","n","toLowerCase","standardAccidentals","keys","map","notePiece","_a","includes","auto_stem","note","GhostNote","StaveNote","setStemDirection","UP","DOWN","index","accidental","Accidental","addModifier","undefined","i","buildAndAttach","all","setId","id","setAttribute","commaSeparatedRegex","setClass","class","split","className","addClass","defaults","time","setOptions","set","_b","easyScoreHook","throwOnError","grammar","parser","setContext","context","parse","line","result","success","beam","Beam","tuplet","Tuplet","voice","Voice","addTickables"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/easyscore.js"],"sourcesContent":["import { Articulation } from './articulation.js';\nimport { Dot } from './dot.js';\nimport { FretHandFinger } from './frethandfinger.js';\nimport { Music } from './music.js';\nimport { Parser } from './parser.js';\nimport { Stem } from './stem.js';\nimport { defined, log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (EasyScore.DEBUG)\n        log('Vex.Flow.EasyScore', args);\n}\nexport class EasyScoreGrammar {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    begin() {\n        return this.LINE;\n    }\n    LINE() {\n        return {\n            expect: [this.PIECE, this.PIECES, this.EOL],\n        };\n    }\n    PIECE() {\n        return {\n            expect: [this.CHORDORNOTE, this.PARAMS],\n            run: () => this.builder.commitPiece(),\n        };\n    }\n    PIECES() {\n        return {\n            expect: [this.COMMA, this.PIECE],\n            zeroOrMore: true,\n        };\n    }\n    PARAMS() {\n        return {\n            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n        };\n    }\n    CHORDORNOTE() {\n        return {\n            expect: [this.CHORD, this.SINGLENOTE],\n            or: true,\n        };\n    }\n    CHORD() {\n        return {\n            expect: [this.LPAREN, this.NOTES, this.RPAREN],\n            run: (state) => this.builder.addChord(state.matches[1]),\n        };\n    }\n    NOTES() {\n        return {\n            expect: [this.NOTE],\n            oneOrMore: true,\n        };\n    }\n    NOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n        };\n    }\n    SINGLENOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n            run: (state) => {\n                const s = state;\n                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\n            },\n        };\n    }\n    ACCIDENTAL() {\n        return {\n            expect: [this.MICROTONES, this.ACCIDENTALS],\n            maybe: true,\n            or: true,\n        };\n    }\n    DOTS() {\n        return {\n            expect: [this.DOT],\n            zeroOrMore: true,\n            run: (state) => this.builder.setNoteDots(state.matches),\n        };\n    }\n    TYPE() {\n        return {\n            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n            maybe: true,\n            run: (state) => this.builder.setNoteType(state.matches[2]),\n        };\n    }\n    DURATION() {\n        return {\n            expect: [this.SLASH, this.DURATIONS],\n            maybe: true,\n            run: (state) => this.builder.setNoteDuration(state.matches[1]),\n        };\n    }\n    OPTS() {\n        return {\n            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n            maybe: true,\n        };\n    }\n    KEYVALS() {\n        return {\n            expect: [this.COMMA, this.KEYVAL],\n            zeroOrMore: true,\n        };\n    }\n    KEYVAL() {\n        const unquote = (str) => str.slice(1, -1);\n        return {\n            expect: [this.KEY, this.EQUALS, this.VAL],\n            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\n        };\n    }\n    VAL() {\n        return {\n            expect: [this.SVAL, this.DVAL],\n            or: true,\n        };\n    }\n    KEY() {\n        return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n    }\n    DVAL() {\n        return { token: '[\"][^\"]*[\"]' };\n    }\n    SVAL() {\n        return { token: \"['][^']*[']\" };\n    }\n    NOTENAME() {\n        return { token: '[a-gA-G]' };\n    }\n    OCTAVE() {\n        return { token: '[0-9]+' };\n    }\n    ACCIDENTALS() {\n        return { token: 'bb|b|##|#|n' };\n    }\n    MICROTONES() {\n        return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n    }\n    DURATIONS() {\n        return { token: '[0-9whq]+' };\n    }\n    TYPES() {\n        return { token: '[rRsSmMhHgG]' };\n    }\n    LPAREN() {\n        return { token: '[(]' };\n    }\n    RPAREN() {\n        return { token: '[)]' };\n    }\n    COMMA() {\n        return { token: '[,]' };\n    }\n    DOT() {\n        return { token: '[.]' };\n    }\n    SLASH() {\n        return { token: '[/]' };\n    }\n    MAYBESLASH() {\n        return { token: '[/]?' };\n    }\n    EQUALS() {\n        return { token: '[=]' };\n    }\n    LBRACKET() {\n        return { token: '\\\\[' };\n    }\n    RBRACKET() {\n        return { token: '\\\\]' };\n    }\n    EOL() {\n        return { token: '$' };\n    }\n}\nexport class Piece {\n    constructor(duration) {\n        this.chord = [];\n        this.dots = 0;\n        this.options = {};\n        this.duration = duration;\n    }\n}\nexport class Builder {\n    constructor(factory) {\n        this.commitHooks = [];\n        this.factory = factory;\n        this.reset();\n    }\n    reset(options) {\n        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);\n        this.elements = { notes: [], accidentals: [] };\n        this.rollingDuration = '8';\n        this.resetPiece();\n    }\n    getFactory() {\n        return this.factory;\n    }\n    getElements() {\n        return this.elements;\n    }\n    addCommitHook(commitHook) {\n        this.commitHooks.push(commitHook);\n    }\n    resetPiece() {\n        L('resetPiece');\n        this.piece = new Piece(this.rollingDuration);\n    }\n    setNoteDots(dots) {\n        L('setNoteDots:', dots);\n        if (dots)\n            this.piece.dots = dots.length;\n    }\n    setNoteDuration(duration) {\n        L('setNoteDuration:', duration);\n        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n    }\n    setNoteType(type) {\n        L('setNoteType:', type);\n        if (type)\n            this.piece.type = type;\n    }\n    addNoteOption(key, value) {\n        L('addNoteOption: key:', key, 'value:', value);\n        this.piece.options[key] = value;\n    }\n    addNote(key, accid, octave) {\n        L('addNote:', key, accid, octave);\n        this.piece.chord.push({\n            key: key,\n            accid,\n            octave,\n        });\n    }\n    addSingleNote(key, accid, octave) {\n        L('addSingleNote:', key, accid, octave);\n        this.addNote(key, accid, octave);\n    }\n    addChord(notes) {\n        L('startChord');\n        if (typeof notes[0] !== 'object') {\n            this.addSingleNote(notes[0]);\n        }\n        else {\n            notes.forEach((n) => {\n                if (n)\n                    this.addNote(...n);\n            });\n        }\n        L('endChord');\n    }\n    commitPiece() {\n        L('commitPiece');\n        const { factory } = this;\n        if (!factory)\n            return;\n        const options = Object.assign(Object.assign({}, this.options), this.piece.options);\n        const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n        const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n        const { chord, duration, dots, type } = this.piece;\n        const standardAccidentals = Music.accidentals;\n        const keys = chord.map((notePiece) => {\n            var _a;\n            return notePiece.key +\n                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +\n                '/' +\n                notePiece.octave;\n        });\n        const auto_stem = stem === 'auto';\n        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) == 'g'\n            ? factory.GhostNote({ duration, dots })\n            : factory.StaveNote({ keys, duration, dots, type, clef, auto_stem });\n        if (!auto_stem)\n            note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n        const accidentals = [];\n        chord.forEach((notePiece, index) => {\n            const accid = notePiece.accid;\n            if (typeof accid === 'string') {\n                const accidental = factory.Accidental({ type: accid });\n                note.addModifier(accidental, index);\n                accidentals.push(accidental);\n            }\n            else {\n                accidentals.push(undefined);\n            }\n        });\n        for (let i = 0; i < dots; i++)\n            Dot.buildAndAttach([note], { all: true });\n        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n        this.elements.notes.push(note);\n        this.elements.accidentals.push(accidentals);\n        this.resetPiece();\n    }\n}\nfunction setId(options, note) {\n    if (options.id === undefined)\n        return;\n    note.setAttribute('id', options.id);\n}\nconst commaSeparatedRegex = /\\s*,\\s*/;\nfunction setClass(options, note) {\n    if (options.class === undefined)\n        return;\n    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));\n}\nclass EasyScore {\n    constructor(options = {}) {\n        this.defaults = {\n            clef: 'treble',\n            time: '4/4',\n            stem: 'auto',\n        };\n        this.setOptions(options);\n    }\n    set(defaults) {\n        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\n        return this;\n    }\n    setOptions(options) {\n        var _a, _b;\n        const factory = options.factory;\n        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\n        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,\n            builder });\n        this.factory = factory;\n        this.builder = builder;\n        this.grammar = new EasyScoreGrammar(this.builder);\n        this.parser = new Parser(this.grammar);\n        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));\n        return this;\n    }\n    setContext(context) {\n        this.factory.setContext(context);\n        return this;\n    }\n    parse(line, options = {}) {\n        this.builder.reset(options);\n        const result = this.parser.parse(line);\n        if (!result.success && this.options.throwOnError) {\n            L(result);\n            throw new RuntimeError('Error parsing line: ' + line);\n        }\n        return result;\n    }\n    beam(notes, options) {\n        this.factory.Beam({ notes, options });\n        return notes;\n    }\n    tuplet(notes, options) {\n        this.factory.Tuplet({ notes, options });\n        return notes;\n    }\n    notes(line, options = {}) {\n        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\n        this.parse(line, options);\n        return this.builder.getElements().notes;\n    }\n    voice(notes, options = {}) {\n        options = Object.assign({ time: this.defaults.time }, options);\n        return this.factory.Voice(options).addTickables(notes);\n    }\n    addCommitHook(commitHook) {\n        this.builder.addCommitHook(commitHook);\n    }\n}\nEasyScore.DEBUG = false;\nexport { EasyScore };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}