{"ast":null,"code":"import { Element } from './element.js';\nimport { Glyph } from './glyph.js';\nimport { NoteHead } from './notehead.js';\nimport { StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { TimeSignature } from './timesignature.js';\nimport { isBarline } from './typeguard.js';\nimport { defined } from './util.js';\nlet semibreve_rest;\nfunction get_semibreve_rest() {\n  if (!semibreve_rest) {\n    const noteHead = new NoteHead({\n      duration: 'w',\n      note_type: 'r'\n    });\n    semibreve_rest = {\n      glyph_font_scale: noteHead.render_options.glyph_font_scale,\n      glyph_code: noteHead.glyph_code,\n      width: noteHead.getWidth()\n    };\n  }\n  return semibreve_rest;\n}\nexport class MultiMeasureRest extends Element {\n  static get CATEGORY() {\n    return \"MultiMeasureRest\";\n  }\n  constructor(number_of_measures, options) {\n    var _a;\n    super();\n    this.xs = {\n      left: NaN,\n      right: NaN\n    };\n    this.hasPaddingLeft = false;\n    this.hasPaddingRight = false;\n    this.hasLineThickness = false;\n    this.hasSymbolSpacing = false;\n    this.number_of_measures = number_of_measures;\n    this.hasPaddingLeft = typeof options.padding_left === 'number';\n    this.hasPaddingRight = typeof options.padding_right === 'number';\n    this.hasLineThickness = typeof options.line_thickness === 'number';\n    this.hasSymbolSpacing = typeof options.symbol_spacing === 'number';\n    const musicFont = Tables.currentMusicFont();\n    this.render_options = Object.assign({\n      use_symbols: false,\n      show_number: true,\n      number_line: -0.5,\n      number_glyph_point: (_a = musicFont.lookupMetric('digits.point')) !== null && _a !== void 0 ? _a : Tables.NOTATION_FONT_SCALE,\n      line: 2,\n      spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE,\n      serif_thickness: 2,\n      semibreve_rest_glyph_scale: Tables.NOTATION_FONT_SCALE,\n      padding_left: 0,\n      padding_right: 0,\n      line_thickness: 5,\n      symbol_spacing: 0\n    }, options);\n    const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\n    this.render_options.number_line += fontLineShift;\n  }\n  getXs() {\n    return this.xs;\n  }\n  setStave(stave) {\n    this.stave = stave;\n    return this;\n  }\n  getStave() {\n    return this.stave;\n  }\n  checkStave() {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n  drawLine(stave, ctx, left, right, spacingBetweenLines) {\n    const options = this.render_options;\n    const y = stave.getYForLine(options.line);\n    const padding = (right - left) * 0.1;\n    left += padding;\n    right -= padding;\n    let lineThicknessHalf;\n    if (this.hasLineThickness) {\n      lineThicknessHalf = options.line_thickness * 0.5;\n    } else {\n      lineThicknessHalf = spacingBetweenLines * 0.25;\n    }\n    const serifThickness = options.serif_thickness;\n    const top = y - spacingBetweenLines;\n    const bot = y + spacingBetweenLines;\n    const leftIndented = left + serifThickness;\n    const rightIndented = right - serifThickness;\n    const lineTop = y - lineThicknessHalf;\n    const lineBottom = y + lineThicknessHalf;\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(left, top);\n    ctx.lineTo(leftIndented, top);\n    ctx.lineTo(leftIndented, lineTop);\n    ctx.lineTo(rightIndented, lineTop);\n    ctx.lineTo(rightIndented, top);\n    ctx.lineTo(right, top);\n    ctx.lineTo(right, bot);\n    ctx.lineTo(rightIndented, bot);\n    ctx.lineTo(rightIndented, lineBottom);\n    ctx.lineTo(leftIndented, lineBottom);\n    ctx.lineTo(leftIndented, bot);\n    ctx.lineTo(left, bot);\n    ctx.closePath();\n    ctx.fill();\n  }\n  drawSymbols(stave, ctx, left, right, spacingBetweenLines) {\n    const n4 = Math.floor(this.number_of_measures / 4);\n    const n = this.number_of_measures % 4;\n    const n2 = Math.floor(n / 2);\n    const n1 = n % 2;\n    const options = this.render_options;\n    semibreve_rest = undefined;\n    const rest = get_semibreve_rest();\n    const rest_scale = options.semibreve_rest_glyph_scale;\n    const rest_width = rest.width * (rest_scale / rest.glyph_font_scale);\n    const glyphs = {\n      2: {\n        width: rest_width * 0.5,\n        height: spacingBetweenLines\n      },\n      1: {\n        width: rest_width\n      }\n    };\n    const spacing = this.hasSymbolSpacing ? options.symbol_spacing : 10;\n    const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n    let x = left + (right - left) * 0.5 - width * 0.5;\n    const line = options.line;\n    const yTop = stave.getYForLine(line - 1);\n    const yMiddle = stave.getYForLine(line);\n    const yBottom = stave.getYForLine(line + 1);\n    ctx.save();\n    ctx.setStrokeStyle('none');\n    ctx.setLineWidth(0);\n    for (let i = 0; i < n4; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n2; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n1; ++i) {\n      Glyph.renderGlyph(ctx, x, yTop, rest_scale, rest.glyph_code);\n      x += glyphs[1].width + spacing;\n    }\n    ctx.restore();\n  }\n  draw() {\n    const ctx = this.checkContext();\n    this.setRendered();\n    const stave = this.checkStave();\n    let left = stave.getNoteStartX();\n    let right = stave.getNoteEndX();\n    const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n    if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n      left -= begModifiers[0].getWidth();\n    }\n    const options = this.render_options;\n    if (this.hasPaddingLeft) {\n      left = stave.getX() + options.padding_left;\n    }\n    if (this.hasPaddingRight) {\n      right = stave.getX() + stave.getWidth() - options.padding_right;\n    }\n    this.xs.left = left;\n    this.xs.right = right;\n    const spacingBetweenLines = options.spacing_between_lines_px;\n    if (options.use_symbols) {\n      this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);\n    } else {\n      this.drawLine(stave, ctx, left, right, spacingBetweenLines);\n    }\n    if (options.show_number) {\n      const timeSpec = '/' + this.number_of_measures;\n      const timeSig = new TimeSignature(timeSpec, 0, false);\n      timeSig.point = options.number_glyph_point;\n      timeSig.setTimeSig(timeSpec);\n      timeSig.setStave(stave);\n      timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);\n      timeSig.bottomLine = options.number_line;\n      timeSig.setContext(ctx).draw();\n    }\n  }\n}","map":{"version":3,"names":["Element","Glyph","NoteHead","StaveModifierPosition","Tables","TimeSignature","isBarline","defined","semibreve_rest","get_semibreve_rest","noteHead","duration","note_type","glyph_font_scale","render_options","glyph_code","width","getWidth","MultiMeasureRest","CATEGORY","constructor","number_of_measures","options","_a","xs","left","NaN","right","hasPaddingLeft","hasPaddingRight","hasLineThickness","hasSymbolSpacing","padding_left","padding_right","line_thickness","symbol_spacing","musicFont","currentMusicFont","Object","assign","use_symbols","show_number","number_line","number_glyph_point","lookupMetric","NOTATION_FONT_SCALE","line","spacing_between_lines_px","STAVE_LINE_DISTANCE","serif_thickness","semibreve_rest_glyph_scale","fontLineShift","getXs","setStave","stave","getStave","checkStave","drawLine","ctx","spacingBetweenLines","y","getYForLine","padding","lineThicknessHalf","serifThickness","top","bot","leftIndented","rightIndented","lineTop","lineBottom","save","beginPath","moveTo","lineTo","closePath","fill","drawSymbols","n4","Math","floor","n","n2","n1","undefined","rest","rest_scale","rest_width","glyphs","height","spacing","x","yTop","yMiddle","yBottom","setStrokeStyle","setLineWidth","i","fillRect","renderGlyph","restore","draw","checkContext","setRendered","getNoteStartX","getNoteEndX","begModifiers","getModifiers","BEGIN","length","getX","timeSpec","timeSig","point","setTimeSig","setX","getInfo","glyph","getMetrics","bottomLine","setContext"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/multimeasurerest.js"],"sourcesContent":["import { Element } from './element.js';\nimport { Glyph } from './glyph.js';\nimport { NoteHead } from './notehead.js';\nimport { StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { TimeSignature } from './timesignature.js';\nimport { isBarline } from './typeguard.js';\nimport { defined } from './util.js';\nlet semibreve_rest;\nfunction get_semibreve_rest() {\n    if (!semibreve_rest) {\n        const noteHead = new NoteHead({ duration: 'w', note_type: 'r' });\n        semibreve_rest = {\n            glyph_font_scale: noteHead.render_options.glyph_font_scale,\n            glyph_code: noteHead.glyph_code,\n            width: noteHead.getWidth(),\n        };\n    }\n    return semibreve_rest;\n}\nexport class MultiMeasureRest extends Element {\n    static get CATEGORY() {\n        return \"MultiMeasureRest\";\n    }\n    constructor(number_of_measures, options) {\n        var _a;\n        super();\n        this.xs = { left: NaN, right: NaN };\n        this.hasPaddingLeft = false;\n        this.hasPaddingRight = false;\n        this.hasLineThickness = false;\n        this.hasSymbolSpacing = false;\n        this.number_of_measures = number_of_measures;\n        this.hasPaddingLeft = typeof options.padding_left === 'number';\n        this.hasPaddingRight = typeof options.padding_right === 'number';\n        this.hasLineThickness = typeof options.line_thickness === 'number';\n        this.hasSymbolSpacing = typeof options.symbol_spacing === 'number';\n        const musicFont = Tables.currentMusicFont();\n        this.render_options = Object.assign({ use_symbols: false, show_number: true, number_line: -0.5, number_glyph_point: (_a = musicFont.lookupMetric('digits.point')) !== null && _a !== void 0 ? _a : Tables.NOTATION_FONT_SCALE, line: 2, spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, serif_thickness: 2, semibreve_rest_glyph_scale: Tables.NOTATION_FONT_SCALE, padding_left: 0, padding_right: 0, line_thickness: 5, symbol_spacing: 0 }, options);\n        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\n        this.render_options.number_line += fontLineShift;\n    }\n    getXs() {\n        return this.xs;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    drawLine(stave, ctx, left, right, spacingBetweenLines) {\n        const options = this.render_options;\n        const y = stave.getYForLine(options.line);\n        const padding = (right - left) * 0.1;\n        left += padding;\n        right -= padding;\n        let lineThicknessHalf;\n        if (this.hasLineThickness) {\n            lineThicknessHalf = options.line_thickness * 0.5;\n        }\n        else {\n            lineThicknessHalf = spacingBetweenLines * 0.25;\n        }\n        const serifThickness = options.serif_thickness;\n        const top = y - spacingBetweenLines;\n        const bot = y + spacingBetweenLines;\n        const leftIndented = left + serifThickness;\n        const rightIndented = right - serifThickness;\n        const lineTop = y - lineThicknessHalf;\n        const lineBottom = y + lineThicknessHalf;\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(left, top);\n        ctx.lineTo(leftIndented, top);\n        ctx.lineTo(leftIndented, lineTop);\n        ctx.lineTo(rightIndented, lineTop);\n        ctx.lineTo(rightIndented, top);\n        ctx.lineTo(right, top);\n        ctx.lineTo(right, bot);\n        ctx.lineTo(rightIndented, bot);\n        ctx.lineTo(rightIndented, lineBottom);\n        ctx.lineTo(leftIndented, lineBottom);\n        ctx.lineTo(leftIndented, bot);\n        ctx.lineTo(left, bot);\n        ctx.closePath();\n        ctx.fill();\n    }\n    drawSymbols(stave, ctx, left, right, spacingBetweenLines) {\n        const n4 = Math.floor(this.number_of_measures / 4);\n        const n = this.number_of_measures % 4;\n        const n2 = Math.floor(n / 2);\n        const n1 = n % 2;\n        const options = this.render_options;\n        semibreve_rest = undefined;\n        const rest = get_semibreve_rest();\n        const rest_scale = options.semibreve_rest_glyph_scale;\n        const rest_width = rest.width * (rest_scale / rest.glyph_font_scale);\n        const glyphs = {\n            2: {\n                width: rest_width * 0.5,\n                height: spacingBetweenLines,\n            },\n            1: {\n                width: rest_width,\n            },\n        };\n        const spacing = this.hasSymbolSpacing ? options.symbol_spacing : 10;\n        const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n        let x = left + (right - left) * 0.5 - width * 0.5;\n        const line = options.line;\n        const yTop = stave.getYForLine(line - 1);\n        const yMiddle = stave.getYForLine(line);\n        const yBottom = stave.getYForLine(line + 1);\n        ctx.save();\n        ctx.setStrokeStyle('none');\n        ctx.setLineWidth(0);\n        for (let i = 0; i < n4; ++i) {\n            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            x += glyphs[2].width + spacing;\n        }\n        for (let i = 0; i < n2; ++i) {\n            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            x += glyphs[2].width + spacing;\n        }\n        for (let i = 0; i < n1; ++i) {\n            Glyph.renderGlyph(ctx, x, yTop, rest_scale, rest.glyph_code);\n            x += glyphs[1].width + spacing;\n        }\n        ctx.restore();\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const stave = this.checkStave();\n        let left = stave.getNoteStartX();\n        let right = stave.getNoteEndX();\n        const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n        if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n            left -= begModifiers[0].getWidth();\n        }\n        const options = this.render_options;\n        if (this.hasPaddingLeft) {\n            left = stave.getX() + options.padding_left;\n        }\n        if (this.hasPaddingRight) {\n            right = stave.getX() + stave.getWidth() - options.padding_right;\n        }\n        this.xs.left = left;\n        this.xs.right = right;\n        const spacingBetweenLines = options.spacing_between_lines_px;\n        if (options.use_symbols) {\n            this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);\n        }\n        else {\n            this.drawLine(stave, ctx, left, right, spacingBetweenLines);\n        }\n        if (options.show_number) {\n            const timeSpec = '/' + this.number_of_measures;\n            const timeSig = new TimeSignature(timeSpec, 0, false);\n            timeSig.point = options.number_glyph_point;\n            timeSig.setTimeSig(timeSpec);\n            timeSig.setStave(stave);\n            timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);\n            timeSig.bottomLine = options.number_line;\n            timeSig.setContext(ctx).draw();\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}