{"ast":null,"code":"import { Clef } from './clef.js';\nimport { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nexport class ClefNote extends Note {\n  static get CATEGORY() {\n    return \"ClefNote\";\n  }\n  constructor(type, size, annotation) {\n    super({\n      duration: 'b'\n    });\n    this.type = type;\n    const clef = new Clef(type, size, annotation);\n    this.clef = clef.clef;\n    this.annotation = clef.annotation;\n    this.size = size === undefined ? 'default' : size;\n    this.setWidth(Glyph.getWidth(this.clef.code, Clef.getPoint(this.size), `clefNote_${this.size}`));\n    this.ignore_ticks = true;\n  }\n  setType(type, size, annotation) {\n    this.type = type;\n    this.size = size;\n    const clef = new Clef(type, size, annotation);\n    this.clef = clef.clef;\n    this.annotation = clef.annotation;\n    this.setWidth(Glyph.getWidth(this.clef.code, Clef.getPoint(this.size), `clefNote_${this.size}`));\n    return this;\n  }\n  getClef() {\n    return this.clef;\n  }\n  preFormat() {\n    this.preFormatted = true;\n    return this;\n  }\n  draw() {\n    const stave = this.checkStave();\n    const ctx = this.checkContext();\n    this.setRendered();\n    const abs_x = this.getAbsoluteX();\n    Glyph.renderGlyph(ctx, abs_x, stave.getYForLine(this.clef.line), Clef.getPoint(this.size), this.clef.code, {\n      category: `clefNote_${this.size}`\n    });\n    if (this.annotation !== undefined) {\n      const attachment = new Glyph(this.annotation.code, this.annotation.point);\n      attachment.setContext(ctx);\n      attachment.setStave(stave);\n      attachment.setYShift(stave.getYForLine(this.annotation.line) - stave.getYForGlyphs());\n      attachment.setXShift(this.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n}","map":{"version":3,"names":["Clef","Glyph","Note","ClefNote","CATEGORY","constructor","type","size","annotation","duration","clef","undefined","setWidth","getWidth","code","getPoint","ignore_ticks","setType","getClef","preFormat","preFormatted","draw","stave","checkStave","ctx","checkContext","setRendered","abs_x","getAbsoluteX","renderGlyph","getYForLine","line","category","attachment","point","setContext","setStave","setYShift","getYForGlyphs","setXShift","x_shift","renderToStave"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/clefnote.js"],"sourcesContent":["import { Clef } from './clef.js';\nimport { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nexport class ClefNote extends Note {\n    static get CATEGORY() {\n        return \"ClefNote\";\n    }\n    constructor(type, size, annotation) {\n        super({ duration: 'b' });\n        this.type = type;\n        const clef = new Clef(type, size, annotation);\n        this.clef = clef.clef;\n        this.annotation = clef.annotation;\n        this.size = size === undefined ? 'default' : size;\n        this.setWidth(Glyph.getWidth(this.clef.code, Clef.getPoint(this.size), `clefNote_${this.size}`));\n        this.ignore_ticks = true;\n    }\n    setType(type, size, annotation) {\n        this.type = type;\n        this.size = size;\n        const clef = new Clef(type, size, annotation);\n        this.clef = clef.clef;\n        this.annotation = clef.annotation;\n        this.setWidth(Glyph.getWidth(this.clef.code, Clef.getPoint(this.size), `clefNote_${this.size}`));\n        return this;\n    }\n    getClef() {\n        return this.clef;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        const abs_x = this.getAbsoluteX();\n        Glyph.renderGlyph(ctx, abs_x, stave.getYForLine(this.clef.line), Clef.getPoint(this.size), this.clef.code, {\n            category: `clefNote_${this.size}`,\n        });\n        if (this.annotation !== undefined) {\n            const attachment = new Glyph(this.annotation.code, this.annotation.point);\n            attachment.setContext(ctx);\n            attachment.setStave(stave);\n            attachment.setYShift(stave.getYForLine(this.annotation.line) - stave.getYForGlyphs());\n            attachment.setXShift(this.annotation.x_shift);\n            attachment.renderToStave(abs_x);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}