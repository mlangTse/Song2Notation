{"ast":null,"code":"import { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nexport var TextJustification;\n(function (TextJustification) {\n  TextJustification[TextJustification[\"LEFT\"] = 1] = \"LEFT\";\n  TextJustification[TextJustification[\"CENTER\"] = 2] = \"CENTER\";\n  TextJustification[TextJustification[\"RIGHT\"] = 3] = \"RIGHT\";\n})(TextJustification || (TextJustification = {}));\nclass TextNote extends Note {\n  static get CATEGORY() {\n    return \"TextNote\";\n  }\n  static get GLYPHS() {\n    return {\n      segno: {\n        code: 'segno'\n      },\n      tr: {\n        code: 'ornamentTrill'\n      },\n      mordent: {\n        code: 'ornamentMordent'\n      },\n      mordent_upper: {\n        code: 'ornamentShortTrill'\n      },\n      mordent_lower: {\n        code: 'ornamentMordent'\n      },\n      f: {\n        code: 'dynamicForte'\n      },\n      p: {\n        code: 'dynamicPiano'\n      },\n      m: {\n        code: 'dynamicMezzo'\n      },\n      s: {\n        code: 'dynamicSforzando'\n      },\n      z: {\n        code: 'dynamicZ'\n      },\n      coda: {\n        code: 'coda'\n      },\n      pedal_open: {\n        code: 'keyboardPedalPed'\n      },\n      pedal_close: {\n        code: 'keyboardPedalUp'\n      },\n      caesura_straight: {\n        code: 'caesura'\n      },\n      caesura_curved: {\n        code: 'caesuraCurved'\n      },\n      breath: {\n        code: 'breathMarkComma'\n      },\n      tick: {\n        code: 'breathMarkTick'\n      },\n      turn: {\n        code: 'ornamentTurn'\n      },\n      turn_inverted: {\n        code: 'ornamentTurnSlash'\n      }\n    };\n  }\n  constructor(noteStruct) {\n    super(noteStruct);\n    this.text = noteStruct.text || '';\n    this.superscript = noteStruct.superscript;\n    this.subscript = noteStruct.subscript;\n    this.setFont(noteStruct.font);\n    this.line = noteStruct.line || 0;\n    this.smooth = noteStruct.smooth || false;\n    this.ignore_ticks = noteStruct.ignore_ticks || false;\n    this.justification = TextJustification.LEFT;\n    if (noteStruct.glyph) {\n      const struct = TextNote.GLYPHS[noteStruct.glyph];\n      if (!struct) throw new RuntimeError('Invalid glyph type: ' + noteStruct.glyph);\n      this.glyph = new Glyph(struct.code, Tables.NOTATION_FONT_SCALE, {\n        category: 'textNote'\n      });\n      this.setWidth(this.glyph.getMetrics().width);\n    } else {\n      this.glyph = undefined;\n    }\n  }\n  setJustification(just) {\n    this.justification = just;\n    return this;\n  }\n  setLine(line) {\n    this.line = line;\n    return this;\n  }\n  getLine() {\n    return this.line;\n  }\n  getText() {\n    return this.text;\n  }\n  preFormat() {\n    if (this.preFormatted) return;\n    const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n    if (this.smooth) {\n      this.setWidth(0);\n    } else {\n      if (this.glyph) {} else {\n        const ctx = this.checkContext();\n        ctx.setFont(this.textFont);\n        this.setWidth(ctx.measureText(this.text).width);\n      }\n    }\n    if (this.justification === TextJustification.CENTER) {\n      this.leftDisplacedHeadPx = this.width / 2;\n    } else if (this.justification === TextJustification.RIGHT) {\n      this.leftDisplacedHeadPx = this.width;\n    }\n    this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n    this.preFormatted = true;\n  }\n  draw() {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n    this.setRendered();\n    let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n    const width = this.getWidth();\n    if (this.justification === TextJustification.CENTER) {\n      x -= width / 2;\n    } else if (this.justification === TextJustification.RIGHT) {\n      x -= width;\n    }\n    let y;\n    if (this.glyph) {\n      y = stave.getYForLine(this.line + -3);\n      this.glyph.render(ctx, x, y);\n    } else {\n      y = stave.getYForLine(this.line + -3);\n      this.applyStyle(ctx);\n      ctx.setFont(this.textFont);\n      ctx.fillText(this.text, x, y);\n      const height = ctx.measureText(this.text).height;\n      const {\n        family,\n        size,\n        weight,\n        style\n      } = this.textFont;\n      const smallerFontSize = Font.scaleSize(size, 0.769231);\n      if (this.superscript) {\n        ctx.setFont(family, smallerFontSize, weight, style);\n        ctx.fillText(this.superscript, x + this.width + 2, y - height / 2.2);\n      }\n      if (this.subscript) {\n        ctx.setFont(family, smallerFontSize, weight, style);\n        ctx.fillText(this.subscript, x + this.width + 2, y + height / 2.2 - 1);\n      }\n      this.restoreStyle(ctx);\n    }\n  }\n}\nTextNote.TEXT_FONT = {\n  family: Font.SANS_SERIF,\n  size: 12,\n  weight: FontWeight.NORMAL,\n  style: FontStyle.NORMAL\n};\nTextNote.Justification = TextJustification;\nexport { TextNote };","map":{"version":3,"names":["Font","FontStyle","FontWeight","Glyph","Note","Tables","RuntimeError","TextJustification","TextNote","CATEGORY","GLYPHS","segno","code","tr","mordent","mordent_upper","mordent_lower","f","p","m","s","z","coda","pedal_open","pedal_close","caesura_straight","caesura_curved","breath","tick","turn","turn_inverted","constructor","noteStruct","text","superscript","subscript","setFont","font","line","smooth","ignore_ticks","justification","LEFT","glyph","struct","NOTATION_FONT_SCALE","category","setWidth","getMetrics","width","undefined","setJustification","just","setLine","getLine","getText","preFormat","preFormatted","tickContext","checkTickContext","ctx","checkContext","textFont","measureText","CENTER","leftDisplacedHeadPx","RIGHT","rightDisplacedHeadPx","glyphPx","draw","stave","checkStave","setRendered","x","getAbsoluteX","getWidth","y","getYForLine","render","applyStyle","fillText","height","family","size","weight","style","smallerFontSize","scaleSize","restoreStyle","TEXT_FONT","SANS_SERIF","NORMAL","Justification"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/textnote.js"],"sourcesContent":["import { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nexport var TextJustification;\n(function (TextJustification) {\n    TextJustification[TextJustification[\"LEFT\"] = 1] = \"LEFT\";\n    TextJustification[TextJustification[\"CENTER\"] = 2] = \"CENTER\";\n    TextJustification[TextJustification[\"RIGHT\"] = 3] = \"RIGHT\";\n})(TextJustification || (TextJustification = {}));\nclass TextNote extends Note {\n    static get CATEGORY() {\n        return \"TextNote\";\n    }\n    static get GLYPHS() {\n        return {\n            segno: {\n                code: 'segno',\n            },\n            tr: {\n                code: 'ornamentTrill',\n            },\n            mordent: {\n                code: 'ornamentMordent',\n            },\n            mordent_upper: {\n                code: 'ornamentShortTrill',\n            },\n            mordent_lower: {\n                code: 'ornamentMordent',\n            },\n            f: {\n                code: 'dynamicForte',\n            },\n            p: {\n                code: 'dynamicPiano',\n            },\n            m: {\n                code: 'dynamicMezzo',\n            },\n            s: {\n                code: 'dynamicSforzando',\n            },\n            z: {\n                code: 'dynamicZ',\n            },\n            coda: {\n                code: 'coda',\n            },\n            pedal_open: {\n                code: 'keyboardPedalPed',\n            },\n            pedal_close: {\n                code: 'keyboardPedalUp',\n            },\n            caesura_straight: {\n                code: 'caesura',\n            },\n            caesura_curved: {\n                code: 'caesuraCurved',\n            },\n            breath: {\n                code: 'breathMarkComma',\n            },\n            tick: {\n                code: 'breathMarkTick',\n            },\n            turn: {\n                code: 'ornamentTurn',\n            },\n            turn_inverted: {\n                code: 'ornamentTurnSlash',\n            },\n        };\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.text = noteStruct.text || '';\n        this.superscript = noteStruct.superscript;\n        this.subscript = noteStruct.subscript;\n        this.setFont(noteStruct.font);\n        this.line = noteStruct.line || 0;\n        this.smooth = noteStruct.smooth || false;\n        this.ignore_ticks = noteStruct.ignore_ticks || false;\n        this.justification = TextJustification.LEFT;\n        if (noteStruct.glyph) {\n            const struct = TextNote.GLYPHS[noteStruct.glyph];\n            if (!struct)\n                throw new RuntimeError('Invalid glyph type: ' + noteStruct.glyph);\n            this.glyph = new Glyph(struct.code, Tables.NOTATION_FONT_SCALE, { category: 'textNote' });\n            this.setWidth(this.glyph.getMetrics().width);\n        }\n        else {\n            this.glyph = undefined;\n        }\n    }\n    setJustification(just) {\n        this.justification = just;\n        return this;\n    }\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    getLine() {\n        return this.line;\n    }\n    getText() {\n        return this.text;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n        if (this.smooth) {\n            this.setWidth(0);\n        }\n        else {\n            if (this.glyph) {\n            }\n            else {\n                const ctx = this.checkContext();\n                ctx.setFont(this.textFont);\n                this.setWidth(ctx.measureText(this.text).width);\n            }\n        }\n        if (this.justification === TextJustification.CENTER) {\n            this.leftDisplacedHeadPx = this.width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            this.leftDisplacedHeadPx = this.width;\n        }\n        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n        this.preFormatted = true;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n        this.setRendered();\n        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n        const width = this.getWidth();\n        if (this.justification === TextJustification.CENTER) {\n            x -= width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            x -= width;\n        }\n        let y;\n        if (this.glyph) {\n            y = stave.getYForLine(this.line + -3);\n            this.glyph.render(ctx, x, y);\n        }\n        else {\n            y = stave.getYForLine(this.line + -3);\n            this.applyStyle(ctx);\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.text, x, y);\n            const height = ctx.measureText(this.text).height;\n            const { family, size, weight, style } = this.textFont;\n            const smallerFontSize = Font.scaleSize(size, 0.769231);\n            if (this.superscript) {\n                ctx.setFont(family, smallerFontSize, weight, style);\n                ctx.fillText(this.superscript, x + this.width + 2, y - height / 2.2);\n            }\n            if (this.subscript) {\n                ctx.setFont(family, smallerFontSize, weight, style);\n                ctx.fillText(this.subscript, x + this.width + 2, y + height / 2.2 - 1);\n            }\n            this.restoreStyle(ctx);\n        }\n    }\n}\nTextNote.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 12,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\nTextNote.Justification = TextJustification;\nexport { TextNote };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}