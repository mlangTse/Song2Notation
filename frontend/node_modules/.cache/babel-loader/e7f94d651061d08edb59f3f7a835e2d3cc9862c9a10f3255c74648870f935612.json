{"ast":null,"code":"import { Element } from './element.js';\nimport { Tables } from './tables.js';\nimport { TextJustification } from './textnote.js';\nimport { RuntimeError } from './util.js';\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineTo(x0, y0);\n  ctx.closePath();\n  ctx.fill();\n}\nclass StaveLine extends Element {\n  static get CATEGORY() {\n    return \"StaveLine\";\n  }\n  constructor(notes) {\n    super();\n    this.setNotes(notes);\n    this.text = '';\n    this.resetFont();\n    this.render_options = {\n      padding_left: 4,\n      padding_right: 3,\n      line_width: 1,\n      line_dash: undefined,\n      rounded_end: true,\n      color: undefined,\n      draw_start_arrow: false,\n      draw_end_arrow: false,\n      arrowhead_length: 10,\n      arrowhead_angle: Math.PI / 8,\n      text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n      text_justification: StaveLine.TextJustification.CENTER\n    };\n  }\n  setText(text) {\n    this.text = text;\n    return this;\n  }\n  setNotes(notes) {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\n    }\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new RuntimeError('BadArguments', 'Connected notes must have same number of indices.');\n    }\n    this.notes = notes;\n    this.first_note = notes.first_note;\n    this.first_indices = notes.first_indices;\n    this.last_note = notes.last_note;\n    this.last_indices = notes.last_indices;\n    return this;\n  }\n  applyLineStyle() {\n    const ctx = this.checkContext();\n    const render_options = this.render_options;\n    if (render_options.line_dash) {\n      ctx.setLineDash(render_options.line_dash);\n    }\n    if (render_options.line_width) {\n      ctx.setLineWidth(render_options.line_width);\n    }\n    if (render_options.rounded_end) {\n      ctx.setLineCap('round');\n    } else {\n      ctx.setLineCap('square');\n    }\n  }\n  applyFontStyle() {\n    const ctx = this.checkContext();\n    ctx.setFont(this.textFont);\n    const render_options = this.render_options;\n    const color = render_options.color;\n    if (color) {\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n    }\n  }\n  drawArrowLine(ctx, pt1, pt2) {\n    const both_arrows = this.render_options.draw_start_arrow && this.render_options.draw_end_arrow;\n    const x1 = pt1.x;\n    const y1 = pt1.y;\n    const x2 = pt2.x;\n    const y2 = pt2.y;\n    const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    const ratio = (distance - this.render_options.arrowhead_length / 3) / distance;\n    let end_x;\n    let end_y;\n    let start_x;\n    let start_y;\n    if (this.render_options.draw_end_arrow || both_arrows) {\n      end_x = Math.round(x1 + (x2 - x1) * ratio);\n      end_y = Math.round(y1 + (y2 - y1) * ratio);\n    } else {\n      end_x = x2;\n      end_y = y2;\n    }\n    if (this.render_options.draw_start_arrow || both_arrows) {\n      start_x = x1 + (x2 - x1) * (1 - ratio);\n      start_y = y1 + (y2 - y1) * (1 - ratio);\n    } else {\n      start_x = x1;\n      start_y = y1;\n    }\n    if (this.render_options.color) {\n      ctx.setStrokeStyle(this.render_options.color);\n      ctx.setFillStyle(this.render_options.color);\n    }\n    ctx.beginPath();\n    ctx.moveTo(start_x, start_y);\n    ctx.lineTo(end_x, end_y);\n    ctx.stroke();\n    ctx.closePath();\n    const line_angle = Math.atan2(y2 - y1, x2 - x1);\n    const h = Math.abs(this.render_options.arrowhead_length / Math.cos(this.render_options.arrowhead_angle));\n    let angle1;\n    let angle2;\n    let top_x;\n    let top_y;\n    let bottom_x;\n    let bottom_y;\n    if (this.render_options.draw_end_arrow || both_arrows) {\n      angle1 = line_angle + Math.PI + this.render_options.arrowhead_angle;\n      top_x = x2 + Math.cos(angle1) * h;\n      top_y = y2 + Math.sin(angle1) * h;\n      angle2 = line_angle + Math.PI - this.render_options.arrowhead_angle;\n      bottom_x = x2 + Math.cos(angle2) * h;\n      bottom_y = y2 + Math.sin(angle2) * h;\n      drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n    }\n    if (this.render_options.draw_start_arrow || both_arrows) {\n      angle1 = line_angle + this.render_options.arrowhead_angle;\n      top_x = x1 + Math.cos(angle1) * h;\n      top_y = y1 + Math.sin(angle1) * h;\n      angle2 = line_angle - this.render_options.arrowhead_angle;\n      bottom_x = x1 + Math.cos(angle2) * h;\n      bottom_y = y1 + Math.sin(angle2) * h;\n      drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n    }\n  }\n  draw() {\n    const ctx = this.checkContext();\n    this.setRendered();\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    const render_options = this.render_options;\n    ctx.save();\n    this.applyLineStyle();\n    let start_position = {\n      x: 0,\n      y: 0\n    };\n    let end_position = {\n      x: 0,\n      y: 0\n    };\n    this.first_indices.forEach((first_index, i) => {\n      const last_index = this.last_indices[i];\n      start_position = first_note.getModifierStartXY(2, first_index);\n      end_position = last_note.getModifierStartXY(1, last_index);\n      const upwards_slope = start_position.y > end_position.y;\n      start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n      end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n      const notehead_width = first_note.getGlyphProps().getWidth();\n      const first_displaced = first_note.getKeyProps()[first_index].displaced;\n      if (first_displaced && first_note.getStemDirection() === 1) {\n        start_position.x += notehead_width + render_options.padding_left;\n      }\n      const last_displaced = last_note.getKeyProps()[last_index].displaced;\n      if (last_displaced && last_note.getStemDirection() === -1) {\n        end_position.x -= notehead_width + render_options.padding_right;\n      }\n      start_position.y += upwards_slope ? -3 : 1;\n      end_position.y += upwards_slope ? 2 : 0;\n      this.drawArrowLine(ctx, start_position, end_position);\n    });\n    ctx.restore();\n    const text_width = ctx.measureText(this.text).width;\n    const justification = render_options.text_justification;\n    let x = 0;\n    if (justification === StaveLine.TextJustification.LEFT) {\n      x = start_position.x;\n    } else if (justification === StaveLine.TextJustification.CENTER) {\n      const delta_x = end_position.x - start_position.x;\n      const center_x = delta_x / 2 + start_position.x;\n      x = center_x - text_width / 2;\n    } else if (justification === StaveLine.TextJustification.RIGHT) {\n      x = end_position.x - text_width;\n    }\n    let y = 0;\n    const vertical_position = render_options.text_position_vertical;\n    if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n      y = first_note.checkStave().getYForTopText();\n    } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n      y = first_note.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n    }\n    ctx.save();\n    this.applyFontStyle();\n    ctx.fillText(this.text, x, y);\n    ctx.restore();\n    return this;\n  }\n}\nStaveLine.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\nStaveLine.TextVerticalPosition = {\n  TOP: 1,\n  BOTTOM: 2\n};\nStaveLine.TextJustification = TextJustification;\nexport { StaveLine };","map":{"version":3,"names":["Element","Tables","TextJustification","RuntimeError","drawArrowHead","ctx","x0","y0","x1","y1","x2","y2","beginPath","moveTo","lineTo","closePath","fill","StaveLine","CATEGORY","constructor","notes","setNotes","text","resetFont","render_options","padding_left","padding_right","line_width","line_dash","undefined","rounded_end","color","draw_start_arrow","draw_end_arrow","arrowhead_length","arrowhead_angle","Math","PI","text_position_vertical","TextVerticalPosition","TOP","text_justification","CENTER","setText","first_note","last_note","first_indices","last_indices","length","applyLineStyle","checkContext","setLineDash","setLineWidth","setLineCap","applyFontStyle","setFont","textFont","setStrokeStyle","setFillStyle","drawArrowLine","pt1","pt2","both_arrows","x","y","distance","sqrt","ratio","end_x","end_y","start_x","start_y","round","stroke","line_angle","atan2","h","abs","cos","angle1","angle2","top_x","top_y","bottom_x","bottom_y","sin","draw","setRendered","save","start_position","end_position","forEach","first_index","i","last_index","getModifierStartXY","upwards_slope","getMetrics","modRightPx","modLeftPx","notehead_width","getGlyphProps","getWidth","first_displaced","getKeyProps","displaced","getStemDirection","last_displaced","restore","text_width","measureText","width","justification","LEFT","delta_x","center_x","RIGHT","vertical_position","checkStave","getYForTopText","BOTTOM","getYForBottomText","TEXT_HEIGHT_OFFSET_HACK","fillText","TEXT_FONT","Object","assign"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/staveline.js"],"sourcesContent":["import { Element } from './element.js';\nimport { Tables } from './tables.js';\nimport { TextJustification } from './textnote.js';\nimport { RuntimeError } from './util.js';\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x0, y0);\n    ctx.closePath();\n    ctx.fill();\n}\nclass StaveLine extends Element {\n    static get CATEGORY() {\n        return \"StaveLine\";\n    }\n    constructor(notes) {\n        super();\n        this.setNotes(notes);\n        this.text = '';\n        this.resetFont();\n        this.render_options = {\n            padding_left: 4,\n            padding_right: 3,\n            line_width: 1,\n            line_dash: undefined,\n            rounded_end: true,\n            color: undefined,\n            draw_start_arrow: false,\n            draw_end_arrow: false,\n            arrowhead_length: 10,\n            arrowhead_angle: Math.PI / 8,\n            text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n            text_justification: StaveLine.TextJustification.CENTER,\n        };\n    }\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    setNotes(notes) {\n        if (!notes.first_note && !notes.last_note) {\n            throw new RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\n        }\n        if (!notes.first_indices)\n            notes.first_indices = [0];\n        if (!notes.last_indices)\n            notes.last_indices = [0];\n        if (notes.first_indices.length !== notes.last_indices.length) {\n            throw new RuntimeError('BadArguments', 'Connected notes must have same number of indices.');\n        }\n        this.notes = notes;\n        this.first_note = notes.first_note;\n        this.first_indices = notes.first_indices;\n        this.last_note = notes.last_note;\n        this.last_indices = notes.last_indices;\n        return this;\n    }\n    applyLineStyle() {\n        const ctx = this.checkContext();\n        const render_options = this.render_options;\n        if (render_options.line_dash) {\n            ctx.setLineDash(render_options.line_dash);\n        }\n        if (render_options.line_width) {\n            ctx.setLineWidth(render_options.line_width);\n        }\n        if (render_options.rounded_end) {\n            ctx.setLineCap('round');\n        }\n        else {\n            ctx.setLineCap('square');\n        }\n    }\n    applyFontStyle() {\n        const ctx = this.checkContext();\n        ctx.setFont(this.textFont);\n        const render_options = this.render_options;\n        const color = render_options.color;\n        if (color) {\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n        }\n    }\n    drawArrowLine(ctx, pt1, pt2) {\n        const both_arrows = this.render_options.draw_start_arrow && this.render_options.draw_end_arrow;\n        const x1 = pt1.x;\n        const y1 = pt1.y;\n        const x2 = pt2.x;\n        const y2 = pt2.y;\n        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        const ratio = (distance - this.render_options.arrowhead_length / 3) / distance;\n        let end_x;\n        let end_y;\n        let start_x;\n        let start_y;\n        if (this.render_options.draw_end_arrow || both_arrows) {\n            end_x = Math.round(x1 + (x2 - x1) * ratio);\n            end_y = Math.round(y1 + (y2 - y1) * ratio);\n        }\n        else {\n            end_x = x2;\n            end_y = y2;\n        }\n        if (this.render_options.draw_start_arrow || both_arrows) {\n            start_x = x1 + (x2 - x1) * (1 - ratio);\n            start_y = y1 + (y2 - y1) * (1 - ratio);\n        }\n        else {\n            start_x = x1;\n            start_y = y1;\n        }\n        if (this.render_options.color) {\n            ctx.setStrokeStyle(this.render_options.color);\n            ctx.setFillStyle(this.render_options.color);\n        }\n        ctx.beginPath();\n        ctx.moveTo(start_x, start_y);\n        ctx.lineTo(end_x, end_y);\n        ctx.stroke();\n        ctx.closePath();\n        const line_angle = Math.atan2(y2 - y1, x2 - x1);\n        const h = Math.abs(this.render_options.arrowhead_length / Math.cos(this.render_options.arrowhead_angle));\n        let angle1;\n        let angle2;\n        let top_x;\n        let top_y;\n        let bottom_x;\n        let bottom_y;\n        if (this.render_options.draw_end_arrow || both_arrows) {\n            angle1 = line_angle + Math.PI + this.render_options.arrowhead_angle;\n            top_x = x2 + Math.cos(angle1) * h;\n            top_y = y2 + Math.sin(angle1) * h;\n            angle2 = line_angle + Math.PI - this.render_options.arrowhead_angle;\n            bottom_x = x2 + Math.cos(angle2) * h;\n            bottom_y = y2 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n        }\n        if (this.render_options.draw_start_arrow || both_arrows) {\n            angle1 = line_angle + this.render_options.arrowhead_angle;\n            top_x = x1 + Math.cos(angle1) * h;\n            top_y = y1 + Math.sin(angle1) * h;\n            angle2 = line_angle - this.render_options.arrowhead_angle;\n            bottom_x = x1 + Math.cos(angle2) * h;\n            bottom_y = y1 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n        }\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const first_note = this.first_note;\n        const last_note = this.last_note;\n        const render_options = this.render_options;\n        ctx.save();\n        this.applyLineStyle();\n        let start_position = { x: 0, y: 0 };\n        let end_position = { x: 0, y: 0 };\n        this.first_indices.forEach((first_index, i) => {\n            const last_index = this.last_indices[i];\n            start_position = first_note.getModifierStartXY(2, first_index);\n            end_position = last_note.getModifierStartXY(1, last_index);\n            const upwards_slope = start_position.y > end_position.y;\n            start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n            end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n            const notehead_width = first_note.getGlyphProps().getWidth();\n            const first_displaced = first_note.getKeyProps()[first_index].displaced;\n            if (first_displaced && first_note.getStemDirection() === 1) {\n                start_position.x += notehead_width + render_options.padding_left;\n            }\n            const last_displaced = last_note.getKeyProps()[last_index].displaced;\n            if (last_displaced && last_note.getStemDirection() === -1) {\n                end_position.x -= notehead_width + render_options.padding_right;\n            }\n            start_position.y += upwards_slope ? -3 : 1;\n            end_position.y += upwards_slope ? 2 : 0;\n            this.drawArrowLine(ctx, start_position, end_position);\n        });\n        ctx.restore();\n        const text_width = ctx.measureText(this.text).width;\n        const justification = render_options.text_justification;\n        let x = 0;\n        if (justification === StaveLine.TextJustification.LEFT) {\n            x = start_position.x;\n        }\n        else if (justification === StaveLine.TextJustification.CENTER) {\n            const delta_x = end_position.x - start_position.x;\n            const center_x = delta_x / 2 + start_position.x;\n            x = center_x - text_width / 2;\n        }\n        else if (justification === StaveLine.TextJustification.RIGHT) {\n            x = end_position.x - text_width;\n        }\n        let y = 0;\n        const vertical_position = render_options.text_position_vertical;\n        if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n            y = first_note.checkStave().getYForTopText();\n        }\n        else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n            y = first_note.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n        }\n        ctx.save();\n        this.applyFontStyle();\n        ctx.fillText(this.text, x, y);\n        ctx.restore();\n        return this;\n    }\n}\nStaveLine.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\nStaveLine.TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n};\nStaveLine.TextJustification = TextJustification;\nexport { StaveLine };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}