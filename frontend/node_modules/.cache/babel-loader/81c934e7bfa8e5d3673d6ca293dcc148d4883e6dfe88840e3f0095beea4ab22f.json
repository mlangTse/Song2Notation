{"ast":null,"code":"import { Beam } from './beam.js';\nimport { Font } from './font.js';\nimport { Fraction } from './fraction.js';\nimport { ModifierContext } from './modifiercontext.js';\nimport { Stave } from './stave.js';\nimport { StaveConnector } from './staveconnector.js';\nimport { Tables } from './tables.js';\nimport { TickContext } from './tickcontext.js';\nimport { isNote, isStaveNote } from './typeguard.js';\nimport { defined, log, midLine, RuntimeError, sumArray } from './util.js';\nimport { Voice } from './voice.js';\nfunction createContexts(voices, makeContext, addToContext) {\n  if (voices.length == 0) return {\n    map: {},\n    array: [],\n    list: [],\n    resolutionMultiplier: 0\n  };\n  const tickToContextMap = {};\n  const tickList = [];\n  const contexts = [];\n  const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n  voices.forEach((voice, voiceIndex) => {\n    const ticksUsed = new Fraction(0, resolutionMultiplier);\n    voice.getTickables().forEach(tickable => {\n      const integerTicks = ticksUsed.numerator;\n      if (!tickToContextMap[integerTicks]) {\n        const newContext = makeContext({\n          tickID: integerTicks\n        });\n        contexts.push(newContext);\n        tickToContextMap[integerTicks] = newContext;\n        tickList.push(integerTicks);\n      }\n      addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n      ticksUsed.add(tickable.getTicks());\n    });\n  });\n  return {\n    map: tickToContextMap,\n    array: contexts,\n    list: tickList.sort((a, b) => a - b),\n    resolutionMultiplier\n  };\n}\nfunction L() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (Formatter.DEBUG) log('Vex.Flow.Formatter', args);\n}\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\n  let nextRestLine = currRestLine;\n  for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n    const note = notes[noteIndex];\n    if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n      nextRestLine = note.getLineForRest();\n      break;\n    }\n  }\n  if (compare && currRestLine !== nextRestLine) {\n    const top = Math.max(currRestLine, nextRestLine);\n    const bot = Math.min(currRestLine, nextRestLine);\n    nextRestLine = midLine(top, bot);\n  }\n  return nextRestLine;\n}\nclass Formatter {\n  static SimpleFormat(notes) {\n    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let {\n      paddingBetween = 10\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    notes.reduce((accumulator, note) => {\n      note.addToModifierContext(new ModifierContext());\n      const tick = new TickContext().addTickable(note).preFormat();\n      const metrics = tick.getMetrics();\n      tick.setX(accumulator + metrics.totalLeftPx);\n      return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n    }, x);\n  }\n  static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\n    options = Object.assign({\n      stavePadding: Tables.currentMusicFont().lookupMetric('stave.padding')\n    }, options);\n    const x = xPos + options.stavePadding;\n    const contextGaps = formatter.contextGaps;\n    function stroke(x1, x2, color) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(1);\n      ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n    }\n    ctx.save();\n    ctx.setFont(Font.SANS_SERIF, 8);\n    contextGaps.gaps.forEach(gap => {\n      stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n      ctx.setFillStyle('green');\n      ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n    });\n    ctx.setFillStyle('red');\n    ctx.fillText(`Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\n    ctx.restore();\n  }\n  static FormatAndDraw(ctx, stave, notes, params) {\n    let options = {\n      auto_beam: false,\n      align_rests: false\n    };\n    if (typeof params === 'object') {\n      options = Object.assign(Object.assign({}, options), params);\n    } else if (typeof params === 'boolean') {\n      options.auto_beam = params;\n    }\n    const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n    const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave, {\n      align_rests: options.align_rests,\n      stave\n    });\n    voice.setStave(stave).draw(ctx, stave);\n    beams.forEach(beam => beam.setContext(ctx).draw());\n    return voice.getBoundingBox();\n  }\n  static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {\n    let opts = {\n      auto_beam: autobeam,\n      align_rests: false\n    };\n    if (typeof params === 'object') {\n      opts = Object.assign(Object.assign({}, opts), params);\n    } else if (typeof params === 'boolean') {\n      opts.auto_beam = params;\n    }\n    const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n    const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n    const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n    new Formatter().joinVoices([notevoice]).joinVoices([tabvoice]).formatToStave([notevoice, tabvoice], stave, {\n      align_rests: opts.align_rests\n    });\n    notevoice.draw(ctx, stave);\n    tabvoice.draw(ctx, tabstave);\n    beams.forEach(beam => beam.setContext(ctx).draw());\n    new StaveConnector(stave, tabstave).setContext(ctx).draw();\n  }\n  static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\n    tickables.forEach((currTickable, index) => {\n      if (isStaveNote(currTickable) && currTickable.isRest()) {\n        if (currTickable.getTuplet() && !alignTuplets) {\n          return;\n        }\n        const position = currTickable.getGlyphProps().position.toUpperCase();\n        if (position !== 'R/4' && position !== 'B/4') {\n          return;\n        }\n        if (alignAllNotes || currTickable.getBeam()) {\n          const props = currTickable.getKeyProps()[0];\n          if (index === 0) {\n            props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n          } else if (index > 0 && index < tickables.length) {\n            const prevTickable = tickables[index - 1];\n            if (isStaveNote(prevTickable)) {\n              if (prevTickable.isRest()) {\n                props.line = prevTickable.getKeyProps()[0].line;\n              } else {\n                const restLine = prevTickable.getLineForRest();\n                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n              }\n            }\n          }\n          currTickable.setKeyLine(0, props.line);\n        }\n      }\n    });\n  }\n  constructor(options) {\n    this.formatterOptions = Object.assign({\n      globalSoftmax: false,\n      softmaxFactor: Tables.SOFTMAX_FACTOR,\n      maxIterations: 5\n    }, options);\n    this.justifyWidth = 0;\n    this.totalCost = 0;\n    this.totalShift = 0;\n    this.durationStats = {};\n    this.minTotalWidth = 0;\n    this.hasMinTotalWidth = false;\n    this.tickContexts = {\n      map: {},\n      array: [],\n      list: [],\n      resolutionMultiplier: 0\n    };\n    this.modifierContexts = [];\n    this.contextGaps = {\n      total: 0,\n      gaps: []\n    };\n    this.voices = [];\n    this.lossHistory = [];\n  }\n  alignRests(voices, alignAllNotes) {\n    if (!voices || !voices.length) {\n      throw new RuntimeError('BadArgument', 'No voices to format rests');\n    }\n    voices.forEach(voice => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n  }\n  preCalculateMinTotalWidth(voices) {\n    const unalignedPadding = Tables.currentMusicFont().lookupMetric('stave.unalignedNotePadding');\n    let unalignedCtxCount = 0;\n    let wsum = 0;\n    let dsum = 0;\n    const widths = [];\n    const durations = [];\n    if (this.hasMinTotalWidth) return this.minTotalWidth;\n    if (!voices) {\n      throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n    }\n    this.createTickContexts(voices);\n    const {\n      list: contextList,\n      map: contextMap\n    } = this.tickContexts;\n    this.minTotalWidth = 0;\n    contextList.forEach(tick => {\n      const context = contextMap[tick];\n      context.preFormat();\n      if (context.getTickables().length < voices.length) {\n        unalignedCtxCount += 1;\n      }\n      context.getTickables().forEach(t => {\n        wsum += t.getMetrics().width;\n        dsum += t.getTicks().value();\n        widths.push(t.getMetrics().width);\n        durations.push(t.getTicks().value());\n      });\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n    });\n    this.hasMinTotalWidth = true;\n    const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n    const wvar = sumArray(widths.map(ll => Math.pow(ll - wavg, 2)));\n    const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n    const davg = dsum / durations.length;\n    const dvar = sumArray(durations.map(ll => Math.pow(ll - davg, 2)));\n    const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n    const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n    const unalignedPad = unalignedPadding * unalignedCtxCount;\n    return this.minTotalWidth + Math.max(unalignedPad, padmax);\n  }\n  getMinTotalWidth() {\n    if (!this.hasMinTotalWidth) {\n      throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n    }\n    return this.minTotalWidth;\n  }\n  static getResolutionMultiplier(voices) {\n    if (!voices || !voices.length) {\n      throw new RuntimeError('BadArgument', 'No voices to format');\n    }\n    const totalTicks = voices[0].getTotalTicks();\n    const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n      if (!voice.getTotalTicks().equals(totalTicks)) {\n        throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n      }\n      if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n        throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n      }\n      return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n    }, 1);\n    return resolutionMultiplier;\n  }\n  createModifierContexts(voices) {\n    if (voices.length == 0) return;\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n    const tickToContextMap = new Map();\n    const contexts = [];\n    voices.forEach(voice => {\n      const ticksUsed = new Fraction(0, resolutionMultiplier);\n      voice.getTickables().forEach(tickable => {\n        const integerTicks = ticksUsed.numerator;\n        let staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n        if (!staveTickToContextMap) {\n          tickToContextMap.set(tickable.getStave(), {});\n          staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n        }\n        if (!(staveTickToContextMap ? staveTickToContextMap[integerTicks] : undefined)) {\n          const newContext = new ModifierContext();\n          contexts.push(newContext);\n          staveTickToContextMap[integerTicks] = newContext;\n        }\n        tickable.addToModifierContext(staveTickToContextMap[integerTicks]);\n        ticksUsed.add(tickable.getTicks());\n      });\n    });\n    this.modifierContexts.push({\n      map: tickToContextMap,\n      array: contexts,\n      resolutionMultiplier\n    });\n  }\n  createTickContexts(voices) {\n    const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\n    const contexts = createContexts(voices, tick => new TickContext(tick), fn);\n    this.tickContexts = contexts;\n    const contextArray = this.tickContexts.array;\n    contextArray.forEach(context => {\n      context.tContexts = contextArray;\n    });\n    return contexts;\n  }\n  getTickContexts() {\n    return this.tickContexts;\n  }\n  preFormat() {\n    let justifyWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let renderingContext = arguments.length > 1 ? arguments[1] : undefined;\n    let voicesParam = arguments.length > 2 ? arguments[2] : undefined;\n    let stave = arguments.length > 3 ? arguments[3] : undefined;\n    const contexts = this.tickContexts;\n    if (!contexts) {\n      throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n    }\n    const {\n      list: contextList,\n      map: contextMap\n    } = contexts;\n    this.lossHistory = [];\n    if (voicesParam && stave) {\n      voicesParam.forEach(voice => voice.setStave(stave).preFormat());\n    }\n    let x = 0;\n    let shift = 0;\n    this.minTotalWidth = 0;\n    let totalTicks = 0;\n    contextList.forEach(tick => {\n      const context = contextMap[tick];\n      context.preFormat();\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n      const maxTicks = context.getMaxTicks().value();\n      totalTicks += maxTicks;\n      const metrics = context.getMetrics();\n      x = x + shift + metrics.totalLeftPx;\n      context.setX(x);\n      shift = width - metrics.totalLeftPx;\n    });\n    const {\n      globalSoftmax,\n      softmaxFactor,\n      maxIterations\n    } = this.formatterOptions;\n    const exp = tick => Math.pow(softmaxFactor, contextMap[tick].getMaxTicks().value() / totalTicks);\n    const expTicksUsed = sumArray(contextList.map(exp));\n    this.minTotalWidth = x + shift;\n    this.hasMinTotalWidth = true;\n    if (justifyWidth <= 0) return this.evaluate();\n    const firstContext = contextMap[contextList[0]];\n    const lastContext = contextMap[contextList[contextList.length - 1]];\n    function calculateIdealDistances(adjustedJustifyWidth) {\n      const distances = contextList.map((tick, i) => {\n        const context = contextMap[tick];\n        const voices = context.getTickablesByVoice();\n        let backTickable;\n        if (i > 0) {\n          const prevContext = contextMap[contextList[i - 1]];\n          for (let j = i - 1; j >= 0; j--) {\n            const backTick = contextMap[contextList[j]];\n            const backVoices = backTick.getTickablesByVoice();\n            const matchingVoices = [];\n            Object.keys(voices).forEach(v => {\n              if (backVoices[v]) {\n                matchingVoices.push(v);\n              }\n            });\n            if (matchingVoices.length > 0) {\n              let maxTicks = 0;\n              let maxNegativeShiftPx = Infinity;\n              let expectedDistance = 0;\n              matchingVoices.forEach(v => {\n                const ticks = backVoices[v].getTicks().value();\n                if (ticks > maxTicks) {\n                  backTickable = backVoices[v];\n                  maxTicks = ticks;\n                }\n                const thisTickable = voices[v];\n                const insideLeftEdge = thisTickable.getX() - (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n                const backMetrics = backVoices[v].getMetrics();\n                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n              });\n              maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\n              if (globalSoftmax) {\n                const t = totalTicks;\n                expectedDistance = Math.pow(softmaxFactor, maxTicks / t) / expTicksUsed * adjustedJustifyWidth;\n              } else if (typeof backTickable !== 'undefined') {\n                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n              }\n              return {\n                expectedDistance,\n                maxNegativeShiftPx,\n                fromTickable: backTickable\n              };\n            }\n          }\n        }\n        return {\n          expectedDistance: 0,\n          fromTickablePx: 0,\n          maxNegativeShiftPx: 0\n        };\n      });\n      return distances;\n    }\n    function shiftToIdealDistances(idealDistances) {\n      const centerX = adjustedJustifyWidth / 2;\n      let spaceAccum = 0;\n      contextList.forEach((tick, index) => {\n        const context = contextMap[tick];\n        if (index > 0) {\n          const contextX = context.getX();\n          const ideal = idealDistances[index];\n          const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n          let negativeShiftPx = 0;\n          if (errorPx > 0) {\n            spaceAccum += errorPx;\n          } else if (errorPx < 0) {\n            negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n            spaceAccum += -negativeShiftPx;\n          }\n          context.setX(contextX + spaceAccum);\n        }\n        context.getCenterAlignedTickables().forEach(tickable => {\n          tickable.setCenterXShift(centerX - context.getX());\n        });\n      });\n      return lastContext.getX() - firstContext.getX();\n    }\n    const adjustedJustifyWidth = justifyWidth - lastContext.getMetrics().notePx - lastContext.getMetrics().totalRightPx - firstContext.getMetrics().totalLeftPx;\n    const musicFont = Tables.currentMusicFont();\n    const configMinPadding = musicFont.lookupMetric('stave.endPaddingMin');\n    const configMaxPadding = musicFont.lookupMetric('stave.endPaddingMax');\n    const leftPadding = musicFont.lookupMetric('stave.padding');\n    let targetWidth = adjustedJustifyWidth;\n    const distances = calculateIdealDistances(targetWidth);\n    let actualWidth = shiftToIdealDistances(distances);\n    if (contextList.length === 1) return 0;\n    const calcMinDistance = (targetWidth, distances) => {\n      let mdCalc = targetWidth / 2;\n      if (distances.length > 1) {\n        for (let di = 1; di < distances.length; ++di) {\n          mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n        }\n      }\n      return mdCalc;\n    };\n    const minDistance = calcMinDistance(targetWidth, distances);\n    const paddingMaxCalc = curTargetWidth => {\n      let lastTickablePadding = 0;\n      const lastTickable = lastContext && lastContext.getMaxTickable();\n      if (lastTickable) {\n        const voice = lastTickable.getVoice();\n        if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {\n          return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n        }\n        const tickWidth = lastTickable.getWidth();\n        lastTickablePadding = voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);\n      }\n      return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;\n    };\n    let paddingMax = paddingMaxCalc(targetWidth);\n    let paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n    const maxX = adjustedJustifyWidth - paddingMin;\n    let iterations = maxIterations;\n    while (actualWidth > maxX && iterations > 0 || actualWidth + paddingMax < maxX && iterations > 1) {\n      targetWidth -= actualWidth - maxX;\n      paddingMax = paddingMaxCalc(targetWidth);\n      paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n      actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n      iterations--;\n    }\n    this.justifyWidth = justifyWidth;\n    return this.evaluate();\n  }\n  evaluate() {\n    const contexts = this.tickContexts;\n    const justifyWidth = this.justifyWidth;\n    this.contextGaps = {\n      total: 0,\n      gaps: []\n    };\n    contexts.list.forEach((tick, index) => {\n      if (index === 0) return;\n      const prevTick = contexts.list[index - 1];\n      const prevContext = contexts.map[prevTick];\n      const context = contexts.map[tick];\n      const prevMetrics = prevContext.getMetrics();\n      const currMetrics = context.getMetrics();\n      const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n      const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n      const gap = insideLeftEdge - insideRightEdge;\n      this.contextGaps.total += gap;\n      this.contextGaps.gaps.push({\n        x1: insideRightEdge,\n        x2: insideLeftEdge\n      });\n      context.getFormatterMetrics().freedom.left = gap;\n      prevContext.getFormatterMetrics().freedom.right = gap;\n    });\n    this.durationStats = {};\n    const durationStats = this.durationStats;\n    function updateStats(duration, space) {\n      const stats = durationStats[duration];\n      if (stats === undefined) {\n        durationStats[duration] = {\n          mean: space,\n          count: 1\n        };\n      } else {\n        stats.count += 1;\n        stats.mean = (stats.mean + space) / 2;\n      }\n    }\n    this.voices.forEach(voice => {\n      voice.getTickables().forEach((note, i, notes) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getMetrics();\n        const formatterMetrics = note.getFormatterMetrics();\n        const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n        let space = 0;\n        if (i < notes.length - 1) {\n          const rightNote = notes[i + 1];\n          const rightMetrics = rightNote.getMetrics();\n          const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n          space = rightNoteEdge - leftNoteEdge;\n          formatterMetrics.space.used = rightNote.getX() - note.getX();\n          rightNote.getFormatterMetrics().freedom.left = space;\n        } else {\n          space = justifyWidth - leftNoteEdge;\n          formatterMetrics.space.used = justifyWidth - note.getX();\n        }\n        formatterMetrics.freedom.right = space;\n        updateStats(duration, formatterMetrics.space.used);\n      });\n    });\n    let totalDeviation = 0;\n    this.voices.forEach(voice => {\n      voice.getTickables().forEach(note => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getFormatterMetrics();\n        metrics.space.mean = durationStats[duration].mean;\n        metrics.duration = duration;\n        metrics.iterations += 1;\n        metrics.space.deviation = metrics.space.used - metrics.space.mean;\n        totalDeviation += Math.pow(metrics.space.deviation, 2);\n      });\n    });\n    this.totalCost = Math.sqrt(totalDeviation);\n    this.lossHistory.push(this.totalCost);\n    return this.totalCost;\n  }\n  tune(options) {\n    var _a;\n    const contexts = this.tickContexts;\n    if (!contexts) {\n      return 0;\n    }\n    const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\n    function move(current, shift, prev, next) {\n      current.setX(current.getX() + shift);\n      current.getFormatterMetrics().freedom.left += shift;\n      current.getFormatterMetrics().freedom.right -= shift;\n      if (prev) prev.getFormatterMetrics().freedom.right += shift;\n      if (next) next.getFormatterMetrics().freedom.left -= shift;\n    }\n    let shift = 0;\n    this.totalShift = 0;\n    contexts.list.forEach((tick, index, list) => {\n      const context = contexts.map[tick];\n      const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n      const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n      move(context, shift, prevContext, nextContext);\n      const cost = -sumArray(context.getTickables().map(t => t.getFormatterMetrics().space.deviation));\n      if (cost > 0) {\n        shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n      } else if (cost < 0) {\n        if (nextContext) {\n          shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n        } else {\n          shift = 0;\n        }\n      }\n      shift *= alpha;\n      this.totalShift += shift;\n    });\n    return this.evaluate();\n  }\n  postFormat() {\n    this.modifierContexts.forEach(modifierContexts => {\n      modifierContexts.array.forEach(mc => mc.postFormat());\n    });\n    this.tickContexts.list.forEach(tick => {\n      this.tickContexts.map[tick].postFormat();\n    });\n    return this;\n  }\n  joinVoices(voices) {\n    this.createModifierContexts(voices);\n    this.hasMinTotalWidth = false;\n    return this;\n  }\n  format(voices, justifyWidth, options) {\n    const opts = Object.assign({\n      align_rests: false\n    }, options);\n    this.voices = voices;\n    const softmaxFactor = this.formatterOptions.softmaxFactor;\n    if (softmaxFactor) {\n      this.voices.forEach(v => v.setSoftmaxFactor(softmaxFactor));\n    }\n    this.alignRests(voices, opts.align_rests);\n    this.createTickContexts(voices);\n    this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n    if (opts.stave) this.postFormat();\n    return this;\n  }\n  formatToStave(voices, stave, optionsParam) {\n    const options = Object.assign({\n      context: stave.getContext()\n    }, optionsParam);\n    const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n    L('Formatting voices to width: ', justifyWidth);\n    return this.format(voices, justifyWidth, options);\n  }\n  getTickContext(tick) {\n    var _a;\n    return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\n  }\n}\nFormatter.DEBUG = false;\nexport { Formatter };","map":{"version":3,"names":["Beam","Font","Fraction","ModifierContext","Stave","StaveConnector","Tables","TickContext","isNote","isStaveNote","defined","log","midLine","RuntimeError","sumArray","Voice","createContexts","voices","makeContext","addToContext","length","map","array","list","resolutionMultiplier","tickToContextMap","tickList","contexts","Formatter","getResolutionMultiplier","forEach","voice","voiceIndex","ticksUsed","getTickables","tickable","integerTicks","numerator","newContext","tickID","push","add","getTicks","sort","a","b","L","_len","arguments","args","Array","_key","DEBUG","getRestLineForNextNoteGroup","notes","currRestLine","currNoteIndex","compare","nextRestLine","noteIndex","note","isRest","shouldIgnoreTicks","getLineForRest","top","Math","max","bot","min","SimpleFormat","x","undefined","paddingBetween","reduce","accumulator","addToModifierContext","tick","addTickable","preFormat","metrics","getMetrics","setX","totalLeftPx","getWidth","totalRightPx","plotDebugging","ctx","formatter","xPos","y1","y2","options","Object","assign","stavePadding","currentMusicFont","lookupMetric","contextGaps","stroke","x1","x2","color","beginPath","setStrokeStyle","setFillStyle","setLineWidth","fillRect","save","setFont","SANS_SERIF","gaps","gap","fillText","round","toString","totalCost","toFixed","totalShift","total","restore","FormatAndDraw","stave","params","auto_beam","align_rests","TIME4_4","setMode","Mode","SOFT","addTickables","beams","applyAndGetBeams","joinVoices","formatToStave","setStave","draw","beam","setContext","getBoundingBox","FormatAndDrawTab","tabstave","tabnotes","autobeam","opts","notevoice","tabvoice","AlignRestsToNotes","tickables","alignAllNotes","alignTuplets","currTickable","index","getTuplet","position","getGlyphProps","toUpperCase","getBeam","props","getKeyProps","line","prevTickable","restLine","setKeyLine","constructor","formatterOptions","globalSoftmax","softmaxFactor","SOFTMAX_FACTOR","maxIterations","justifyWidth","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","modifierContexts","lossHistory","alignRests","preCalculateMinTotalWidth","unalignedPadding","unalignedCtxCount","wsum","dsum","widths","durations","createTickContexts","contextList","contextMap","context","t","width","value","wavg","wvar","ll","pow","wpads","davg","dvar","dpads","padmax","unalignedPad","getMinTotalWidth","totalTicks","getTotalTicks","equals","getMode","STRICT","isComplete","LCM","createModifierContexts","Map","staveTickToContextMap","get","getStave","set","fn","contextArray","tContexts","getTickContexts","renderingContext","voicesParam","shift","maxTicks","getMaxTicks","exp","expTicksUsed","evaluate","firstContext","lastContext","calculateIdealDistances","adjustedJustifyWidth","distances","i","getTickablesByVoice","backTickable","prevContext","j","backTick","backVoices","matchingVoices","keys","v","maxNegativeShiftPx","Infinity","expectedDistance","ticks","thisTickable","insideLeftEdge","getX","modLeftPx","leftDisplacedHeadPx","backMetrics","insideRightEdge","notePx","modRightPx","rightDisplacedHeadPx","getVoice","softmax","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","centerX","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","abs","getCenterAlignedTickables","setCenterXShift","musicFont","configMinPadding","configMaxPadding","leftPadding","targetWidth","actualWidth","calcMinDistance","mdCalc","di","minDistance","paddingMaxCalc","curTargetWidth","lastTickablePadding","lastTickable","getMaxTickable","getTicksUsed","tickWidth","paddingMax","paddingMin","maxX","iterations","prevTick","prevMetrics","currMetrics","getFormatterMetrics","freedom","left","right","updateStats","duration","space","stats","mean","count","clone","simplify","formatterMetrics","leftNoteEdge","rightNote","rightMetrics","rightNoteEdge","used","totalDeviation","deviation","sqrt","tune","_a","alpha","move","current","prev","next","nextContext","cost","postFormat","mc","format","setSoftmaxFactor","optionsParam","getContext","getNoteEndX","getNoteStartX","defaultPadding","getTickContext"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/formatter.js"],"sourcesContent":["import { Beam } from './beam.js';\nimport { Font } from './font.js';\nimport { Fraction } from './fraction.js';\nimport { ModifierContext } from './modifiercontext.js';\nimport { Stave } from './stave.js';\nimport { StaveConnector } from './staveconnector.js';\nimport { Tables } from './tables.js';\nimport { TickContext } from './tickcontext.js';\nimport { isNote, isStaveNote } from './typeguard.js';\nimport { defined, log, midLine, RuntimeError, sumArray } from './util.js';\nimport { Voice } from './voice.js';\nfunction createContexts(voices, makeContext, addToContext) {\n    if (voices.length == 0)\n        return {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n    const tickToContextMap = {};\n    const tickList = [];\n    const contexts = [];\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n    voices.forEach((voice, voiceIndex) => {\n        const ticksUsed = new Fraction(0, resolutionMultiplier);\n        voice.getTickables().forEach((tickable) => {\n            const integerTicks = ticksUsed.numerator;\n            if (!tickToContextMap[integerTicks]) {\n                const newContext = makeContext({ tickID: integerTicks });\n                contexts.push(newContext);\n                tickToContextMap[integerTicks] = newContext;\n                tickList.push(integerTicks);\n            }\n            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n            ticksUsed.add(tickable.getTicks());\n        });\n    });\n    return {\n        map: tickToContextMap,\n        array: contexts,\n        list: tickList.sort((a, b) => a - b),\n        resolutionMultiplier,\n    };\n}\nfunction L(...args) {\n    if (Formatter.DEBUG)\n        log('Vex.Flow.Formatter', args);\n}\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\n    let nextRestLine = currRestLine;\n    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n        const note = notes[noteIndex];\n        if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n            nextRestLine = note.getLineForRest();\n            break;\n        }\n    }\n    if (compare && currRestLine !== nextRestLine) {\n        const top = Math.max(currRestLine, nextRestLine);\n        const bot = Math.min(currRestLine, nextRestLine);\n        nextRestLine = midLine(top, bot);\n    }\n    return nextRestLine;\n}\nclass Formatter {\n    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\n        notes.reduce((accumulator, note) => {\n            note.addToModifierContext(new ModifierContext());\n            const tick = new TickContext().addTickable(note).preFormat();\n            const metrics = tick.getMetrics();\n            tick.setX(accumulator + metrics.totalLeftPx);\n            return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n        }, x);\n    }\n    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\n        options = Object.assign({ stavePadding: Tables.currentMusicFont().lookupMetric('stave.padding') }, options);\n        const x = xPos + options.stavePadding;\n        const contextGaps = formatter.contextGaps;\n        function stroke(x1, x2, color) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(1);\n            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n        }\n        ctx.save();\n        ctx.setFont(Font.SANS_SERIF, 8);\n        contextGaps.gaps.forEach((gap) => {\n            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n            ctx.setFillStyle('green');\n            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n        });\n        ctx.setFillStyle('red');\n        ctx.fillText(`Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\n        ctx.restore();\n    }\n    static FormatAndDraw(ctx, stave, notes, params) {\n        let options = {\n            auto_beam: false,\n            align_rests: false,\n        };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        else if (typeof params === 'boolean') {\n            options.auto_beam = params;\n        }\n        const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n        new Formatter()\n            .joinVoices([voice])\n            .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\n        voice.setStave(stave).draw(ctx, stave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        return voice.getBoundingBox();\n    }\n    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {\n        let opts = {\n            auto_beam: autobeam,\n            align_rests: false,\n        };\n        if (typeof params === 'object') {\n            opts = Object.assign(Object.assign({}, opts), params);\n        }\n        else if (typeof params === 'boolean') {\n            opts.auto_beam = params;\n        }\n        const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n        const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n        new Formatter()\n            .joinVoices([notevoice])\n            .joinVoices([tabvoice])\n            .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n        notevoice.draw(ctx, stave);\n        tabvoice.draw(ctx, tabstave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        new StaveConnector(stave, tabstave).setContext(ctx).draw();\n    }\n    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\n        tickables.forEach((currTickable, index) => {\n            if (isStaveNote(currTickable) && currTickable.isRest()) {\n                if (currTickable.getTuplet() && !alignTuplets) {\n                    return;\n                }\n                const position = currTickable.getGlyphProps().position.toUpperCase();\n                if (position !== 'R/4' && position !== 'B/4') {\n                    return;\n                }\n                if (alignAllNotes || currTickable.getBeam()) {\n                    const props = currTickable.getKeyProps()[0];\n                    if (index === 0) {\n                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n                    }\n                    else if (index > 0 && index < tickables.length) {\n                        const prevTickable = tickables[index - 1];\n                        if (isStaveNote(prevTickable)) {\n                            if (prevTickable.isRest()) {\n                                props.line = prevTickable.getKeyProps()[0].line;\n                            }\n                            else {\n                                const restLine = prevTickable.getLineForRest();\n                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n                            }\n                        }\n                    }\n                    currTickable.setKeyLine(0, props.line);\n                }\n            }\n        });\n    }\n    constructor(options) {\n        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: Tables.SOFTMAX_FACTOR, maxIterations: 5 }, options);\n        this.justifyWidth = 0;\n        this.totalCost = 0;\n        this.totalShift = 0;\n        this.durationStats = {};\n        this.minTotalWidth = 0;\n        this.hasMinTotalWidth = false;\n        this.tickContexts = {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n        this.modifierContexts = [];\n        this.contextGaps = {\n            total: 0,\n            gaps: [],\n        };\n        this.voices = [];\n        this.lossHistory = [];\n    }\n    alignRests(voices, alignAllNotes) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format rests');\n        }\n        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n    }\n    preCalculateMinTotalWidth(voices) {\n        const unalignedPadding = Tables.currentMusicFont().lookupMetric('stave.unalignedNotePadding');\n        let unalignedCtxCount = 0;\n        let wsum = 0;\n        let dsum = 0;\n        const widths = [];\n        const durations = [];\n        if (this.hasMinTotalWidth)\n            return this.minTotalWidth;\n        if (!voices) {\n            throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n        }\n        this.createTickContexts(voices);\n        const { list: contextList, map: contextMap } = this.tickContexts;\n        this.minTotalWidth = 0;\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            if (context.getTickables().length < voices.length) {\n                unalignedCtxCount += 1;\n            }\n            context.getTickables().forEach((t) => {\n                wsum += t.getMetrics().width;\n                dsum += t.getTicks().value();\n                widths.push(t.getMetrics().width);\n                durations.push(t.getTicks().value());\n            });\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n        });\n        this.hasMinTotalWidth = true;\n        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n        const davg = dsum / durations.length;\n        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n        const unalignedPad = unalignedPadding * unalignedCtxCount;\n        return this.minTotalWidth + Math.max(unalignedPad, padmax);\n    }\n    getMinTotalWidth() {\n        if (!this.hasMinTotalWidth) {\n            throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n        }\n        return this.minTotalWidth;\n    }\n    static getResolutionMultiplier(voices) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format');\n        }\n        const totalTicks = voices[0].getTotalTicks();\n        const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n            if (!voice.getTotalTicks().equals(totalTicks)) {\n                throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n            }\n            if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n                throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n            }\n            return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n        }, 1);\n        return resolutionMultiplier;\n    }\n    createModifierContexts(voices) {\n        if (voices.length == 0)\n            return;\n        const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n        const tickToContextMap = new Map();\n        const contexts = [];\n        voices.forEach((voice) => {\n            const ticksUsed = new Fraction(0, resolutionMultiplier);\n            voice.getTickables().forEach((tickable) => {\n                const integerTicks = ticksUsed.numerator;\n                let staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                if (!staveTickToContextMap) {\n                    tickToContextMap.set(tickable.getStave(), {});\n                    staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                }\n                if (!(staveTickToContextMap ? staveTickToContextMap[integerTicks] : undefined)) {\n                    const newContext = new ModifierContext();\n                    contexts.push(newContext);\n                    staveTickToContextMap[integerTicks] = newContext;\n                }\n                tickable.addToModifierContext(staveTickToContextMap[integerTicks]);\n                ticksUsed.add(tickable.getTicks());\n            });\n        });\n        this.modifierContexts.push({\n            map: tickToContextMap,\n            array: contexts,\n            resolutionMultiplier,\n        });\n    }\n    createTickContexts(voices) {\n        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\n        const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);\n        this.tickContexts = contexts;\n        const contextArray = this.tickContexts.array;\n        contextArray.forEach((context) => {\n            context.tContexts = contextArray;\n        });\n        return contexts;\n    }\n    getTickContexts() {\n        return this.tickContexts;\n    }\n    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n        }\n        const { list: contextList, map: contextMap } = contexts;\n        this.lossHistory = [];\n        if (voicesParam && stave) {\n            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n        }\n        let x = 0;\n        let shift = 0;\n        this.minTotalWidth = 0;\n        let totalTicks = 0;\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n            const maxTicks = context.getMaxTicks().value();\n            totalTicks += maxTicks;\n            const metrics = context.getMetrics();\n            x = x + shift + metrics.totalLeftPx;\n            context.setX(x);\n            shift = width - metrics.totalLeftPx;\n        });\n        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));\n        const expTicksUsed = sumArray(contextList.map(exp));\n        this.minTotalWidth = x + shift;\n        this.hasMinTotalWidth = true;\n        if (justifyWidth <= 0)\n            return this.evaluate();\n        const firstContext = contextMap[contextList[0]];\n        const lastContext = contextMap[contextList[contextList.length - 1]];\n        function calculateIdealDistances(adjustedJustifyWidth) {\n            const distances = contextList.map((tick, i) => {\n                const context = contextMap[tick];\n                const voices = context.getTickablesByVoice();\n                let backTickable;\n                if (i > 0) {\n                    const prevContext = contextMap[contextList[i - 1]];\n                    for (let j = i - 1; j >= 0; j--) {\n                        const backTick = contextMap[contextList[j]];\n                        const backVoices = backTick.getTickablesByVoice();\n                        const matchingVoices = [];\n                        Object.keys(voices).forEach((v) => {\n                            if (backVoices[v]) {\n                                matchingVoices.push(v);\n                            }\n                        });\n                        if (matchingVoices.length > 0) {\n                            let maxTicks = 0;\n                            let maxNegativeShiftPx = Infinity;\n                            let expectedDistance = 0;\n                            matchingVoices.forEach((v) => {\n                                const ticks = backVoices[v].getTicks().value();\n                                if (ticks > maxTicks) {\n                                    backTickable = backVoices[v];\n                                    maxTicks = ticks;\n                                }\n                                const thisTickable = voices[v];\n                                const insideLeftEdge = thisTickable.getX() -\n                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n                                const backMetrics = backVoices[v].getMetrics();\n                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n                            });\n                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\n                            if (globalSoftmax) {\n                                const t = totalTicks;\n                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;\n                            }\n                            else if (typeof backTickable !== 'undefined') {\n                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n                            }\n                            return {\n                                expectedDistance,\n                                maxNegativeShiftPx,\n                                fromTickable: backTickable,\n                            };\n                        }\n                    }\n                }\n                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n            });\n            return distances;\n        }\n        function shiftToIdealDistances(idealDistances) {\n            const centerX = adjustedJustifyWidth / 2;\n            let spaceAccum = 0;\n            contextList.forEach((tick, index) => {\n                const context = contextMap[tick];\n                if (index > 0) {\n                    const contextX = context.getX();\n                    const ideal = idealDistances[index];\n                    const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n                    let negativeShiftPx = 0;\n                    if (errorPx > 0) {\n                        spaceAccum += errorPx;\n                    }\n                    else if (errorPx < 0) {\n                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n                        spaceAccum += -negativeShiftPx;\n                    }\n                    context.setX(contextX + spaceAccum);\n                }\n                context.getCenterAlignedTickables().forEach((tickable) => {\n                    tickable.setCenterXShift(centerX - context.getX());\n                });\n            });\n            return lastContext.getX() - firstContext.getX();\n        }\n        const adjustedJustifyWidth = justifyWidth -\n            lastContext.getMetrics().notePx -\n            lastContext.getMetrics().totalRightPx -\n            firstContext.getMetrics().totalLeftPx;\n        const musicFont = Tables.currentMusicFont();\n        const configMinPadding = musicFont.lookupMetric('stave.endPaddingMin');\n        const configMaxPadding = musicFont.lookupMetric('stave.endPaddingMax');\n        const leftPadding = musicFont.lookupMetric('stave.padding');\n        let targetWidth = adjustedJustifyWidth;\n        const distances = calculateIdealDistances(targetWidth);\n        let actualWidth = shiftToIdealDistances(distances);\n        if (contextList.length === 1)\n            return 0;\n        const calcMinDistance = (targetWidth, distances) => {\n            let mdCalc = targetWidth / 2;\n            if (distances.length > 1) {\n                for (let di = 1; di < distances.length; ++di) {\n                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n                }\n            }\n            return mdCalc;\n        };\n        const minDistance = calcMinDistance(targetWidth, distances);\n        const paddingMaxCalc = (curTargetWidth) => {\n            let lastTickablePadding = 0;\n            const lastTickable = lastContext && lastContext.getMaxTickable();\n            if (lastTickable) {\n                const voice = lastTickable.getVoice();\n                if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {\n                    return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n                }\n                const tickWidth = lastTickable.getWidth();\n                lastTickablePadding =\n                    voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);\n            }\n            return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;\n        };\n        let paddingMax = paddingMaxCalc(targetWidth);\n        let paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n        const maxX = adjustedJustifyWidth - paddingMin;\n        let iterations = maxIterations;\n        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n            targetWidth -= actualWidth - maxX;\n            paddingMax = paddingMaxCalc(targetWidth);\n            paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n            iterations--;\n        }\n        this.justifyWidth = justifyWidth;\n        return this.evaluate();\n    }\n    evaluate() {\n        const contexts = this.tickContexts;\n        const justifyWidth = this.justifyWidth;\n        this.contextGaps = { total: 0, gaps: [] };\n        contexts.list.forEach((tick, index) => {\n            if (index === 0)\n                return;\n            const prevTick = contexts.list[index - 1];\n            const prevContext = contexts.map[prevTick];\n            const context = contexts.map[tick];\n            const prevMetrics = prevContext.getMetrics();\n            const currMetrics = context.getMetrics();\n            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n            const gap = insideLeftEdge - insideRightEdge;\n            this.contextGaps.total += gap;\n            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n            context.getFormatterMetrics().freedom.left = gap;\n            prevContext.getFormatterMetrics().freedom.right = gap;\n        });\n        this.durationStats = {};\n        const durationStats = this.durationStats;\n        function updateStats(duration, space) {\n            const stats = durationStats[duration];\n            if (stats === undefined) {\n                durationStats[duration] = { mean: space, count: 1 };\n            }\n            else {\n                stats.count += 1;\n                stats.mean = (stats.mean + space) / 2;\n            }\n        }\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note, i, notes) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getMetrics();\n                const formatterMetrics = note.getFormatterMetrics();\n                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n                let space = 0;\n                if (i < notes.length - 1) {\n                    const rightNote = notes[i + 1];\n                    const rightMetrics = rightNote.getMetrics();\n                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n                    space = rightNoteEdge - leftNoteEdge;\n                    formatterMetrics.space.used = rightNote.getX() - note.getX();\n                    rightNote.getFormatterMetrics().freedom.left = space;\n                }\n                else {\n                    space = justifyWidth - leftNoteEdge;\n                    formatterMetrics.space.used = justifyWidth - note.getX();\n                }\n                formatterMetrics.freedom.right = space;\n                updateStats(duration, formatterMetrics.space.used);\n            });\n        });\n        let totalDeviation = 0;\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getFormatterMetrics();\n                metrics.space.mean = durationStats[duration].mean;\n                metrics.duration = duration;\n                metrics.iterations += 1;\n                metrics.space.deviation = metrics.space.used - metrics.space.mean;\n                totalDeviation += Math.pow(metrics.space.deviation, 2);\n            });\n        });\n        this.totalCost = Math.sqrt(totalDeviation);\n        this.lossHistory.push(this.totalCost);\n        return this.totalCost;\n    }\n    tune(options) {\n        var _a;\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            return 0;\n        }\n        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\n        function move(current, shift, prev, next) {\n            current.setX(current.getX() + shift);\n            current.getFormatterMetrics().freedom.left += shift;\n            current.getFormatterMetrics().freedom.right -= shift;\n            if (prev)\n                prev.getFormatterMetrics().freedom.right += shift;\n            if (next)\n                next.getFormatterMetrics().freedom.left -= shift;\n        }\n        let shift = 0;\n        this.totalShift = 0;\n        contexts.list.forEach((tick, index, list) => {\n            const context = contexts.map[tick];\n            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n            move(context, shift, prevContext, nextContext);\n            const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n            if (cost > 0) {\n                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n            }\n            else if (cost < 0) {\n                if (nextContext) {\n                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n                }\n                else {\n                    shift = 0;\n                }\n            }\n            shift *= alpha;\n            this.totalShift += shift;\n        });\n        return this.evaluate();\n    }\n    postFormat() {\n        this.modifierContexts.forEach((modifierContexts) => {\n            modifierContexts.array.forEach((mc) => mc.postFormat());\n        });\n        this.tickContexts.list.forEach((tick) => {\n            this.tickContexts.map[tick].postFormat();\n        });\n        return this;\n    }\n    joinVoices(voices) {\n        this.createModifierContexts(voices);\n        this.hasMinTotalWidth = false;\n        return this;\n    }\n    format(voices, justifyWidth, options) {\n        const opts = Object.assign({ align_rests: false }, options);\n        this.voices = voices;\n        const softmaxFactor = this.formatterOptions.softmaxFactor;\n        if (softmaxFactor) {\n            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n        }\n        this.alignRests(voices, opts.align_rests);\n        this.createTickContexts(voices);\n        this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n        if (opts.stave)\n            this.postFormat();\n        return this;\n    }\n    formatToStave(voices, stave, optionsParam) {\n        const options = Object.assign({ context: stave.getContext() }, optionsParam);\n        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n        L('Formatting voices to width: ', justifyWidth);\n        return this.format(voices, justifyWidth, options);\n    }\n    getTickContext(tick) {\n        var _a;\n        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\n    }\n}\nFormatter.DEBUG = false;\nexport { Formatter };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}