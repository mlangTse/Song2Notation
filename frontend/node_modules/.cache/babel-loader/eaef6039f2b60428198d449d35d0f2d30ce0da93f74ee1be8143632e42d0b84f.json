{"ast":null,"code":"import { StaveNote } from './stavenote.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nexport class GraceNote extends StaveNote {\n  static get CATEGORY() {\n    return \"GraceNote\";\n  }\n  static get LEDGER_LINE_OFFSET() {\n    return 2;\n  }\n  static get SCALE() {\n    return 0.66;\n  }\n  constructor(noteStruct) {\n    super(Object.assign({\n      glyph_font_scale: Tables.NOTATION_FONT_SCALE * GraceNote.SCALE,\n      stroke_px: GraceNote.LEDGER_LINE_OFFSET\n    }, noteStruct));\n    this.slash = noteStruct.slash || false;\n    this.slur = true;\n    this.buildNoteHeads();\n    this.width = 3;\n  }\n  getStemExtension() {\n    if (this.stem_extension_override) {\n      return this.stem_extension_override;\n    }\n    const glyphProps = this.getGlyphProps();\n    if (glyphProps) {\n      let ret = super.getStemExtension();\n      if (glyphProps.stem) {\n        const staveNoteScale = this.getStaveNoteScale();\n        ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n      }\n      return ret;\n    }\n    return 0;\n  }\n  getStaveNoteScale() {\n    return this.render_options.glyph_font_scale / Tables.NOTATION_FONT_SCALE;\n  }\n  draw() {\n    super.draw();\n    this.setRendered();\n    const stem = this.stem;\n    if (this.slash && stem) {\n      const staveNoteScale = this.getStaveNoteScale();\n      const offsetScale = staveNoteScale / 0.66;\n      let slashBBox = undefined;\n      const beam = this.beam;\n      if (beam) {\n        if (!beam.postFormatted) {\n          beam.postFormat();\n        }\n        slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n          stem: 6 * offsetScale,\n          beam: 5 * offsetScale\n        });\n      } else {\n        const stem_direction = this.getStemDirection();\n        const noteHeadBounds = this.getNoteHeadBounds();\n        const noteStemHeight = stem.getHeight();\n        let x = this.getAbsoluteX();\n        let y = stem_direction === Stem.DOWN ? noteHeadBounds.y_top - noteStemHeight : noteHeadBounds.y_bottom - noteStemHeight;\n        const defaultStemExtention = stem_direction === Stem.DOWN ? this.glyphProps.stem_down_extension : this.glyphProps.stem_up_extension;\n        let defaultOffsetY = Tables.STEM_HEIGHT;\n        defaultOffsetY -= defaultOffsetY / 2.8;\n        defaultOffsetY += defaultStemExtention;\n        y += defaultOffsetY * staveNoteScale * stem_direction;\n        const offsets = stem_direction === Stem.UP ? {\n          x1: 1,\n          y1: 0,\n          x2: 13,\n          y2: -9\n        } : {\n          x1: -4,\n          y1: 1,\n          x2: 13,\n          y2: 9\n        };\n        x += offsets.x1 * offsetScale;\n        y += offsets.y1 * offsetScale;\n        slashBBox = {\n          x1: x,\n          y1: y,\n          x2: x + offsets.x2 * offsetScale,\n          y2: y + offsets.y2 * offsetScale\n        };\n      }\n      const ctx = this.checkContext();\n      ctx.save();\n      ctx.setLineWidth(1 * offsetScale);\n      ctx.beginPath();\n      ctx.moveTo(slashBBox.x1, slashBBox.y1);\n      ctx.lineTo(slashBBox.x2, slashBBox.y2);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n  calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n    const beam = this.beam;\n    if (!beam) throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n    const beam_slope = beam.slope;\n    const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n    const scaleX = isBeamEndNote ? -1 : 1;\n    const beam_angle = Math.atan(beam_slope * scaleX);\n    const iPointOnBeam = {\n      dx: Math.cos(beam_angle) * slashBeamOffset,\n      dy: Math.sin(beam_angle) * slashBeamOffset\n    };\n    slashStemOffset *= this.getStemDirection();\n    const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n    const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n    const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n    const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n    const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n    const stemX = this.getStemX();\n    const stem0X = beam.notes[0].getStemX();\n    const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n    const ret = {\n      x1: stemX - protrusion_stem_dx,\n      y1: stemY + slashStemOffset - protrusion_stem_dy,\n      x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n      y2: stemY + iPointOnBeam.dy + protrusion_beam_dy\n    };\n    return ret;\n  }\n}","map":{"version":3,"names":["StaveNote","Stem","Tables","RuntimeError","GraceNote","CATEGORY","LEDGER_LINE_OFFSET","SCALE","constructor","noteStruct","Object","assign","glyph_font_scale","NOTATION_FONT_SCALE","stroke_px","slash","slur","buildNoteHeads","width","getStemExtension","stem_extension_override","glyphProps","getGlyphProps","ret","stem","staveNoteScale","getStaveNoteScale","HEIGHT","render_options","draw","setRendered","offsetScale","slashBBox","undefined","beam","postFormatted","postFormat","calcBeamedNotesSlashBBox","stem_direction","getStemDirection","noteHeadBounds","getNoteHeadBounds","noteStemHeight","getHeight","x","getAbsoluteX","y","DOWN","y_top","y_bottom","defaultStemExtention","stem_down_extension","stem_up_extension","defaultOffsetY","STEM_HEIGHT","offsets","UP","x1","y1","x2","y2","ctx","checkContext","save","setLineWidth","beginPath","moveTo","lineTo","closePath","stroke","restore","slashStemOffset","slashBeamOffset","protrusions","beam_slope","slope","isBeamEndNote","notes","length","scaleX","beam_angle","Math","atan","iPointOnBeam","dx","cos","dy","sin","slash_angle","protrusion_stem_dx","protrusion_stem_dy","protrusion_beam_dx","protrusion_beam_dy","stemX","getStemX","stem0X","stemY","getBeamYToDraw"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/gracenote.js"],"sourcesContent":["import { StaveNote } from './stavenote.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nexport class GraceNote extends StaveNote {\n    static get CATEGORY() {\n        return \"GraceNote\";\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 2;\n    }\n    static get SCALE() {\n        return 0.66;\n    }\n    constructor(noteStruct) {\n        super(Object.assign({ glyph_font_scale: Tables.NOTATION_FONT_SCALE * GraceNote.SCALE, stroke_px: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));\n        this.slash = noteStruct.slash || false;\n        this.slur = true;\n        this.buildNoteHeads();\n        this.width = 3;\n    }\n    getStemExtension() {\n        if (this.stem_extension_override) {\n            return this.stem_extension_override;\n        }\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            let ret = super.getStemExtension();\n            if (glyphProps.stem) {\n                const staveNoteScale = this.getStaveNoteScale();\n                ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n            }\n            return ret;\n        }\n        return 0;\n    }\n    getStaveNoteScale() {\n        return this.render_options.glyph_font_scale / Tables.NOTATION_FONT_SCALE;\n    }\n    draw() {\n        super.draw();\n        this.setRendered();\n        const stem = this.stem;\n        if (this.slash && stem) {\n            const staveNoteScale = this.getStaveNoteScale();\n            const offsetScale = staveNoteScale / 0.66;\n            let slashBBox = undefined;\n            const beam = this.beam;\n            if (beam) {\n                if (!beam.postFormatted) {\n                    beam.postFormat();\n                }\n                slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n                    stem: 6 * offsetScale,\n                    beam: 5 * offsetScale,\n                });\n            }\n            else {\n                const stem_direction = this.getStemDirection();\n                const noteHeadBounds = this.getNoteHeadBounds();\n                const noteStemHeight = stem.getHeight();\n                let x = this.getAbsoluteX();\n                let y = stem_direction === Stem.DOWN\n                    ? noteHeadBounds.y_top - noteStemHeight\n                    : noteHeadBounds.y_bottom - noteStemHeight;\n                const defaultStemExtention = stem_direction === Stem.DOWN ? this.glyphProps.stem_down_extension : this.glyphProps.stem_up_extension;\n                let defaultOffsetY = Tables.STEM_HEIGHT;\n                defaultOffsetY -= defaultOffsetY / 2.8;\n                defaultOffsetY += defaultStemExtention;\n                y += defaultOffsetY * staveNoteScale * stem_direction;\n                const offsets = stem_direction === Stem.UP\n                    ? {\n                        x1: 1,\n                        y1: 0,\n                        x2: 13,\n                        y2: -9,\n                    }\n                    : {\n                        x1: -4,\n                        y1: 1,\n                        x2: 13,\n                        y2: 9,\n                    };\n                x += offsets.x1 * offsetScale;\n                y += offsets.y1 * offsetScale;\n                slashBBox = {\n                    x1: x,\n                    y1: y,\n                    x2: x + offsets.x2 * offsetScale,\n                    y2: y + offsets.y2 * offsetScale,\n                };\n            }\n            const ctx = this.checkContext();\n            ctx.save();\n            ctx.setLineWidth(1 * offsetScale);\n            ctx.beginPath();\n            ctx.moveTo(slashBBox.x1, slashBBox.y1);\n            ctx.lineTo(slashBBox.x2, slashBBox.y2);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n    }\n    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n        const beam = this.beam;\n        if (!beam)\n            throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n        const beam_slope = beam.slope;\n        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n        const scaleX = isBeamEndNote ? -1 : 1;\n        const beam_angle = Math.atan(beam_slope * scaleX);\n        const iPointOnBeam = {\n            dx: Math.cos(beam_angle) * slashBeamOffset,\n            dy: Math.sin(beam_angle) * slashBeamOffset,\n        };\n        slashStemOffset *= this.getStemDirection();\n        const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n        const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n        const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n        const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n        const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n        const stemX = this.getStemX();\n        const stem0X = beam.notes[0].getStemX();\n        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n        const ret = {\n            x1: stemX - protrusion_stem_dx,\n            y1: stemY + slashStemOffset - protrusion_stem_dy,\n            x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n            y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n        };\n        return ret;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}