{"ast":null,"code":"import { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nexport class StemmableNote extends Note {\n  static get CATEGORY() {\n    return \"StemmableNote\";\n  }\n  constructor(noteStruct) {\n    super(noteStruct);\n  }\n  getStem() {\n    return this.stem;\n  }\n  checkStem() {\n    if (!this.stem) {\n      throw new RuntimeError('NoStem', 'No stem attached to instance');\n    }\n    return this.stem;\n  }\n  setStem(stem) {\n    this.stem = stem;\n    this.addChildElement(stem);\n    return this;\n  }\n  buildStem() {\n    const stem = new Stem();\n    this.setStem(stem);\n    return this;\n  }\n  buildFlag() {\n    let category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'flag';\n    const {\n      glyphProps\n    } = this;\n    if (this.hasFlag()) {\n      const flagCode = this.getStemDirection() === Stem.DOWN ? glyphProps.code_flag_downstem : glyphProps.code_flag_upstem;\n      if (flagCode) this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, {\n        category\n      });\n    }\n  }\n  getBaseCustomNoteHeadGlyphProps() {\n    if (this.getStemDirection() === Stem.DOWN) {\n      return this.customGlyphs[this.customGlyphs.length - 1];\n    } else {\n      return this.customGlyphs[0];\n    }\n  }\n  getStemLength() {\n    return Stem.HEIGHT + this.getStemExtension();\n  }\n  getBeamCount() {\n    const glyphProps = this.getGlyphProps();\n    if (glyphProps) {\n      return glyphProps.beam_count;\n    } else {\n      return 0;\n    }\n  }\n  getStemMinimumLength() {\n    const frac = Tables.durationToFraction(this.duration);\n    let length = frac.value() <= 1 ? 0 : 20;\n    switch (this.duration) {\n      case '8':\n        if (this.beam == undefined) length = 35;\n        break;\n      case '16':\n        length = this.beam == undefined ? 35 : 25;\n        break;\n      case '32':\n        length = this.beam == undefined ? 45 : 35;\n        break;\n      case '64':\n        length = this.beam == undefined ? 50 : 40;\n        break;\n      case '128':\n        length = this.beam == undefined ? 55 : 45;\n        break;\n      default:\n        break;\n    }\n    return length;\n  }\n  getStemDirection() {\n    if (!this.stem_direction) throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    return this.stem_direction;\n  }\n  setStemDirection(direction) {\n    if (!direction) direction = Stem.UP;\n    if (direction !== Stem.UP && direction !== Stem.DOWN) {\n      throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n    }\n    this.stem_direction = direction;\n    this.reset();\n    if (this.hasFlag()) {\n      this.buildFlag();\n    }\n    this.beam = undefined;\n    if (this.stem) {\n      this.stem.setDirection(direction);\n      this.stem.setExtension(this.getStemExtension());\n      const glyphProps = this.getBaseCustomNoteHeadGlyphProps() || this.getGlyphProps();\n      const offsets = Tables.currentMusicFont().lookupMetric(`stem.noteHead.${glyphProps.code_head}`, {\n        offsetYBaseStemUp: 0,\n        offsetYTopStemUp: 0,\n        offsetYBaseStemDown: 0,\n        offsetYTopStemDown: 0\n      });\n      this.stem.setOptions({\n        stem_up_y_offset: offsets.offsetYTopStemUp,\n        stem_down_y_offset: offsets.offsetYTopStemDown,\n        stem_up_y_base_offset: offsets.offsetYBaseStemUp,\n        stem_down_y_base_offset: offsets.offsetYBaseStemDown\n      });\n    }\n    if (this.preFormatted) {\n      this.preFormat();\n    }\n    return this;\n  }\n  getStemX() {\n    const x_begin = this.getAbsoluteX() + this.x_shift;\n    const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n    const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n    return stem_x;\n  }\n  getCenterGlyphX() {\n    return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n  }\n  getStemExtension() {\n    const glyphProps = this.getGlyphProps();\n    if (this.stem_extension_override != undefined) {\n      return this.stem_extension_override;\n    }\n    if (this.beam) {\n      return glyphProps.stem_beam_extension;\n    }\n    if (glyphProps) {\n      return this.getStemDirection() === Stem.UP ? glyphProps.stem_up_extension : glyphProps.stem_down_extension;\n    }\n    return 0;\n  }\n  setStemLength(height) {\n    this.stem_extension_override = height - Stem.HEIGHT;\n    return this;\n  }\n  getStemExtents() {\n    if (!this.stem) throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    return this.stem.getExtents();\n  }\n  getYForTopText(textLine) {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n      return Math.min(stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\n    } else {\n      return stave.getYForTopText(textLine);\n    }\n  }\n  getYForBottomText(textLine) {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n      return Math.max(stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\n    } else {\n      return stave.getYForBottomText(textLine);\n    }\n  }\n  hasFlag() {\n    return Tables.getGlyphProps(this.duration).flag == true && !this.beam;\n  }\n  postFormat() {\n    var _a;\n    (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\n    this.postFormatted = true;\n    return this;\n  }\n  drawStem(stemOptions) {\n    var _a;\n    this.checkContext();\n    this.setRendered();\n    this.setStem(new Stem(stemOptions));\n    (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();\n  }\n}","map":{"version":3,"names":["Glyph","Note","Stem","Tables","RuntimeError","StemmableNote","CATEGORY","constructor","noteStruct","getStem","stem","checkStem","setStem","addChildElement","buildStem","buildFlag","category","arguments","length","undefined","glyphProps","hasFlag","flagCode","getStemDirection","DOWN","code_flag_downstem","code_flag_upstem","flag","render_options","glyph_font_scale","getBaseCustomNoteHeadGlyphProps","customGlyphs","getStemLength","HEIGHT","getStemExtension","getBeamCount","getGlyphProps","beam_count","getStemMinimumLength","frac","durationToFraction","duration","value","beam","stem_direction","setStemDirection","direction","UP","reset","setDirection","setExtension","offsets","currentMusicFont","lookupMetric","code_head","offsetYBaseStemUp","offsetYTopStemUp","offsetYBaseStemDown","offsetYTopStemDown","setOptions","stem_up_y_offset","stem_down_y_offset","stem_up_y_base_offset","stem_down_y_base_offset","preFormatted","preFormat","getStemX","x_begin","getAbsoluteX","x_shift","x_end","getGlyphWidth","stem_x","getCenterGlyphX","stem_extension_override","stem_beam_extension","stem_up_extension","stem_down_extension","setStemLength","height","getStemExtents","getExtents","getYForTopText","textLine","stave","checkStave","hasStem","extents","Math","min","topY","annotation_spacing","getYForBottomText","max","baseY","postFormat","_a","postFormatted","drawStem","stemOptions","checkContext","setRendered","setContext","getContext","draw"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/stemmablenote.js"],"sourcesContent":["import { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nexport class StemmableNote extends Note {\n    static get CATEGORY() {\n        return \"StemmableNote\";\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n    }\n    getStem() {\n        return this.stem;\n    }\n    checkStem() {\n        if (!this.stem) {\n            throw new RuntimeError('NoStem', 'No stem attached to instance');\n        }\n        return this.stem;\n    }\n    setStem(stem) {\n        this.stem = stem;\n        this.addChildElement(stem);\n        return this;\n    }\n    buildStem() {\n        const stem = new Stem();\n        this.setStem(stem);\n        return this;\n    }\n    buildFlag(category = 'flag') {\n        const { glyphProps } = this;\n        if (this.hasFlag()) {\n            const flagCode = this.getStemDirection() === Stem.DOWN ? glyphProps.code_flag_downstem : glyphProps.code_flag_upstem;\n            if (flagCode)\n                this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, { category });\n        }\n    }\n    getBaseCustomNoteHeadGlyphProps() {\n        if (this.getStemDirection() === Stem.DOWN) {\n            return this.customGlyphs[this.customGlyphs.length - 1];\n        }\n        else {\n            return this.customGlyphs[0];\n        }\n    }\n    getStemLength() {\n        return Stem.HEIGHT + this.getStemExtension();\n    }\n    getBeamCount() {\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            return glyphProps.beam_count;\n        }\n        else {\n            return 0;\n        }\n    }\n    getStemMinimumLength() {\n        const frac = Tables.durationToFraction(this.duration);\n        let length = frac.value() <= 1 ? 0 : 20;\n        switch (this.duration) {\n            case '8':\n                if (this.beam == undefined)\n                    length = 35;\n                break;\n            case '16':\n                length = this.beam == undefined ? 35 : 25;\n                break;\n            case '32':\n                length = this.beam == undefined ? 45 : 35;\n                break;\n            case '64':\n                length = this.beam == undefined ? 50 : 40;\n                break;\n            case '128':\n                length = this.beam == undefined ? 55 : 45;\n                break;\n            default:\n                break;\n        }\n        return length;\n    }\n    getStemDirection() {\n        if (!this.stem_direction)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem_direction;\n    }\n    setStemDirection(direction) {\n        if (!direction)\n            direction = Stem.UP;\n        if (direction !== Stem.UP && direction !== Stem.DOWN) {\n            throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n        }\n        this.stem_direction = direction;\n        this.reset();\n        if (this.hasFlag()) {\n            this.buildFlag();\n        }\n        this.beam = undefined;\n        if (this.stem) {\n            this.stem.setDirection(direction);\n            this.stem.setExtension(this.getStemExtension());\n            const glyphProps = this.getBaseCustomNoteHeadGlyphProps() || this.getGlyphProps();\n            const offsets = Tables.currentMusicFont().lookupMetric(`stem.noteHead.${glyphProps.code_head}`, {\n                offsetYBaseStemUp: 0,\n                offsetYTopStemUp: 0,\n                offsetYBaseStemDown: 0,\n                offsetYTopStemDown: 0,\n            });\n            this.stem.setOptions({\n                stem_up_y_offset: offsets.offsetYTopStemUp,\n                stem_down_y_offset: offsets.offsetYTopStemDown,\n                stem_up_y_base_offset: offsets.offsetYBaseStemUp,\n                stem_down_y_base_offset: offsets.offsetYBaseStemDown,\n            });\n        }\n        if (this.preFormatted) {\n            this.preFormat();\n        }\n        return this;\n    }\n    getStemX() {\n        const x_begin = this.getAbsoluteX() + this.x_shift;\n        const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n        const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n        return stem_x;\n    }\n    getCenterGlyphX() {\n        return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n    }\n    getStemExtension() {\n        const glyphProps = this.getGlyphProps();\n        if (this.stem_extension_override != undefined) {\n            return this.stem_extension_override;\n        }\n        if (this.beam) {\n            return glyphProps.stem_beam_extension;\n        }\n        if (glyphProps) {\n            return this.getStemDirection() === Stem.UP ? glyphProps.stem_up_extension : glyphProps.stem_down_extension;\n        }\n        return 0;\n    }\n    setStemLength(height) {\n        this.stem_extension_override = height - Stem.HEIGHT;\n        return this;\n    }\n    getStemExtents() {\n        if (!this.stem)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem.getExtents();\n    }\n    getYForTopText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.min(stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\n        }\n        else {\n            return stave.getYForTopText(textLine);\n        }\n    }\n    getYForBottomText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\n        }\n        else {\n            return stave.getYForBottomText(textLine);\n        }\n    }\n    hasFlag() {\n        return Tables.getGlyphProps(this.duration).flag == true && !this.beam;\n    }\n    postFormat() {\n        var _a;\n        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\n        this.postFormatted = true;\n        return this;\n    }\n    drawStem(stemOptions) {\n        var _a;\n        this.checkContext();\n        this.setRendered();\n        this.setStem(new Stem(stemOptions));\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,YAAY;AAClC,SAASC,IAAI,QAAQ,WAAW;AAChC,SAASC,IAAI,QAAQ,WAAW;AAChC,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,YAAY,QAAQ,WAAW;AACxC,OAAO,MAAMC,aAAa,SAASJ,IAAI,CAAC;EACpC,WAAWK,QAAQA,CAAA,EAAG;IAClB,OAAO,eAAe;EAC1B;EACAC,WAAWA,CAACC,UAAU,EAAE;IACpB,KAAK,CAACA,UAAU,CAAC;EACrB;EACAC,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACC,IAAI;EACpB;EACAC,SAASA,CAAA,EAAG;IACR,IAAI,CAAC,IAAI,CAACD,IAAI,EAAE;MACZ,MAAM,IAAIN,YAAY,CAAC,QAAQ,EAAE,8BAA8B,CAAC;IACpE;IACA,OAAO,IAAI,CAACM,IAAI;EACpB;EACAE,OAAOA,CAACF,IAAI,EAAE;IACV,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACG,eAAe,CAACH,IAAI,CAAC;IAC1B,OAAO,IAAI;EACf;EACAI,SAASA,CAAA,EAAG;IACR,MAAMJ,IAAI,GAAG,IAAIR,IAAI,CAAC,CAAC;IACvB,IAAI,CAACU,OAAO,CAACF,IAAI,CAAC;IAClB,OAAO,IAAI;EACf;EACAK,SAASA,CAAA,EAAoB;IAAA,IAAnBC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,MAAM;IACvB,MAAM;MAAEG;IAAW,CAAC,GAAG,IAAI;IAC3B,IAAI,IAAI,CAACC,OAAO,CAAC,CAAC,EAAE;MAChB,MAAMC,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC,KAAKrB,IAAI,CAACsB,IAAI,GAAGJ,UAAU,CAACK,kBAAkB,GAAGL,UAAU,CAACM,gBAAgB;MACpH,IAAIJ,QAAQ,EACR,IAAI,CAACK,IAAI,GAAG,IAAI3B,KAAK,CAACsB,QAAQ,EAAE,IAAI,CAACM,cAAc,CAACC,gBAAgB,EAAE;QAAEb;MAAS,CAAC,CAAC;IAC3F;EACJ;EACAc,+BAA+BA,CAAA,EAAG;IAC9B,IAAI,IAAI,CAACP,gBAAgB,CAAC,CAAC,KAAKrB,IAAI,CAACsB,IAAI,EAAE;MACvC,OAAO,IAAI,CAACO,YAAY,CAAC,IAAI,CAACA,YAAY,CAACb,MAAM,GAAG,CAAC,CAAC;IAC1D,CAAC,MACI;MACD,OAAO,IAAI,CAACa,YAAY,CAAC,CAAC,CAAC;IAC/B;EACJ;EACAC,aAAaA,CAAA,EAAG;IACZ,OAAO9B,IAAI,CAAC+B,MAAM,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC;EAChD;EACAC,YAAYA,CAAA,EAAG;IACX,MAAMf,UAAU,GAAG,IAAI,CAACgB,aAAa,CAAC,CAAC;IACvC,IAAIhB,UAAU,EAAE;MACZ,OAAOA,UAAU,CAACiB,UAAU;IAChC,CAAC,MACI;MACD,OAAO,CAAC;IACZ;EACJ;EACAC,oBAAoBA,CAAA,EAAG;IACnB,MAAMC,IAAI,GAAGpC,MAAM,CAACqC,kBAAkB,CAAC,IAAI,CAACC,QAAQ,CAAC;IACrD,IAAIvB,MAAM,GAAGqB,IAAI,CAACG,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;IACvC,QAAQ,IAAI,CAACD,QAAQ;MACjB,KAAK,GAAG;QACJ,IAAI,IAAI,CAACE,IAAI,IAAIxB,SAAS,EACtBD,MAAM,GAAG,EAAE;QACf;MACJ,KAAK,IAAI;QACLA,MAAM,GAAG,IAAI,CAACyB,IAAI,IAAIxB,SAAS,GAAG,EAAE,GAAG,EAAE;QACzC;MACJ,KAAK,IAAI;QACLD,MAAM,GAAG,IAAI,CAACyB,IAAI,IAAIxB,SAAS,GAAG,EAAE,GAAG,EAAE;QACzC;MACJ,KAAK,IAAI;QACLD,MAAM,GAAG,IAAI,CAACyB,IAAI,IAAIxB,SAAS,GAAG,EAAE,GAAG,EAAE;QACzC;MACJ,KAAK,KAAK;QACND,MAAM,GAAG,IAAI,CAACyB,IAAI,IAAIxB,SAAS,GAAG,EAAE,GAAG,EAAE;QACzC;MACJ;QACI;IACR;IACA,OAAOD,MAAM;EACjB;EACAK,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAAC,IAAI,CAACqB,cAAc,EACpB,MAAM,IAAIxC,YAAY,CAAC,QAAQ,EAAE,gCAAgC,CAAC;IACtE,OAAO,IAAI,CAACwC,cAAc;EAC9B;EACAC,gBAAgBA,CAACC,SAAS,EAAE;IACxB,IAAI,CAACA,SAAS,EACVA,SAAS,GAAG5C,IAAI,CAAC6C,EAAE;IACvB,IAAID,SAAS,KAAK5C,IAAI,CAAC6C,EAAE,IAAID,SAAS,KAAK5C,IAAI,CAACsB,IAAI,EAAE;MAClD,MAAM,IAAIpB,YAAY,CAAC,aAAa,EAAE,2BAA2B0C,SAAS,EAAE,CAAC;IACjF;IACA,IAAI,CAACF,cAAc,GAAGE,SAAS;IAC/B,IAAI,CAACE,KAAK,CAAC,CAAC;IACZ,IAAI,IAAI,CAAC3B,OAAO,CAAC,CAAC,EAAE;MAChB,IAAI,CAACN,SAAS,CAAC,CAAC;IACpB;IACA,IAAI,CAAC4B,IAAI,GAAGxB,SAAS;IACrB,IAAI,IAAI,CAACT,IAAI,EAAE;MACX,IAAI,CAACA,IAAI,CAACuC,YAAY,CAACH,SAAS,CAAC;MACjC,IAAI,CAACpC,IAAI,CAACwC,YAAY,CAAC,IAAI,CAAChB,gBAAgB,CAAC,CAAC,CAAC;MAC/C,MAAMd,UAAU,GAAG,IAAI,CAACU,+BAA+B,CAAC,CAAC,IAAI,IAAI,CAACM,aAAa,CAAC,CAAC;MACjF,MAAMe,OAAO,GAAGhD,MAAM,CAACiD,gBAAgB,CAAC,CAAC,CAACC,YAAY,CAAC,iBAAiBjC,UAAU,CAACkC,SAAS,EAAE,EAAE;QAC5FC,iBAAiB,EAAE,CAAC;QACpBC,gBAAgB,EAAE,CAAC;QACnBC,mBAAmB,EAAE,CAAC;QACtBC,kBAAkB,EAAE;MACxB,CAAC,CAAC;MACF,IAAI,CAAChD,IAAI,CAACiD,UAAU,CAAC;QACjBC,gBAAgB,EAAET,OAAO,CAACK,gBAAgB;QAC1CK,kBAAkB,EAAEV,OAAO,CAACO,kBAAkB;QAC9CI,qBAAqB,EAAEX,OAAO,CAACI,iBAAiB;QAChDQ,uBAAuB,EAAEZ,OAAO,CAACM;MACrC,CAAC,CAAC;IACN;IACA,IAAI,IAAI,CAACO,YAAY,EAAE;MACnB,IAAI,CAACC,SAAS,CAAC,CAAC;IACpB;IACA,OAAO,IAAI;EACf;EACAC,QAAQA,CAAA,EAAG;IACP,MAAMC,OAAO,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC,GAAG,IAAI,CAACC,OAAO;IAClD,MAAMC,KAAK,GAAG,IAAI,CAACF,YAAY,CAAC,CAAC,GAAG,IAAI,CAACC,OAAO,GAAG,IAAI,CAACE,aAAa,CAAC,CAAC;IACvE,MAAMC,MAAM,GAAG,IAAI,CAAC5B,cAAc,KAAK1C,IAAI,CAACsB,IAAI,GAAG2C,OAAO,GAAGG,KAAK;IAClE,OAAOE,MAAM;EACjB;EACAC,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAACL,YAAY,CAAC,CAAC,GAAG,IAAI,CAACC,OAAO,GAAG,IAAI,CAACE,aAAa,CAAC,CAAC,GAAG,CAAC;EACxE;EACArC,gBAAgBA,CAAA,EAAG;IACf,MAAMd,UAAU,GAAG,IAAI,CAACgB,aAAa,CAAC,CAAC;IACvC,IAAI,IAAI,CAACsC,uBAAuB,IAAIvD,SAAS,EAAE;MAC3C,OAAO,IAAI,CAACuD,uBAAuB;IACvC;IACA,IAAI,IAAI,CAAC/B,IAAI,EAAE;MACX,OAAOvB,UAAU,CAACuD,mBAAmB;IACzC;IACA,IAAIvD,UAAU,EAAE;MACZ,OAAO,IAAI,CAACG,gBAAgB,CAAC,CAAC,KAAKrB,IAAI,CAAC6C,EAAE,GAAG3B,UAAU,CAACwD,iBAAiB,GAAGxD,UAAU,CAACyD,mBAAmB;IAC9G;IACA,OAAO,CAAC;EACZ;EACAC,aAAaA,CAACC,MAAM,EAAE;IAClB,IAAI,CAACL,uBAAuB,GAAGK,MAAM,GAAG7E,IAAI,CAAC+B,MAAM;IACnD,OAAO,IAAI;EACf;EACA+C,cAAcA,CAAA,EAAG;IACb,IAAI,CAAC,IAAI,CAACtE,IAAI,EACV,MAAM,IAAIN,YAAY,CAAC,QAAQ,EAAE,gCAAgC,CAAC;IACtE,OAAO,IAAI,CAACM,IAAI,CAACuE,UAAU,CAAC,CAAC;EACjC;EACAC,cAAcA,CAACC,QAAQ,EAAE;IACrB,MAAMC,KAAK,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;IAC/B,IAAI,IAAI,CAACC,OAAO,CAAC,CAAC,EAAE;MAChB,MAAMC,OAAO,GAAG,IAAI,CAACP,cAAc,CAAC,CAAC;MACrC,IAAI,CAACO,OAAO,EACR,MAAM,IAAInF,YAAY,CAAC,cAAc,EAAE,6BAA6B,CAAC;MACzE,OAAOoF,IAAI,CAACC,GAAG,CAACL,KAAK,CAACF,cAAc,CAACC,QAAQ,CAAC,EAAEI,OAAO,CAACG,IAAI,GAAG,IAAI,CAAC9D,cAAc,CAAC+D,kBAAkB,IAAIR,QAAQ,GAAG,CAAC,CAAC,CAAC;IAC3H,CAAC,MACI;MACD,OAAOC,KAAK,CAACF,cAAc,CAACC,QAAQ,CAAC;IACzC;EACJ;EACAS,iBAAiBA,CAACT,QAAQ,EAAE;IACxB,MAAMC,KAAK,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;IAC/B,IAAI,IAAI,CAACC,OAAO,CAAC,CAAC,EAAE;MAChB,MAAMC,OAAO,GAAG,IAAI,CAACP,cAAc,CAAC,CAAC;MACrC,IAAI,CAACO,OAAO,EACR,MAAM,IAAInF,YAAY,CAAC,cAAc,EAAE,6BAA6B,CAAC;MACzE,OAAOoF,IAAI,CAACK,GAAG,CAACT,KAAK,CAACF,cAAc,CAACC,QAAQ,CAAC,EAAEI,OAAO,CAACO,KAAK,GAAG,IAAI,CAAClE,cAAc,CAAC+D,kBAAkB,GAAGR,QAAQ,CAAC;IACtH,CAAC,MACI;MACD,OAAOC,KAAK,CAACQ,iBAAiB,CAACT,QAAQ,CAAC;IAC5C;EACJ;EACA9D,OAAOA,CAAA,EAAG;IACN,OAAOlB,MAAM,CAACiC,aAAa,CAAC,IAAI,CAACK,QAAQ,CAAC,CAACd,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAACgB,IAAI;EACzE;EACAoD,UAAUA,CAAA,EAAG;IACT,IAAIC,EAAE;IACN,CAACA,EAAE,GAAG,IAAI,CAACrD,IAAI,MAAM,IAAI,IAAIqD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACD,UAAU,CAAC,CAAC;IACrE,IAAI,CAACE,aAAa,GAAG,IAAI;IACzB,OAAO,IAAI;EACf;EACAC,QAAQA,CAACC,WAAW,EAAE;IAClB,IAAIH,EAAE;IACN,IAAI,CAACI,YAAY,CAAC,CAAC;IACnB,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACzF,OAAO,CAAC,IAAIV,IAAI,CAACiG,WAAW,CAAC,CAAC;IACnC,CAACH,EAAE,GAAG,IAAI,CAACtF,IAAI,MAAM,IAAI,IAAIsF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACM,UAAU,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EACjG;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}