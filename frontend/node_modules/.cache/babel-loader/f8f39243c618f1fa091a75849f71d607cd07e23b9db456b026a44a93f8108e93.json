{"ast":null,"code":"import { Font } from './font.js';\nimport { RenderContext } from './rendercontext.js';\nimport { globalObject, warn } from './util.js';\nimport { isHTMLCanvas } from './web.js';\nexport class CanvasContext extends RenderContext {\n  static get WIDTH() {\n    return 600;\n  }\n  static get HEIGHT() {\n    return 400;\n  }\n  static get CANVAS_BROWSER_SIZE_LIMIT() {\n    return 32767;\n  }\n  static sanitizeCanvasDims(width, height) {\n    const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n    if (Math.max(width, height) > limit) {\n      warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n      if (width > limit) {\n        width = limit;\n      }\n      if (height > limit) {\n        height = limit;\n      }\n    }\n    return [width, height];\n  }\n  constructor(context) {\n    super();\n    this.textHeight = 0;\n    this.context2D = context;\n    if (!context.canvas) {\n      this.canvas = {\n        width: CanvasContext.WIDTH,\n        height: CanvasContext.HEIGHT\n      };\n    } else {\n      this.canvas = context.canvas;\n    }\n  }\n  clear() {\n    this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n  openGroup(cls, id, attrs) {}\n  closeGroup() {}\n  add(child) {}\n  setFillStyle(style) {\n    this.context2D.fillStyle = style;\n    return this;\n  }\n  setBackgroundFillStyle(style) {\n    return this;\n  }\n  setStrokeStyle(style) {\n    this.context2D.strokeStyle = style;\n    return this;\n  }\n  setShadowColor(color) {\n    this.context2D.shadowColor = color;\n    return this;\n  }\n  setShadowBlur(blur) {\n    const t = this.context2D.getTransform();\n    const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n    this.context2D.shadowBlur = scale * blur;\n    return this;\n  }\n  setLineWidth(width) {\n    this.context2D.lineWidth = width;\n    return this;\n  }\n  setLineCap(capType) {\n    this.context2D.lineCap = capType;\n    return this;\n  }\n  setLineDash(dash) {\n    this.context2D.setLineDash(dash);\n    return this;\n  }\n  scale(x, y) {\n    this.context2D.scale(x, y);\n    return this;\n  }\n  resize(width, height, devicePixelRatio) {\n    var _a;\n    const canvas = this.context2D.canvas;\n    const dpr = (_a = devicePixelRatio !== null && devicePixelRatio !== void 0 ? devicePixelRatio : globalObject().devicePixelRatio) !== null && _a !== void 0 ? _a : 1;\n    [width, height] = CanvasContext.sanitizeCanvasDims(width * dpr, height * dpr);\n    width = width / dpr | 0;\n    height = height / dpr | 0;\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n    if (isHTMLCanvas(canvas)) {\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n    }\n    return this.scale(dpr, dpr);\n  }\n  rect(x, y, width, height) {\n    this.context2D.rect(x, y, width, height);\n    return this;\n  }\n  fillRect(x, y, width, height) {\n    this.context2D.fillRect(x, y, width, height);\n    return this;\n  }\n  clearRect(x, y, width, height) {\n    this.context2D.clearRect(x, y, width, height);\n    return this;\n  }\n  beginPath() {\n    this.context2D.beginPath();\n    return this;\n  }\n  moveTo(x, y) {\n    this.context2D.moveTo(x, y);\n    return this;\n  }\n  lineTo(x, y) {\n    this.context2D.lineTo(x, y);\n    return this;\n  }\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n    this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    return this;\n  }\n  quadraticCurveTo(cpx, cpy, x, y) {\n    this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n    return this;\n  }\n  arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n    this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n    return this;\n  }\n  fill() {\n    this.context2D.fill();\n    return this;\n  }\n  stroke() {\n    this.context2D.stroke();\n    return this;\n  }\n  closePath() {\n    this.context2D.closePath();\n    return this;\n  }\n  measureText(text) {\n    const metrics = this.context2D.measureText(text);\n    let y = 0;\n    let height = 0;\n    if (metrics.fontBoundingBoxAscent) {\n      y = -metrics.fontBoundingBoxAscent;\n      height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\n    } else {\n      y = -metrics.actualBoundingBoxAscent;\n      height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\n    }\n    return {\n      x: 0,\n      y: y,\n      width: metrics.width,\n      height: height\n    };\n  }\n  fillText(text, x, y) {\n    this.context2D.fillText(text, x, y);\n    return this;\n  }\n  save() {\n    this.context2D.save();\n    return this;\n  }\n  restore() {\n    this.context2D.restore();\n    return this;\n  }\n  set fillStyle(style) {\n    this.context2D.fillStyle = style;\n  }\n  get fillStyle() {\n    return this.context2D.fillStyle;\n  }\n  set strokeStyle(style) {\n    this.context2D.strokeStyle = style;\n  }\n  get strokeStyle() {\n    return this.context2D.strokeStyle;\n  }\n  setFont(f, size, weight, style) {\n    const fontInfo = Font.validate(f, size, weight, style);\n    this.context2D.font = Font.toCSSString(fontInfo);\n    this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\n    return this;\n  }\n  getFont() {\n    return this.context2D.font;\n  }\n}","map":{"version":3,"names":["Font","RenderContext","globalObject","warn","isHTMLCanvas","CanvasContext","WIDTH","HEIGHT","CANVAS_BROWSER_SIZE_LIMIT","sanitizeCanvasDims","width","height","limit","Math","max","constructor","context","textHeight","context2D","canvas","clear","clearRect","openGroup","cls","id","attrs","closeGroup","add","child","setFillStyle","style","fillStyle","setBackgroundFillStyle","setStrokeStyle","strokeStyle","setShadowColor","color","shadowColor","setShadowBlur","blur","t","getTransform","scale","sqrt","a","b","c","d","shadowBlur","setLineWidth","lineWidth","setLineCap","capType","lineCap","setLineDash","dash","x","y","resize","devicePixelRatio","_a","dpr","rect","fillRect","beginPath","moveTo","lineTo","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","quadraticCurveTo","cpx","cpy","arc","radius","startAngle","endAngle","counterclockwise","fill","stroke","closePath","measureText","text","metrics","fontBoundingBoxAscent","fontBoundingBoxDescent","actualBoundingBoxAscent","actualBoundingBoxDescent","fillText","save","restore","setFont","f","size","weight","fontInfo","validate","font","toCSSString","convertSizeToPixelValue","getFont"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/canvascontext.js"],"sourcesContent":["import { Font } from './font.js';\nimport { RenderContext } from './rendercontext.js';\nimport { globalObject, warn } from './util.js';\nimport { isHTMLCanvas } from './web.js';\nexport class CanvasContext extends RenderContext {\n    static get WIDTH() {\n        return 600;\n    }\n    static get HEIGHT() {\n        return 400;\n    }\n    static get CANVAS_BROWSER_SIZE_LIMIT() {\n        return 32767;\n    }\n    static sanitizeCanvasDims(width, height) {\n        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n        if (Math.max(width, height) > limit) {\n            warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n            if (width > limit) {\n                width = limit;\n            }\n            if (height > limit) {\n                height = limit;\n            }\n        }\n        return [width, height];\n    }\n    constructor(context) {\n        super();\n        this.textHeight = 0;\n        this.context2D = context;\n        if (!context.canvas) {\n            this.canvas = {\n                width: CanvasContext.WIDTH,\n                height: CanvasContext.HEIGHT,\n            };\n        }\n        else {\n            this.canvas = context.canvas;\n        }\n    }\n    clear() {\n        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    openGroup(cls, id, attrs) {\n    }\n    closeGroup() {\n    }\n    add(child) {\n    }\n    setFillStyle(style) {\n        this.context2D.fillStyle = style;\n        return this;\n    }\n    setBackgroundFillStyle(style) {\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.context2D.strokeStyle = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.context2D.shadowColor = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        const t = this.context2D.getTransform();\n        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n        this.context2D.shadowBlur = scale * blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.context2D.lineWidth = width;\n        return this;\n    }\n    setLineCap(capType) {\n        this.context2D.lineCap = capType;\n        return this;\n    }\n    setLineDash(dash) {\n        this.context2D.setLineDash(dash);\n        return this;\n    }\n    scale(x, y) {\n        this.context2D.scale(x, y);\n        return this;\n    }\n    resize(width, height, devicePixelRatio) {\n        var _a;\n        const canvas = this.context2D.canvas;\n        const dpr = (_a = devicePixelRatio !== null && devicePixelRatio !== void 0 ? devicePixelRatio : globalObject().devicePixelRatio) !== null && _a !== void 0 ? _a : 1;\n        [width, height] = CanvasContext.sanitizeCanvasDims(width * dpr, height * dpr);\n        width = (width / dpr) | 0;\n        height = (height / dpr) | 0;\n        canvas.width = width * dpr;\n        canvas.height = height * dpr;\n        if (isHTMLCanvas(canvas)) {\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n        }\n        return this.scale(dpr, dpr);\n    }\n    rect(x, y, width, height) {\n        this.context2D.rect(x, y, width, height);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        this.context2D.fillRect(x, y, width, height);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        this.context2D.clearRect(x, y, width, height);\n        return this;\n    }\n    beginPath() {\n        this.context2D.beginPath();\n        return this;\n    }\n    moveTo(x, y) {\n        this.context2D.moveTo(x, y);\n        return this;\n    }\n    lineTo(x, y) {\n        this.context2D.lineTo(x, y);\n        return this;\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n        return this;\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n        return this;\n    }\n    fill() {\n        this.context2D.fill();\n        return this;\n    }\n    stroke() {\n        this.context2D.stroke();\n        return this;\n    }\n    closePath() {\n        this.context2D.closePath();\n        return this;\n    }\n    measureText(text) {\n        const metrics = this.context2D.measureText(text);\n        let y = 0;\n        let height = 0;\n        if (metrics.fontBoundingBoxAscent) {\n            y = -metrics.fontBoundingBoxAscent;\n            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\n        }\n        else {\n            y = -metrics.actualBoundingBoxAscent;\n            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\n        }\n        return {\n            x: 0,\n            y: y,\n            width: metrics.width,\n            height: height,\n        };\n    }\n    fillText(text, x, y) {\n        this.context2D.fillText(text, x, y);\n        return this;\n    }\n    save() {\n        this.context2D.save();\n        return this;\n    }\n    restore() {\n        this.context2D.restore();\n        return this;\n    }\n    set fillStyle(style) {\n        this.context2D.fillStyle = style;\n    }\n    get fillStyle() {\n        return this.context2D.fillStyle;\n    }\n    set strokeStyle(style) {\n        this.context2D.strokeStyle = style;\n    }\n    get strokeStyle() {\n        return this.context2D.strokeStyle;\n    }\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.context2D.font = Font.toCSSString(fontInfo);\n        this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\n        return this;\n    }\n    getFont() {\n        return this.context2D.font;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}