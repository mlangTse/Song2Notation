{"ast":null,"code":"import { Font, FontStyle, FontWeight } from './font.js';\nimport { RenderContext } from './rendercontext.js';\nimport { Tables } from './tables.js';\nimport { normalizeAngle, prefix, RuntimeError } from './util.js';\nconst ATTRIBUTES_TO_IGNORE = {\n  path: {\n    x: true,\n    y: true,\n    width: true,\n    height: true,\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true\n  },\n  rect: {\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true\n  },\n  text: {\n    width: true,\n    height: true\n  }\n};\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst TWO_PI = 2 * Math.PI;\nclass MeasureTextCache {\n  constructor() {\n    this.cache = {};\n  }\n  lookup(text, svg, attributes) {\n    let entries = this.cache[text];\n    if (entries === undefined) {\n      entries = {};\n      this.cache[text] = entries;\n    }\n    const family = attributes['font-family'];\n    const size = attributes['font-size'];\n    const weight = attributes['font-weight'];\n    const style = attributes['font-style'];\n    const key = `${family}%${size}%${weight}%${style}`;\n    let entry = entries[key];\n    if (entry === undefined) {\n      entry = this.measureImpl(text, svg, attributes);\n      entries[key] = entry;\n    }\n    return entry;\n  }\n  measureImpl(text, svg, attributes) {\n    let txt = this.txt;\n    if (!txt) {\n      txt = document.createElementNS(SVG_NS, 'text');\n      this.txt = txt;\n    }\n    txt.textContent = text;\n    if (attributes['font-family']) txt.setAttributeNS(null, 'font-family', attributes['font-family']);\n    if (attributes['font-size']) txt.setAttributeNS(null, 'font-size', `${attributes['font-size']}`);\n    if (attributes['font-style']) txt.setAttributeNS(null, 'font-style', attributes['font-style']);\n    if (attributes['font-weight']) txt.setAttributeNS(null, 'font-weight', `${attributes['font-weight']}`);\n    svg.appendChild(txt);\n    const bbox = txt.getBBox();\n    svg.removeChild(txt);\n    return {\n      x: bbox.x,\n      y: bbox.y,\n      width: bbox.width,\n      height: bbox.height\n    };\n  }\n}\nclass SVGContext extends RenderContext {\n  constructor(element) {\n    super();\n    this.width = 0;\n    this.height = 0;\n    this.precision = 1;\n    this.backgroundFillStyle = 'white';\n    this.fontCSSString = '';\n    this.element = element;\n    this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n    const svg = this.create('svg');\n    this.element.appendChild(svg);\n    this.svg = svg;\n    this.parent = this.svg;\n    this.groups = [this.svg];\n    this.path = '';\n    this.pen = {\n      x: NaN,\n      y: NaN\n    };\n    this.lineWidth = 1.0;\n    const defaultFontAttributes = {\n      'font-family': Font.SANS_SERIF,\n      'font-size': Font.SIZE + 'pt',\n      'font-weight': FontWeight.NORMAL,\n      'font-style': FontStyle.NORMAL\n    };\n    this.state = Object.assign({\n      scaleX: 1,\n      scaleY: 1\n    }, defaultFontAttributes);\n    this.attributes = Object.assign({\n      'stroke-width': 0.3,\n      'stroke-dasharray': 'none',\n      fill: 'black',\n      stroke: 'black'\n    }, defaultFontAttributes);\n    this.groupAttributes = [];\n    this.applyAttributes(svg, this.attributes);\n    this.groupAttributes.push(Object.assign({}, this.attributes));\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black'\n    };\n    this.state_stack = [];\n  }\n  round(n) {\n    return Math.round(n * this.precision) / this.precision;\n  }\n  create(svgElementType) {\n    return document.createElementNS(SVG_NS, svgElementType);\n  }\n  openGroup(cls, id, attrs) {\n    const group = this.create('g');\n    this.groups.push(group);\n    this.parent.appendChild(group);\n    this.parent = group;\n    if (cls) group.setAttribute('class', prefix(cls));\n    if (id) group.setAttribute('id', prefix(id));\n    if (attrs && attrs.pointerBBox) {\n      group.setAttribute('pointer-events', 'bounding-box');\n    }\n    this.applyAttributes(group, this.attributes);\n    this.groupAttributes.push(Object.assign(Object.assign({}, this.groupAttributes[this.groupAttributes.length - 1]), this.attributes));\n    return group;\n  }\n  closeGroup() {\n    this.groups.pop();\n    this.groupAttributes.pop();\n    this.parent = this.groups[this.groups.length - 1];\n  }\n  add(elem) {\n    this.parent.appendChild(elem);\n  }\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n  setBackgroundFillStyle(style) {\n    this.backgroundFillStyle = style;\n    return this;\n  }\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n  setShadowColor(color) {\n    this.shadow_attributes.color = color;\n    return this;\n  }\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n    return this;\n  }\n  setLineDash(lineDash) {\n    if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n      this.attributes['stroke-dasharray'] = lineDash.join(',');\n      return this;\n    } else {\n      throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n    }\n  }\n  setLineCap(capType) {\n    this.attributes['stroke-linecap'] = capType;\n    return this;\n  }\n  resize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.element.style.width = width.toString();\n    this.svg.style.width = width.toString();\n    this.svg.style.height = height.toString();\n    const attributes = {\n      width,\n      height\n    };\n    this.applyAttributes(this.svg, attributes);\n    this.scale(this.state.scaleX, this.state.scaleY);\n    return this;\n  }\n  scale(x, y) {\n    this.state.scaleX = this.state.scaleX ? this.state.scaleX * x : x;\n    this.state.scaleY = this.state.scaleY ? this.state.scaleY * y : y;\n    const visibleWidth = this.width / this.state.scaleX;\n    const visibleHeight = this.height / this.state.scaleY;\n    this.setViewBox(0, 0, visibleWidth, visibleHeight);\n    return this;\n  }\n  setViewBox(viewBox_or_minX, minY, width, height) {\n    if (typeof viewBox_or_minX === 'string') {\n      this.svg.setAttribute('viewBox', viewBox_or_minX);\n    } else {\n      const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }\n  applyAttributes(element, attributes) {\n    const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\n    for (const attrName in attributes) {\n      if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\n        continue;\n      }\n      if (attributes[attrName] && (this.groupAttributes.length == 0 || attributes[attrName] != this.groupAttributes[this.groupAttributes.length - 1][attrName])) element.setAttributeNS(null, attrName, attributes[attrName]);\n    }\n    return element;\n  }\n  clear() {\n    while (this.svg.lastChild) {\n      this.svg.removeChild(this.svg.lastChild);\n    }\n    this.scale(this.state.scaleX, this.state.scaleY);\n  }\n  rect(x, y, width, height, attributes) {\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n    const rectangle = this.create('rect');\n    attributes = attributes !== null && attributes !== void 0 ? attributes : {\n      fill: 'none',\n      'stroke-width': this.lineWidth,\n      stroke: 'black'\n    };\n    x = this.round(x);\n    y = this.round(y);\n    width = this.round(width);\n    height = this.round(height);\n    this.applyAttributes(rectangle, Object.assign({\n      x,\n      y,\n      width,\n      height\n    }, attributes));\n    this.add(rectangle);\n    return this;\n  }\n  fillRect(x, y, width, height) {\n    const attributes = {\n      fill: this.attributes.fill,\n      stroke: 'none'\n    };\n    this.rect(x, y, width, height, attributes);\n    return this;\n  }\n  clearRect(x, y, width, height) {\n    this.rect(x, y, width, height, {\n      fill: this.backgroundFillStyle,\n      stroke: 'none'\n    });\n    return this;\n  }\n  beginPath() {\n    this.path = '';\n    this.pen.x = NaN;\n    this.pen.y = NaN;\n    return this;\n  }\n  moveTo(x, y) {\n    x = this.round(x);\n    y = this.round(y);\n    this.path += 'M' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n  lineTo(x, y) {\n    x = this.round(x);\n    y = this.round(y);\n    this.path += 'L' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    x = this.round(x);\n    y = this.round(y);\n    x1 = this.round(x1);\n    y1 = this.round(y1);\n    x2 = this.round(x2);\n    y2 = this.round(y2);\n    this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n  quadraticCurveTo(x1, y1, x, y) {\n    x = this.round(x);\n    y = this.round(y);\n    x1 = this.round(x1);\n    y1 = this.round(y1);\n    this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n  arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n    let x0 = x + radius * Math.cos(startAngle);\n    let y0 = y + radius * Math.sin(startAngle);\n    x0 = this.round(x0);\n    y0 = this.round(y0);\n    const tmpStartTest = normalizeAngle(startAngle);\n    const tmpEndTest = normalizeAngle(endAngle);\n    if (!counterclockwise && endAngle - startAngle >= TWO_PI || counterclockwise && startAngle - endAngle >= TWO_PI || tmpStartTest === tmpEndTest) {\n      let x1 = x + radius * Math.cos(startAngle + Math.PI);\n      let y1 = y + radius * Math.sin(startAngle + Math.PI);\n      x1 = this.round(x1);\n      y1 = this.round(y1);\n      radius = this.round(radius);\n      this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n      this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n      this.pen.x = x0;\n      this.pen.y = y0;\n    } else {\n      let x1 = x + radius * Math.cos(endAngle);\n      let y1 = y + radius * Math.sin(endAngle);\n      startAngle = tmpStartTest;\n      endAngle = tmpEndTest;\n      let large;\n      if (Math.abs(endAngle - startAngle) < Math.PI) {\n        large = counterclockwise;\n      } else {\n        large = !counterclockwise;\n      }\n      if (startAngle > endAngle) {\n        large = !large;\n      }\n      const sweep = !counterclockwise;\n      x1 = this.round(x1);\n      y1 = this.round(y1);\n      radius = this.round(radius);\n      this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n      this.pen.x = x1;\n      this.pen.y = y1;\n    }\n    return this;\n  }\n  closePath() {\n    this.path += 'Z';\n    return this;\n  }\n  getShadowStyle() {\n    const sa = this.shadow_attributes;\n    return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n  }\n  fill(attributes) {\n    const path = this.create('path');\n    if (typeof attributes === 'undefined') {\n      attributes = Object.assign(Object.assign({}, this.attributes), {\n        stroke: 'none'\n      });\n    }\n    attributes.d = this.path;\n    if (this.shadow_attributes.width > 0) {\n      attributes.style = this.getShadowStyle();\n    }\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n  stroke() {\n    const path = this.create('path');\n    const attributes = Object.assign(Object.assign({}, this.attributes), {\n      fill: 'none',\n      'stroke-width': this.lineWidth,\n      d: this.path\n    });\n    if (this.shadow_attributes.width > 0) {\n      attributes.style = this.getShadowStyle();\n    }\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n  measureText(text) {\n    return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);\n  }\n  fillText(text, x, y) {\n    if (!text || text.length <= 0) {\n      return this;\n    }\n    x = this.round(x);\n    y = this.round(y);\n    const attributes = Object.assign(Object.assign({}, this.attributes), {\n      stroke: 'none',\n      x,\n      y\n    });\n    const txt = this.create('text');\n    txt.textContent = text;\n    this.applyAttributes(txt, attributes);\n    this.add(txt);\n    return this;\n  }\n  save() {\n    this.state_stack.push({\n      state: {\n        'font-family': this.state['font-family'],\n        'font-weight': this.state['font-weight'],\n        'font-style': this.state['font-style'],\n        'font-size': this.state['font-size'],\n        scale: this.state.scale\n      },\n      attributes: {\n        'font-family': this.attributes['font-family'],\n        'font-weight': this.attributes['font-weight'],\n        'font-style': this.attributes['font-style'],\n        'font-size': this.attributes['font-size'],\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n        'stroke-dasharray': this.attributes['stroke-dasharray']\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color\n      },\n      lineWidth: this.lineWidth\n    });\n    return this;\n  }\n  restore() {\n    const savedState = this.state_stack.pop();\n    if (savedState) {\n      const state = savedState;\n      this.state['font-family'] = state.state['font-family'];\n      this.state['font-weight'] = state.state['font-weight'];\n      this.state['font-style'] = state.state['font-style'];\n      this.state['font-size'] = state.state['font-size'];\n      this.state.scale = state.state.scale;\n      this.attributes['font-family'] = state.attributes['font-family'];\n      this.attributes['font-weight'] = state.attributes['font-weight'];\n      this.attributes['font-style'] = state.attributes['font-style'];\n      this.attributes['font-size'] = state.attributes['font-size'];\n      this.attributes.fill = state.attributes.fill;\n      this.attributes.stroke = state.attributes.stroke;\n      this.attributes['stroke-width'] = state.attributes['stroke-width'];\n      this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n      this.shadow_attributes.width = state.shadow_attributes.width;\n      this.shadow_attributes.color = state.shadow_attributes.color;\n      this.lineWidth = state.lineWidth;\n    }\n    return this;\n  }\n  set fillStyle(style) {\n    this.setFillStyle(style);\n  }\n  get fillStyle() {\n    return this.attributes.fill;\n  }\n  set strokeStyle(style) {\n    this.setStrokeStyle(style);\n  }\n  get strokeStyle() {\n    return this.attributes.stroke;\n  }\n  setFont(f, size, weight, style) {\n    const fontInfo = Font.validate(f, size, weight, style);\n    this.fontCSSString = Font.toCSSString(fontInfo);\n    const fontAttributes = {\n      'font-family': fontInfo.family,\n      'font-size': fontInfo.size,\n      'font-weight': fontInfo.weight,\n      'font-style': fontInfo.style\n    };\n    this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\n    this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\n    return this;\n  }\n  getFont() {\n    return this.fontCSSString;\n  }\n}\nSVGContext.measureTextCache = new MeasureTextCache();\nexport { SVGContext };","map":{"version":3,"names":["Font","FontStyle","FontWeight","RenderContext","Tables","normalizeAngle","prefix","RuntimeError","ATTRIBUTES_TO_IGNORE","path","x","y","width","height","rect","text","SVG_NS","TWO_PI","Math","PI","MeasureTextCache","constructor","cache","lookup","svg","attributes","entries","undefined","family","size","weight","style","key","entry","measureImpl","txt","document","createElementNS","textContent","setAttributeNS","appendChild","bbox","getBBox","removeChild","SVGContext","element","precision","backgroundFillStyle","fontCSSString","pow","RENDER_PRECISION_PLACES","create","parent","groups","pen","NaN","lineWidth","defaultFontAttributes","SANS_SERIF","SIZE","NORMAL","state","Object","assign","scaleX","scaleY","fill","stroke","groupAttributes","applyAttributes","push","shadow_attributes","color","state_stack","round","n","svgElementType","openGroup","cls","id","attrs","group","setAttribute","pointerBBox","length","closeGroup","pop","add","elem","setFillStyle","setBackgroundFillStyle","setStrokeStyle","setShadowColor","setShadowBlur","blur","setLineWidth","setLineDash","lineDash","prototype","toString","call","join","setLineCap","capType","resize","scale","visibleWidth","visibleHeight","setViewBox","viewBox_or_minX","minY","viewBoxString","attrNamesToIgnore","nodeName","attrName","clear","lastChild","rectangle","fillRect","clearRect","beginPath","moveTo","lineTo","bezierCurveTo","x1","y1","x2","y2","quadraticCurveTo","arc","radius","startAngle","endAngle","counterclockwise","x0","cos","y0","sin","tmpStartTest","tmpEndTest","large","abs","sweep","closePath","getShadowStyle","sa","d","measureText","measureTextCache","fillText","save","restore","savedState","fillStyle","strokeStyle","setFont","f","fontInfo","validate","toCSSString","fontAttributes","getFont"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/svgcontext.js"],"sourcesContent":["import { Font, FontStyle, FontWeight } from './font.js';\nimport { RenderContext } from './rendercontext.js';\nimport { Tables } from './tables.js';\nimport { normalizeAngle, prefix, RuntimeError } from './util.js';\nconst ATTRIBUTES_TO_IGNORE = {\n    path: {\n        x: true,\n        y: true,\n        width: true,\n        height: true,\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    rect: {\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    text: {\n        width: true,\n        height: true,\n    },\n};\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst TWO_PI = 2 * Math.PI;\nclass MeasureTextCache {\n    constructor() {\n        this.cache = {};\n    }\n    lookup(text, svg, attributes) {\n        let entries = this.cache[text];\n        if (entries === undefined) {\n            entries = {};\n            this.cache[text] = entries;\n        }\n        const family = attributes['font-family'];\n        const size = attributes['font-size'];\n        const weight = attributes['font-weight'];\n        const style = attributes['font-style'];\n        const key = `${family}%${size}%${weight}%${style}`;\n        let entry = entries[key];\n        if (entry === undefined) {\n            entry = this.measureImpl(text, svg, attributes);\n            entries[key] = entry;\n        }\n        return entry;\n    }\n    measureImpl(text, svg, attributes) {\n        let txt = this.txt;\n        if (!txt) {\n            txt = document.createElementNS(SVG_NS, 'text');\n            this.txt = txt;\n        }\n        txt.textContent = text;\n        if (attributes['font-family'])\n            txt.setAttributeNS(null, 'font-family', attributes['font-family']);\n        if (attributes['font-size'])\n            txt.setAttributeNS(null, 'font-size', `${attributes['font-size']}`);\n        if (attributes['font-style'])\n            txt.setAttributeNS(null, 'font-style', attributes['font-style']);\n        if (attributes['font-weight'])\n            txt.setAttributeNS(null, 'font-weight', `${attributes['font-weight']}`);\n        svg.appendChild(txt);\n        const bbox = txt.getBBox();\n        svg.removeChild(txt);\n        return { x: bbox.x, y: bbox.y, width: bbox.width, height: bbox.height };\n    }\n}\nclass SVGContext extends RenderContext {\n    constructor(element) {\n        super();\n        this.width = 0;\n        this.height = 0;\n        this.precision = 1;\n        this.backgroundFillStyle = 'white';\n        this.fontCSSString = '';\n        this.element = element;\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n        const svg = this.create('svg');\n        this.element.appendChild(svg);\n        this.svg = svg;\n        this.parent = this.svg;\n        this.groups = [this.svg];\n        this.path = '';\n        this.pen = { x: NaN, y: NaN };\n        this.lineWidth = 1.0;\n        const defaultFontAttributes = {\n            'font-family': Font.SANS_SERIF,\n            'font-size': Font.SIZE + 'pt',\n            'font-weight': FontWeight.NORMAL,\n            'font-style': FontStyle.NORMAL,\n        };\n        this.state = Object.assign({ scaleX: 1, scaleY: 1 }, defaultFontAttributes);\n        this.attributes = Object.assign({ 'stroke-width': 0.3, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black' }, defaultFontAttributes);\n        this.groupAttributes = [];\n        this.applyAttributes(svg, this.attributes);\n        this.groupAttributes.push(Object.assign({}, this.attributes));\n        this.shadow_attributes = {\n            width: 0,\n            color: 'black',\n        };\n        this.state_stack = [];\n    }\n    round(n) {\n        return Math.round(n * this.precision) / this.precision;\n    }\n    create(svgElementType) {\n        return document.createElementNS(SVG_NS, svgElementType);\n    }\n    openGroup(cls, id, attrs) {\n        const group = this.create('g');\n        this.groups.push(group);\n        this.parent.appendChild(group);\n        this.parent = group;\n        if (cls)\n            group.setAttribute('class', prefix(cls));\n        if (id)\n            group.setAttribute('id', prefix(id));\n        if (attrs && attrs.pointerBBox) {\n            group.setAttribute('pointer-events', 'bounding-box');\n        }\n        this.applyAttributes(group, this.attributes);\n        this.groupAttributes.push(Object.assign(Object.assign({}, this.groupAttributes[this.groupAttributes.length - 1]), this.attributes));\n        return group;\n    }\n    closeGroup() {\n        this.groups.pop();\n        this.groupAttributes.pop();\n        this.parent = this.groups[this.groups.length - 1];\n    }\n    add(elem) {\n        this.parent.appendChild(elem);\n    }\n    setFillStyle(style) {\n        this.attributes.fill = style;\n        return this;\n    }\n    setBackgroundFillStyle(style) {\n        this.backgroundFillStyle = style;\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.attributes.stroke = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.shadow_attributes.color = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        this.shadow_attributes.width = blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.attributes['stroke-width'] = width;\n        this.lineWidth = width;\n        return this;\n    }\n    setLineDash(lineDash) {\n        if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n            this.attributes['stroke-dasharray'] = lineDash.join(',');\n            return this;\n        }\n        else {\n            throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n        }\n    }\n    setLineCap(capType) {\n        this.attributes['stroke-linecap'] = capType;\n        return this;\n    }\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.element.style.width = width.toString();\n        this.svg.style.width = width.toString();\n        this.svg.style.height = height.toString();\n        const attributes = {\n            width,\n            height,\n        };\n        this.applyAttributes(this.svg, attributes);\n        this.scale(this.state.scaleX, this.state.scaleY);\n        return this;\n    }\n    scale(x, y) {\n        this.state.scaleX = this.state.scaleX ? this.state.scaleX * x : x;\n        this.state.scaleY = this.state.scaleY ? this.state.scaleY * y : y;\n        const visibleWidth = this.width / this.state.scaleX;\n        const visibleHeight = this.height / this.state.scaleY;\n        this.setViewBox(0, 0, visibleWidth, visibleHeight);\n        return this;\n    }\n    setViewBox(viewBox_or_minX, minY, width, height) {\n        if (typeof viewBox_or_minX === 'string') {\n            this.svg.setAttribute('viewBox', viewBox_or_minX);\n        }\n        else {\n            const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;\n            this.svg.setAttribute('viewBox', viewBoxString);\n        }\n    }\n    applyAttributes(element, attributes) {\n        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\n        for (const attrName in attributes) {\n            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\n                continue;\n            }\n            if (attributes[attrName] &&\n                (this.groupAttributes.length == 0 ||\n                    attributes[attrName] != this.groupAttributes[this.groupAttributes.length - 1][attrName]))\n                element.setAttributeNS(null, attrName, attributes[attrName]);\n        }\n        return element;\n    }\n    clear() {\n        while (this.svg.lastChild) {\n            this.svg.removeChild(this.svg.lastChild);\n        }\n        this.scale(this.state.scaleX, this.state.scaleY);\n    }\n    rect(x, y, width, height, attributes) {\n        if (height < 0) {\n            y += height;\n            height *= -1;\n        }\n        const rectangle = this.create('rect');\n        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.lineWidth, stroke: 'black' };\n        x = this.round(x);\n        y = this.round(y);\n        width = this.round(width);\n        height = this.round(height);\n        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));\n        this.add(rectangle);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        const attributes = { fill: this.attributes.fill, stroke: 'none' };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        this.rect(x, y, width, height, { fill: this.backgroundFillStyle, stroke: 'none' });\n        return this;\n    }\n    beginPath() {\n        this.path = '';\n        this.pen.x = NaN;\n        this.pen.y = NaN;\n        return this;\n    }\n    moveTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'M' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    lineTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'L' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    bezierCurveTo(x1, y1, x2, y2, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        x2 = this.round(x2);\n        y2 = this.round(y2);\n        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    quadraticCurveTo(x1, y1, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        let x0 = x + radius * Math.cos(startAngle);\n        let y0 = y + radius * Math.sin(startAngle);\n        x0 = this.round(x0);\n        y0 = this.round(y0);\n        const tmpStartTest = normalizeAngle(startAngle);\n        const tmpEndTest = normalizeAngle(endAngle);\n        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n            (counterclockwise && startAngle - endAngle >= TWO_PI) ||\n            tmpStartTest === tmpEndTest) {\n            let x1 = x + radius * Math.cos(startAngle + Math.PI);\n            let y1 = y + radius * Math.sin(startAngle + Math.PI);\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n            this.pen.x = x0;\n            this.pen.y = y0;\n        }\n        else {\n            let x1 = x + radius * Math.cos(endAngle);\n            let y1 = y + radius * Math.sin(endAngle);\n            startAngle = tmpStartTest;\n            endAngle = tmpEndTest;\n            let large;\n            if (Math.abs(endAngle - startAngle) < Math.PI) {\n                large = counterclockwise;\n            }\n            else {\n                large = !counterclockwise;\n            }\n            if (startAngle > endAngle) {\n                large = !large;\n            }\n            const sweep = !counterclockwise;\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n            this.pen.x = x1;\n            this.pen.y = y1;\n        }\n        return this;\n    }\n    closePath() {\n        this.path += 'Z';\n        return this;\n    }\n    getShadowStyle() {\n        const sa = this.shadow_attributes;\n        return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n    }\n    fill(attributes) {\n        const path = this.create('path');\n        if (typeof attributes === 'undefined') {\n            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });\n        }\n        attributes.d = this.path;\n        if (this.shadow_attributes.width > 0) {\n            attributes.style = this.getShadowStyle();\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    stroke() {\n        const path = this.create('path');\n        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', 'stroke-width': this.lineWidth, d: this.path });\n        if (this.shadow_attributes.width > 0) {\n            attributes.style = this.getShadowStyle();\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    measureText(text) {\n        return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);\n    }\n    fillText(text, x, y) {\n        if (!text || text.length <= 0) {\n            return this;\n        }\n        x = this.round(x);\n        y = this.round(y);\n        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,\n            y });\n        const txt = this.create('text');\n        txt.textContent = text;\n        this.applyAttributes(txt, attributes);\n        this.add(txt);\n        return this;\n    }\n    save() {\n        this.state_stack.push({\n            state: {\n                'font-family': this.state['font-family'],\n                'font-weight': this.state['font-weight'],\n                'font-style': this.state['font-style'],\n                'font-size': this.state['font-size'],\n                scale: this.state.scale,\n            },\n            attributes: {\n                'font-family': this.attributes['font-family'],\n                'font-weight': this.attributes['font-weight'],\n                'font-style': this.attributes['font-style'],\n                'font-size': this.attributes['font-size'],\n                fill: this.attributes.fill,\n                stroke: this.attributes.stroke,\n                'stroke-width': this.attributes['stroke-width'],\n                'stroke-dasharray': this.attributes['stroke-dasharray'],\n            },\n            shadow_attributes: {\n                width: this.shadow_attributes.width,\n                color: this.shadow_attributes.color,\n            },\n            lineWidth: this.lineWidth,\n        });\n        return this;\n    }\n    restore() {\n        const savedState = this.state_stack.pop();\n        if (savedState) {\n            const state = savedState;\n            this.state['font-family'] = state.state['font-family'];\n            this.state['font-weight'] = state.state['font-weight'];\n            this.state['font-style'] = state.state['font-style'];\n            this.state['font-size'] = state.state['font-size'];\n            this.state.scale = state.state.scale;\n            this.attributes['font-family'] = state.attributes['font-family'];\n            this.attributes['font-weight'] = state.attributes['font-weight'];\n            this.attributes['font-style'] = state.attributes['font-style'];\n            this.attributes['font-size'] = state.attributes['font-size'];\n            this.attributes.fill = state.attributes.fill;\n            this.attributes.stroke = state.attributes.stroke;\n            this.attributes['stroke-width'] = state.attributes['stroke-width'];\n            this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n            this.shadow_attributes.width = state.shadow_attributes.width;\n            this.shadow_attributes.color = state.shadow_attributes.color;\n            this.lineWidth = state.lineWidth;\n        }\n        return this;\n    }\n    set fillStyle(style) {\n        this.setFillStyle(style);\n    }\n    get fillStyle() {\n        return this.attributes.fill;\n    }\n    set strokeStyle(style) {\n        this.setStrokeStyle(style);\n    }\n    get strokeStyle() {\n        return this.attributes.stroke;\n    }\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.fontCSSString = Font.toCSSString(fontInfo);\n        const fontAttributes = {\n            'font-family': fontInfo.family,\n            'font-size': fontInfo.size,\n            'font-weight': fontInfo.weight,\n            'font-style': fontInfo.style,\n        };\n        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\n        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\n        return this;\n    }\n    getFont() {\n        return this.fontCSSString;\n    }\n}\nSVGContext.measureTextCache = new MeasureTextCache();\nexport { SVGContext };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}