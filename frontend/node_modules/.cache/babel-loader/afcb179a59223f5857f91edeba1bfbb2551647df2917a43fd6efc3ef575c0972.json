{"ast":null,"code":"import { Glyph } from './glyph.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { TimeSignatureGlyph } from './timesigglyph.js';\nimport { defined, RuntimeError } from './util.js';\nconst assertIsValidTimeSig = timeSpec => {\n  const numbers = timeSpec.split('/');\n  if (numbers.length !== 2 && numbers[0] !== '+' && numbers[0] !== '-') {\n    throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`);\n  }\n  numbers.forEach(number => {\n    if (/^[0-9+\\-()]+$/.test(number) == false) {\n      throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\n    }\n  });\n};\nexport class TimeSignature extends StaveModifier {\n  static get CATEGORY() {\n    return \"TimeSignature\";\n  }\n  static get glyphs() {\n    return {\n      C: {\n        code: 'timeSigCommon',\n        line: 2\n      },\n      'C|': {\n        code: 'timeSigCutCommon',\n        line: 2\n      }\n    };\n  }\n  constructor() {\n    let timeSpec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '4/4';\n    let customPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 15;\n    let validate_args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    super();\n    this.timeSpec = '4/4';\n    this.line = 0;\n    this.is_numeric = true;\n    this.validate_args = validate_args;\n    const padding = customPadding;\n    const musicFont = Tables.currentMusicFont();\n    this.point = musicFont.lookupMetric('digits.point') || Tables.NOTATION_FONT_SCALE;\n    const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\n    this.topLine = 2 + fontLineShift;\n    this.bottomLine = 4 + fontLineShift;\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.setTimeSig(timeSpec);\n    this.setPadding(padding);\n  }\n  parseTimeSpec(timeSpec) {\n    var _a, _b;\n    if (timeSpec === 'C' || timeSpec === 'C|') {\n      const {\n        line,\n        code\n      } = TimeSignature.glyphs[timeSpec];\n      return {\n        line,\n        num: false,\n        glyph: new Glyph(code, Tables.NOTATION_FONT_SCALE)\n      };\n    }\n    if (this.validate_args) {\n      assertIsValidTimeSig(timeSpec);\n    }\n    const parts = timeSpec.split('/');\n    return {\n      line: 0,\n      num: true,\n      glyph: this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : '')\n    };\n  }\n  makeTimeSignatureGlyph(topDigits, botDigits) {\n    return new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\n  }\n  getInfo() {\n    const {\n      line,\n      is_numeric,\n      glyph\n    } = this;\n    return {\n      line,\n      num: is_numeric,\n      glyph\n    };\n  }\n  setTimeSig(timeSpec) {\n    this.timeSpec = timeSpec;\n    const info = this.parseTimeSpec(timeSpec);\n    this.setGlyph(info.glyph);\n    this.is_numeric = info.num;\n    this.line = info.line;\n    return this;\n  }\n  getTimeSpec() {\n    return this.timeSpec;\n  }\n  getLine() {\n    return this.line;\n  }\n  setLine(line) {\n    this.line = line;\n  }\n  getGlyph() {\n    return this.glyph;\n  }\n  setGlyph(glyph) {\n    this.glyph = glyph;\n    this.setWidth(defined(this.glyph.getMetrics().width));\n  }\n  getIsNumeric() {\n    return this.is_numeric;\n  }\n  setIsNumeric(isNumeric) {\n    this.is_numeric = isNumeric;\n  }\n  draw() {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n    this.applyStyle(ctx);\n    ctx.openGroup('timesignature', this.getAttribute('id'));\n    this.glyph.setStave(stave);\n    this.glyph.setContext(ctx);\n    this.placeGlyphOnLine(this.glyph, stave, this.line);\n    this.glyph.renderToStave(this.x);\n    ctx.closeGroup();\n    this.restoreStyle(ctx);\n  }\n}","map":{"version":3,"names":["Glyph","StaveModifier","StaveModifierPosition","Tables","TimeSignatureGlyph","defined","RuntimeError","assertIsValidTimeSig","timeSpec","numbers","split","length","forEach","number","test","TimeSignature","CATEGORY","glyphs","C","code","line","constructor","arguments","undefined","customPadding","validate_args","is_numeric","padding","musicFont","currentMusicFont","point","lookupMetric","NOTATION_FONT_SCALE","fontLineShift","topLine","bottomLine","setPosition","BEGIN","setTimeSig","setPadding","parseTimeSpec","_a","_b","num","glyph","parts","makeTimeSignatureGlyph","topDigits","botDigits","getInfo","info","setGlyph","getTimeSpec","getLine","setLine","getGlyph","setWidth","getMetrics","width","getIsNumeric","setIsNumeric","isNumeric","draw","stave","checkStave","ctx","checkContext","setRendered","applyStyle","openGroup","getAttribute","setStave","setContext","placeGlyphOnLine","renderToStave","x","closeGroup","restoreStyle"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/timesignature.js"],"sourcesContent":["import { Glyph } from './glyph.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { TimeSignatureGlyph } from './timesigglyph.js';\nimport { defined, RuntimeError } from './util.js';\nconst assertIsValidTimeSig = (timeSpec) => {\n    const numbers = timeSpec.split('/');\n    if (numbers.length !== 2 && numbers[0] !== '+' && numbers[0] !== '-') {\n        throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`);\n    }\n    numbers.forEach((number) => {\n        if (/^[0-9+\\-()]+$/.test(number) == false) {\n            throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\n        }\n    });\n};\nexport class TimeSignature extends StaveModifier {\n    static get CATEGORY() {\n        return \"TimeSignature\";\n    }\n    static get glyphs() {\n        return {\n            C: {\n                code: 'timeSigCommon',\n                line: 2,\n            },\n            'C|': {\n                code: 'timeSigCutCommon',\n                line: 2,\n            },\n        };\n    }\n    constructor(timeSpec = '4/4', customPadding = 15, validate_args = true) {\n        super();\n        this.timeSpec = '4/4';\n        this.line = 0;\n        this.is_numeric = true;\n        this.validate_args = validate_args;\n        const padding = customPadding;\n        const musicFont = Tables.currentMusicFont();\n        this.point = musicFont.lookupMetric('digits.point') || Tables.NOTATION_FONT_SCALE;\n        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\n        this.topLine = 2 + fontLineShift;\n        this.bottomLine = 4 + fontLineShift;\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setTimeSig(timeSpec);\n        this.setPadding(padding);\n    }\n    parseTimeSpec(timeSpec) {\n        var _a, _b;\n        if (timeSpec === 'C' || timeSpec === 'C|') {\n            const { line, code } = TimeSignature.glyphs[timeSpec];\n            return {\n                line,\n                num: false,\n                glyph: new Glyph(code, Tables.NOTATION_FONT_SCALE),\n            };\n        }\n        if (this.validate_args) {\n            assertIsValidTimeSig(timeSpec);\n        }\n        const parts = timeSpec.split('/');\n        return {\n            line: 0,\n            num: true,\n            glyph: this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : ''),\n        };\n    }\n    makeTimeSignatureGlyph(topDigits, botDigits) {\n        return new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\n    }\n    getInfo() {\n        const { line, is_numeric, glyph } = this;\n        return { line, num: is_numeric, glyph };\n    }\n    setTimeSig(timeSpec) {\n        this.timeSpec = timeSpec;\n        const info = this.parseTimeSpec(timeSpec);\n        this.setGlyph(info.glyph);\n        this.is_numeric = info.num;\n        this.line = info.line;\n        return this;\n    }\n    getTimeSpec() {\n        return this.timeSpec;\n    }\n    getLine() {\n        return this.line;\n    }\n    setLine(line) {\n        this.line = line;\n    }\n    getGlyph() {\n        return this.glyph;\n    }\n    setGlyph(glyph) {\n        this.glyph = glyph;\n        this.setWidth(defined(this.glyph.getMetrics().width));\n    }\n    getIsNumeric() {\n        return this.is_numeric;\n    }\n    setIsNumeric(isNumeric) {\n        this.is_numeric = isNumeric;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('timesignature', this.getAttribute('id'));\n        this.glyph.setStave(stave);\n        this.glyph.setContext(ctx);\n        this.placeGlyphOnLine(this.glyph, stave, this.line);\n        this.glyph.renderToStave(this.x);\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}