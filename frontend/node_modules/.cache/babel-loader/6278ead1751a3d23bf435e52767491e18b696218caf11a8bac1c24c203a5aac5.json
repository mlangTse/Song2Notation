{"ast":null,"code":"import { Note } from './note.js';\nimport { TimeSignature } from './timesignature.js';\nexport class TimeSigNote extends Note {\n  static get CATEGORY() {\n    return \"TimeSigNote\";\n  }\n  constructor(timeSpec, customPadding) {\n    super({\n      duration: 'b'\n    });\n    this.timeSig = new TimeSignature(timeSpec, customPadding);\n    this.setWidth(this.timeSig.getGlyph().getMetrics().width);\n    this.ignore_ticks = true;\n  }\n  addToModifierContext(mc) {\n    return this;\n  }\n  preFormat() {\n    this.preFormatted = true;\n    return this;\n  }\n  draw() {\n    const stave = this.checkStave();\n    const ctx = this.checkContext();\n    this.setRendered();\n    const tsGlyph = this.timeSig.getGlyph();\n    if (!tsGlyph.getContext()) {\n      tsGlyph.setContext(ctx);\n    }\n    tsGlyph.setStave(stave);\n    tsGlyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\n    tsGlyph.renderToStave(this.getAbsoluteX());\n  }\n}","map":{"version":3,"names":["Note","TimeSignature","TimeSigNote","CATEGORY","constructor","timeSpec","customPadding","duration","timeSig","setWidth","getGlyph","getMetrics","width","ignore_ticks","addToModifierContext","mc","preFormat","preFormatted","draw","stave","checkStave","ctx","checkContext","setRendered","tsGlyph","getContext","setContext","setStave","setYShift","getYForLine","getYForGlyphs","renderToStave","getAbsoluteX"],"sources":["/Users/lang/Documents/code/Song2Notation/frontend/node_modules/vexflow/build/esm/src/timesignote.js"],"sourcesContent":["import { Note } from './note.js';\nimport { TimeSignature } from './timesignature.js';\nexport class TimeSigNote extends Note {\n    static get CATEGORY() {\n        return \"TimeSigNote\";\n    }\n    constructor(timeSpec, customPadding) {\n        super({ duration: 'b' });\n        this.timeSig = new TimeSignature(timeSpec, customPadding);\n        this.setWidth(this.timeSig.getGlyph().getMetrics().width);\n        this.ignore_ticks = true;\n    }\n    addToModifierContext(mc) {\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        const tsGlyph = this.timeSig.getGlyph();\n        if (!tsGlyph.getContext()) {\n            tsGlyph.setContext(ctx);\n        }\n        tsGlyph.setStave(stave);\n        tsGlyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\n        tsGlyph.renderToStave(this.getAbsoluteX());\n    }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;AAChC,SAASC,aAAa,QAAQ,oBAAoB;AAClD,OAAO,MAAMC,WAAW,SAASF,IAAI,CAAC;EAClC,WAAWG,QAAQA,CAAA,EAAG;IAClB,OAAO,aAAa;EACxB;EACAC,WAAWA,CAACC,QAAQ,EAAEC,aAAa,EAAE;IACjC,KAAK,CAAC;MAAEC,QAAQ,EAAE;IAAI,CAAC,CAAC;IACxB,IAAI,CAACC,OAAO,GAAG,IAAIP,aAAa,CAACI,QAAQ,EAAEC,aAAa,CAAC;IACzD,IAAI,CAACG,QAAQ,CAAC,IAAI,CAACD,OAAO,CAACE,QAAQ,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC,CAACC,KAAK,CAAC;IACzD,IAAI,CAACC,YAAY,GAAG,IAAI;EAC5B;EACAC,oBAAoBA,CAACC,EAAE,EAAE;IACrB,OAAO,IAAI;EACf;EACAC,SAASA,CAAA,EAAG;IACR,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,OAAO,IAAI;EACf;EACAC,IAAIA,CAAA,EAAG;IACH,MAAMC,KAAK,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;IAC/B,MAAMC,GAAG,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;IAC/B,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,MAAMC,OAAO,GAAG,IAAI,CAAChB,OAAO,CAACE,QAAQ,CAAC,CAAC;IACvC,IAAI,CAACc,OAAO,CAACC,UAAU,CAAC,CAAC,EAAE;MACvBD,OAAO,CAACE,UAAU,CAACL,GAAG,CAAC;IAC3B;IACAG,OAAO,CAACG,QAAQ,CAACR,KAAK,CAAC;IACvBK,OAAO,CAACI,SAAS,CAACT,KAAK,CAACU,WAAW,CAAC,CAAC,CAAC,GAAGV,KAAK,CAACW,aAAa,CAAC,CAAC,CAAC;IAC/DN,OAAO,CAACO,aAAa,CAAC,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC;EAC9C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}